
==================== FINAL INTERFACE ====================
2016-03-01 11:43:29.216685 UTC

interface main:Flickr.People 7084
  interface hash: e84b06e87ee569fe94096f740189b937
  ABI hash: ca2d1677ec8eb73532db12ccde79f511
  export-list hash: 3dc10605d5adb9de8d1e8edad7f0d226
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ac6100078f1b53a24cd9b44b59ae6281
  used TH splices: False
  where
exports:
  Flickr.People.findByEmail
  Flickr.People.findByUsername
  Flickr.People.getInfo
  Flickr.People.getPublicGroups
  Flickr.People.getPublicPhotos
  Flickr.People.getUploadStatus
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Enum 21572a7ecadc01c858f3321ea577e161
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 04dcf41add9dda483c4e1216c1e4d955
  exports: a48c768163b3524ddb6a3c7780b5d55c
  FM 91641286fd5a4035d1caa1713877af9c
  flickCall 355bbd214dbc82d83c42c523bdee3999
  flickTranslate 0d93a9ca510de3c49d118e1a2c6aeefb
  flickrCall 27853d99c3e0ae1d63c5adb14a8ad9a4
  lsArg 2d739415b761818716273280a0efddbc
  mbArg b541776dade0993a7e0e52bc1bf85701
  parseDoc e28a4c2828b730c0874e225cfb19a6be
  withReadPerm 658c9bde6b0a00d08282c64b1b2dc831
import  -/  Flickr.Types 653ba19fff32ac001f790083a5a45199
  exports: 16c0f78ccd56a3138dea1b355b10ed13
  Bandwidth adcc1c88e72524ddd24af6ccf7f85a94
  FileSize b9a5fa1a7915be9c83fd37eda777a857
  Group 92a9ba753c3aa29993a307766f07264a
  Photo 9c6e2481eefe963aeaf1e66869e9c5ca
  PhotoInfo 6c788b02ada67204c58c61f09284a3ad
  PhotosetQuota df0de1a34bfc48e27a5d5513bfc50e62
  Safety adf3410a72159dc8e5e3a0918d3eb69f
  User 55da6a4521f5104a0ed92f1cfebb3575
  UserID cbf2c759a798b6575a1c2d75906b7fcb
  UserName 7f41fafc074931cbcc4e62c693d4947c
import  -/  Flickr.Types.Import 9b5e87367f5380e094973b827aa6043c
  exports: 305bec7abfd17862ca1e01be2c748f5a
  eltBandwidth ffa2643e81f276b4c9bc52f9293a0b4a
  eltFileSize cdd3b60cf1d6125ae0ae70d0db14af56
  eltPhotosetQuota 1e2594d860d0a67c8aa4afd974ac00d4
  eltUser 4838dec1321cbedcdf4ca799f0b19cf6
  toGroupList c9d55685f20411def0b85d4661aecbc3
  toPhotoList 1d742cbe83061d87a71f51268d60155c
  toUser 883b7b16f3fab69cd9d48936690fb540
import  -/  Flickr.Utils 24444d569f75caf3780759e9be32db2d
  exports: 95e019bbc664423a44346d6cce4f400d
  nsName 2e45503d90fe9b677556140b09b662ba
import  -/  xml-1.3.14:Text.XML.Light.Proc 277b74c044fa89f0db17455b56117130
c3ba9045f299594f5d8359d2bf580cdd
  $wfindByEmail :: GHC.Base.String
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.User #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.People.findByEmail2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.People.findByEmail1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.User
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltUser ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.User
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) #) }) -}
56eefb89394571c994601ac5aa312607
  $wfindByUsername :: Flickr.Types.UserName
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.User #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.UserName ->
                   case Flickr.Monad.$wflickCall
                          Flickr.People.findByUsername2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.People.findByUsername1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.User
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltUser ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.User
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) #) }) -}
f7b5f397ff8cdebd042317634aa3cece
  $wgetInfo :: Flickr.Types.UserID
               -> GHC.Types.Bool
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.User #)
    {- Arity: 2, Strictness: <L,U><S,1*U>,
       Unfolding: (\ w :: Flickr.Types.UserID w1 :: GHC.Types.Bool ->
                   case Flickr.Monad.$wflickCall
                          Flickr.People.getInfo2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.People.getInfo1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   let {
                     a3 :: Flickr.Monad.FMEnv
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Flickr.Types.User #)
                       {- Arity: 2 -}
                     = \ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.User
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltUser ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.User
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } }
                   } in
                   case w1 of wild {
                     GHC.Types.False
                     -> (# a3
                             `cast`
                           (<Flickr.Monad.FMEnv>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) #)
                     GHC.Types.True
                     -> (# (\ env :: Flickr.Monad.FMEnv
                              eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                            a3
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 })
                              eta)
                             `cast`
                           (<Flickr.Monad.FMEnv>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) #) } }) -}
7f83d5f0fbea784d8fb4b514d9a485ad
  $wgetPublicGroups :: Flickr.Types.UserID
                       -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Group] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.UserID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.People.getPublicGroups1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.People.getInfo1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.Group]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltGroupList ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.Group]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Group]>_R)) #) }) -}
e2cbe448437f3337d7d95dd65698f44b
  $wgetPublicPhotos :: Flickr.Types.UserID
                       -> Data.Maybe.Maybe Flickr.Types.Safety
                       -> [Flickr.Types.PhotoInfo]
                       -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U> -}
3d5a1950966a3aeda0a5eb5a8d84b25b
  findByEmail :: GHC.Base.String -> Flickr.Monad.FM Flickr.Types.User
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: GHC.Base.String ->
                   case Flickr.People.$wfindByEmail w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.User ww1 }) -}
0140c59827160c884635beaf6fe92980
  findByEmail1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "find_email"#) -}
913b2afb9db9a2b333f1afb3583fa980
  findByEmail2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.people.findByEmail"#) -}
9c5ff67b06f59cd87a2cfa42768e5bb4
  findByUsername :: Flickr.Types.UserName
                    -> Flickr.Monad.FM Flickr.Types.User
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.UserName ->
                   case Flickr.People.$wfindByUsername w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.User ww1 }) -}
a0bbb5fffa9b1d2616c1656d8412a710
  findByUsername1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "username"#) -}
83e4e05559679cfd7bb4c577a0e22a13
  findByUsername2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.people.findByUsername"#) -}
5ac21ef0767a81c0e0e91d056e7a48a6
  getInfo :: Flickr.Types.UserID
             -> GHC.Types.Bool
             -> Flickr.Monad.FM Flickr.Types.User
    {- Arity: 2, Strictness: <L,U><S,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.UserID w1 :: GHC.Types.Bool ->
                   case Flickr.People.$wgetInfo w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.User ww1 }) -}
9e813b1bc7947f591188de133a0ad139
  getInfo1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "user_id"#) -}
34660291223adc2fb7d15650549db67f
  getInfo2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.people.getInfo"#) -}
ab56d1a2aa86420baf462eb554d6b164
  getPublicGroups :: Flickr.Types.UserID
                     -> Flickr.Monad.FM [Flickr.Types.Group]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.UserID ->
                   case Flickr.People.$wgetPublicGroups w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Group] ww1 }) -}
9288c6e6acae30294942a679e083d156
  getPublicGroups1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.people.getPublicGroups"#) -}
f8783e734454b2ecdde4cfcc62833c6c
  getPublicPhotos :: Flickr.Types.UserID
                     -> Data.Maybe.Maybe Flickr.Types.Safety
                     -> [Flickr.Types.PhotoInfo]
                     -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.UserID
                     w1 :: Data.Maybe.Maybe Flickr.Types.Safety
                     w2 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.People.$wgetPublicPhotos w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
a8103cf8c6aeeaff6f026d28b24d611b
  getUploadStatus :: Flickr.Monad.FM
                         (Flickr.Types.User,
                          Flickr.Types.Bandwidth,
                          Flickr.Types.FileSize,
                          Flickr.Types.PhotosetQuota)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

