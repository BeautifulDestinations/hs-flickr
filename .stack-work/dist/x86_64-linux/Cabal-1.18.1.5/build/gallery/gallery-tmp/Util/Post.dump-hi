
==================== FINAL INTERFACE ====================
2016-03-01 11:43:12.254996 UTC

interface main:Util.Post 7084
  interface hash: e4de3e472da3509cd64cb993fa792f97
  ABI hash: 32c7b893df77ec1a06ba20c8df89f990
  export-list hash: 354d6e7172cf03346442bea1285963f7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 95a7b77e26c7afed7689ba3923265333
  used TH splices: False
  where
exports:
  Util.Post.addNameFile
  Util.Post.addNameValue
  Util.Post.fromPostParam
  Util.Post.getMIMEType
  Util.Post.isPostFile
  Util.Post.newPostRequest
  Util.Post.testRequest
  Util.Post.toMIMEType
  Util.Post.toMIMEValue
  Util.Post.toRequest
  Util.Post.PostKind{Util.Post.PostFormData Util.Post.PostQuery Util.Post.PostWWWForm}
  Util.Post.PostParam{Util.Post.PostFile Util.Post.PostNameValue}
  Util.Post.PostReq{Util.Post.PostReq Util.Post.prName Util.Post.prVals}
module dependencies: Codec.Percent Codec.URLEncoder Util.MIME
package dependencies: array-0.5.0.0 base deepseq-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 old-locale-1.0.0.6 random-1.1 time-1.4.2
                      utf8-string-1
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         random-1.1:System.Random time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
family instance modules: base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Real 35345ccdfd774068d1f4418df87bd3c9
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Numeric fd38becb40ff3d01df4ca3af1a1cc583
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  integer-gmp:GHC.Integer.Type da75f4177e120bcf6b860afbcb9b3385
import  -/  Codec.URLEncoder 84b7c33329d425d2dad3fa78667ac20e
  exports: fd5b9cac16ae9819380e84c072e78a0f
  encodeString e7ebec8d9041250a38d423952f716bc5
import  -/  Util.MIME aa41eea7ee329c84da38bfb290cc6f1b
  exports: 0c76e8424382ddac49c0d6dd072c6495
  crnl cfde07fffc481dcc121c8bdec73489c3
  mixedType 2174d82f26646a17e476837a857a0029
  showMIMEValue f6e874414e3864034723e6bc483cd7c6
  uploadFile 35a910a3f867b4908f63edea860394b5
import  -/  mime-0.3.4:Codec.MIME.Parse d284cbcfb4fdfc8569e68c5dbb94a82b
import  -/  mime-0.3.4:Codec.MIME.Type 1e5e61c4d84b261e20350318b8d4811d
import  -/  random-1.1:System.Random d593dbfc264107ac583a2be2ccc23906
b661605a8d70a8a1eeff97fff27c04d2
  $wa :: Util.Post.PostParam
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
               Codec.MIME.Type.MIMEValue #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ w :: Util.Post.PostParam
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of wild {
                     Util.Post.PostNameValue n v
                     -> (# w1,
                           Codec.MIME.Type.MIMEValue
                             Util.Post.fromPostParam8
                             (Data.Maybe.Just
                                @ Codec.MIME.Type.Disposition
                                (Codec.MIME.Type.Disposition
                                   Codec.MIME.Type.DispFormData
                                   (GHC.Types.:
                                      @ Codec.MIME.Type.DispParam
                                      (Codec.MIME.Type.Name n)
                                      (GHC.Types.[] @ Codec.MIME.Type.DispParam))))
                             (Codec.MIME.Type.Single (Codec.URLEncoder.encodeString v))
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             GHC.Types.False #)
                     Util.Post.PostFile nm fp mbTy
                     -> case mbTy of wild1 {
                          Data.Maybe.Nothing
                          -> case Codec.MIME.Parse.parseContentType fp of wild2 {
                               Data.Maybe.Nothing
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue
                                       Util.Post.fromPostParam5
                                       ds2
                                       ds3
                                       ds4
                                       ds5 } #) }
                               Data.Maybe.Just t
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue t ds2 ds3 ds4 ds5 } #) } }
                          Data.Maybe.Just ty
                          -> case Codec.MIME.Parse.parseContentType ty of wild2 {
                               Data.Maybe.Nothing
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue
                                       Util.Post.fromPostParam2
                                       ds2
                                       ds3
                                       ds4
                                       ds5 } #) }
                               Data.Maybe.Just t
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue t ds2 ds3 ds4 ds5 } #) } } } }) -}
6480277e8c370962a00c1ab92edf6195
  $wgo :: [Util.Post.PostParam]
          -> (# [Util.Post.PostParam], [Util.Post.PostParam] #)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
79e4c8426f3efd71f7120c3f0ff0a431
  data PostKind
    No C type associated
    RecFlag NonRecursive, Promotable
    = PostQuery :: PostKind |
      PostWWWForm :: PostKind |
      PostFormData :: PostKind
    FamilyInstance: none
14bc3dd55dc746c743829681e8445a9f
  data PostParam
    No C type associated
    RecFlag NonRecursive, Not promotable
    = PostNameValue :: GHC.Base.String -> GHC.Base.String -> PostParam
        Stricts: _ _ |
      PostFile :: GHC.Base.String -> GHC.IO.FilePath
                  -> (Data.Maybe.Maybe GHC.Base.String) -> PostParam
        Stricts: _ _ _
    FamilyInstance: none
95828363058cbe6b6862d4e7214ecda6
  data PostReq
    No C type associated
    RecFlag NonRecursive, Not promotable
    = PostReq :: GHC.Base.String -> [Util.Post.PostParam] -> PostReq
        Stricts: _ _
        Fields: prName prVals
    FamilyInstance: none
e42119c534776179666a4b8d64934499
  addNameFile :: GHC.Base.String
                 -> GHC.IO.FilePath
                 -> Data.Maybe.Maybe GHC.Base.String
                 -> Util.Post.PostReq
                 -> Util.Post.PostReq
    {- Arity: 4, HasNoCafRefs,
       Strictness: <L,U><L,U><L,U><S,1*U(U,U)>m,
       Unfolding: InlineRule (4, True, False)
                  (\ nm :: GHC.Base.String
                     fp :: GHC.IO.FilePath
                     mbTy :: Data.Maybe.Maybe GHC.Base.String
                     pr :: Util.Post.PostReq ->
                   case pr of wild { Util.Post.PostReq ds ds1 ->
                   Util.Post.PostReq
                     ds
                     (GHC.Types.:
                        @ Util.Post.PostParam
                        (Util.Post.PostFile nm fp mbTy)
                        ds1) }) -}
391f0008f6246c325ec484fdab7d8898
  addNameValue :: GHC.Base.String
                  -> GHC.Base.String
                  -> Util.Post.PostReq
                  -> Util.Post.PostReq
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U,U)>m,
       Unfolding: InlineRule (3, True, False)
                  (\ n :: GHC.Base.String
                     v :: GHC.Base.String
                     pr :: Util.Post.PostReq ->
                   case pr of wild { Util.Post.PostReq ds ds1 ->
                   Util.Post.PostReq
                     ds
                     (GHC.Types.:
                        @ Util.Post.PostParam
                        (Util.Post.PostNameValue n v)
                        ds1) }) -}
63b86044d9030047dd308afbb0a4b3cc
  fromPostParam :: GHC.Base.String
                   -> Util.Post.PostParam
                   -> GHC.Types.IO Codec.MIME.Type.MIMEValue
    {- Arity: 3, Strictness: <L,A><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Util.Post.fromPostParam1
                    `cast`
                  (<GHC.Base.String>_R
                   ->_R <Util.Post.PostParam>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.MIMEValue>_R)) -}
7541a5d01790d790476cb450e658973d
  fromPostParam1 :: GHC.Base.String
                    -> Util.Post.PostParam
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                          Codec.MIME.Type.MIMEValue #)
    {- Arity: 3, Strictness: <L,A><S,1*U><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, True)
                  (\ w :: GHC.Base.String
                     w1 :: Util.Post.PostParam
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   Util.Post.$wa w1 w2) -}
31abb21e6eff012d5fed61df7332dcb3
  fromPostParam10 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "x-www-form-urlencoded"#) -}
c4b0ff4ac10b15027374e54e1f87bfbf
  fromPostParam2 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.Post.fromPostParam3
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
89c9a20a3ceb16c1c8d421a87244ae99
  fromPostParam3 :: Codec.MIME.Type.MIMEType
    {- Strictness: m7,
       Unfolding: (Codec.MIME.Type.Text Util.Post.fromPostParam4) -}
f939d6ebd86777a2ecb6d9bc13c5d906
  fromPostParam4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "plain"#) -}
a4fc6b60da6a8b530684ed7d77e58dbe
  fromPostParam5 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.Post.fromPostParam6
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
8ccd24dfc72e0a223f578e2c514046e7
  fromPostParam6 :: Codec.MIME.Type.MIMEType
    {- Strictness: m1,
       Unfolding: (Codec.MIME.Type.Application
                     Util.Post.fromPostParam7) -}
f86f5c29242ccd39888689e454fac54e
  fromPostParam7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "octet-stream"#) -}
65979015fc2c30f2645cce637b8401a5
  fromPostParam8 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.Post.fromPostParam9
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
e74debb1bdb6a776834f382df17a48aa
  fromPostParam9 :: Codec.MIME.Type.MIMEType
    {- Strictness: m1,
       Unfolding: (Codec.MIME.Type.Application
                     Util.Post.fromPostParam10) -}
2060b4007b28b9d28a2b022b88b89cad
  getMIMEType :: GHC.Base.String -> GHC.Types.IO Codec.MIME.Type.Type
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (Util.Post.getMIMEType1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.Type>_R))) -}
ea82fa92c1bab8eabfccaa6fd1452929
  getMIMEType1 :: GHC.Base.String
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, Codec.MIME.Type.Type #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ x :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Codec.MIME.Parse.parseContentType x of wild {
                     Data.Maybe.Nothing -> (# eta, Util.Post.fromPostParam5 #)
                     Data.Maybe.Just t -> (# eta, t #) }) -}
f7caef6b0e5b5eac4ec681d036ec2140
  isPostFile :: Util.Post.PostParam -> GHC.Types.Bool
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Util.Post.PostParam ->
                   case ds of wild {
                     Util.Post.PostNameValue ipv ipv1 -> GHC.Types.False
                     Util.Post.PostFile ds1 ds2 ds3 -> GHC.Types.True }) -}
51aab55c34eb70ca826af12cf18d8bed
  newPostRequest :: GHC.Base.String -> Util.Post.PostReq
    {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ s :: GHC.Base.String ->
                   Util.Post.PostReq s (GHC.Types.[] @ Util.Post.PostParam)) -}
51c04f2ddc50f71d22ee0713531d05fe
  prName :: Util.Post.PostReq -> GHC.Base.String
    RecSel Util.Post.PostReq
    {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Util.Post.PostReq ->
                   case ds of wild { Util.Post.PostReq ds1 ds2 -> ds1 }) -}
509243b02b8f15ba934c1d8b66981f3f
  prVals :: Util.Post.PostReq -> [Util.Post.PostParam]
    RecSel Util.Post.PostReq
    {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Util.Post.PostReq ->
                   case ds of wild { Util.Post.PostReq ds1 ds2 -> ds2 }) -}
80f6eaff1314981dc0f41ae31ee09053
  testRequest :: Util.Post.PostReq
                 -> Data.Maybe.Maybe Util.Post.PostKind
                 -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U>,
       Unfolding: (Util.Post.testRequest1
                     `cast`
                   (<Util.Post.PostReq>_R
                    ->_R <Data.Maybe.Maybe Util.Post.PostKind>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
050f0cdf49921861bc548eae469e0bc0
  testRequest1 :: Util.Post.PostReq
                  -> Data.Maybe.Maybe Util.Post.PostKind
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U>,
       Unfolding: (\ a :: Util.Post.PostReq
                     b :: Data.Maybe.Maybe Util.Post.PostKind
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Util.Post.testRequest5 a b eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,) as bs cs ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (GHC.CString.unpackAppendCString# "URL query portion: "# as)
                          GHC.Types.True
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (Data.List.unlines
                             (GHC.Base.map
                                @ ([GHC.Types.Char], [GHC.Types.Char])
                                @ [GHC.Types.Char]
                                Util.Post.testRequest2
                                bs))
                          GHC.Types.True
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (GHC.Types.[] @ GHC.Types.Char)
                          GHC.Types.True
                          ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   System.IO.putStrLn1 cs ipv6 } } } } }) -}
29443aa4ad13df4ed8d6c0eb90804963
  testRequest2 :: ([GHC.Types.Char], [GHC.Types.Char])
                  -> GHC.Base.String
    {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: ([GHC.Types.Char], [GHC.Types.Char]) ->
                   case ds of wild { (,) k v ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr @ GHC.Types.Char @ b c n k)
                     (GHC.Types.:
                        @ GHC.Types.Char
                        Util.Post.testRequest4
                        (GHC.Types.: @ GHC.Types.Char Util.Post.testRequest3 v)) }) -}
907d9330036bf31834f3226289b2f16b
  testRequest3 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' ') -}
d7f71f8038fd6c3ac6093feec6bba5f6
  testRequest4 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ':') -}
0aabe0f9fe389154330361177b0a1364
  testRequest5 :: Util.Post.PostReq
                  -> Data.Maybe.Maybe Util.Post.PostKind
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        (GHC.Base.String,
                         [(GHC.Base.String, GHC.Base.String)],
                         GHC.Base.String) #)
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U> -}
c599c4ad60dde51b5ecab443e37daa26
  toMIMEType :: GHC.Base.String -> GHC.Types.IO Codec.MIME.Type.Type
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (Util.Post.toMIMEType1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.Type>_R))) -}
740d398713e52e7a3ae7360c78ed307d
  toMIMEType1 :: GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, Codec.MIME.Type.Type #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ tyStr :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Codec.MIME.Parse.parseContentType tyStr of wild {
                     Data.Maybe.Nothing -> (# eta, Util.Post.fromPostParam2 #)
                     Data.Maybe.Just t -> (# eta, t #) }) -}
dc8d26ea66fb2bf09075c7732bf19351
  toMIMEValue :: [Util.Post.PostParam]
                 -> GHC.Types.IO Codec.MIME.Type.MIMEValue
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (Util.Post.toMIMEValue1
                     `cast`
                   (<[Util.Post.PostParam]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.MIMEValue>_R))) -}
6f239437a9527aed78181f450d9b2b59
  toMIMEValue1 :: [Util.Post.PostParam]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        Codec.MIME.Type.MIMEValue #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ ps :: [Util.Post.PostParam]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Random.$fRandomInteger3
                          Util.Post.toMIMEValue6
                          s of ds1 { (#,#) ipv ipv1 ->
                   case Util.Post.$wgo ps of ww { (#,#) ww1 ww2 ->
                   let {
                     $j :: [Util.Post.PostParam]
                           -> [Util.Post.PostParam]
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Codec.MIME.Type.MIMEValue #)
                       {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                     = \ fs :: [Util.Post.PostParam] ns :: [Util.Post.PostParam] ->
                       case Util.Post.toMIMEValue5 ns ipv of ds2 { (#,#) ipv2 ipv3 ->
                       case Util.MIME.mixedType1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                       case ipv5 of wild { (,) mi b ->
                       case Util.Post.toMIMEValue4 fs ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                       (# ipv6,
                          Codec.MIME.Type.MIMEValue
                            (Codec.MIME.Type.Type
                               Util.Post.toMIMEValue3
                               (GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Util.Post.toMIMEValue2,
                                   let {
                                     n :: [GHC.Types.Char]
                                     = Numeric.$wshowIntAtBase
                                         @ GHC.Integer.Type.Integer
                                         GHC.Num.$fNumInteger
                                         GHC.Integer.Type.$fOrdInteger
                                         GHC.Real.$fNumRatio_$s$cfromInteger
                                         GHC.Real.$fIntegralInteger_$cquotRem
                                         GHC.Real.$fIntegralInteger_$ctoInteger
                                         GHC.Show.$fShowInteger
                                         Numeric.showHex7
                                         GHC.Show.intToDigit
                                         ipv1
                                         (GHC.Types.[] @ GHC.Types.Char)
                                   } in
                                   let {
                                     lvl14 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char Util.Post.toMIMEValue_x n
                                   } in
                                   letrec {
                                     xs :: GHC.Prim.Int# -> [GHC.Types.Char]
                                       {- Arity: 1, Strictness: <L,U> -}
                                     = \ m :: GHC.Prim.Int# ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<=# m 1) of wild1 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              Util.Post.toMIMEValue_x
                                              (xs (GHC.Prim.-# m 1))
                                         GHC.Types.True -> lvl14 }
                                   } in
                                   xs 30)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))))
                            (Data.Maybe.Nothing @ Codec.MIME.Type.Disposition)
                            (Codec.MIME.Type.Multi
                               (GHC.Base.++
                                  @ Codec.MIME.Type.MIMEValue
                                  ipv3
                                  (case ipv7 of wild1 {
                                     [] -> GHC.Types.[] @ Codec.MIME.Type.MIMEValue
                                     : ipv8 ipv9
                                     -> GHC.Types.:
                                          @ Codec.MIME.Type.MIMEValue
                                          (case mi of wild2 { Codec.MIME.Type.MIMEValue ds ds5 ds6 ds7 ds8 ->
                                           Codec.MIME.Type.MIMEValue
                                             ds
                                             ds5
                                             (Codec.MIME.Type.Multi wild1)
                                             ds7
                                             ds8 })
                                          (GHC.Types.[] @ Codec.MIME.Type.MIMEValue) })))
                            (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                            GHC.Types.True #) } } } }
                   } in
                   case ww1 of wild {
                     [] -> $j (GHC.Types.[] @ Util.Post.PostParam) ww2
                     : ds ds2
                     -> case ds2 of wild1 {
                          [] -> $j (GHC.Types.[] @ Util.Post.PostParam) ps
                          : ipv2 ipv3 -> $j wild ww2 } } } }) -}
5fe6d07cbbae8d1255e0049f033965c9
  toMIMEValue10 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 32) -}
5f634f8122fb45f2ebf770218794bc0c
  toMIMEValue11 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 2) -}
1e663b3b7b9bb0db71ba7c2e0b2ff2da
  toMIMEValue2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "boundary"#) -}
5acd2688040d22e250d6b86951c6b025
  toMIMEValue3 :: Codec.MIME.Type.MIMEType
    {- HasNoCafRefs, Strictness: m6,
       Unfolding: (Codec.MIME.Type.Multipart Codec.MIME.Type.FormData) -}
1c266772dff506b18cf8f9304195cb49
  toMIMEValue4 :: [Util.Post.PostParam]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        [Codec.MIME.Type.MIMEValue] #)
    {- Arity: 2, Strictness: <S,1*U><L,U> -}
ff5aa57f1f7cb6e95c99a33669f8f832
  toMIMEValue5 :: [Util.Post.PostParam]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        [Codec.MIME.Type.MIMEValue] #)
    {- Arity: 2, Strictness: <S,1*U><L,U> -}
f43b0876765b919608d57d8e8ceec987
  toMIMEValue6 :: (GHC.Integer.Type.Integer,
                   GHC.Integer.Type.Integer)
    {- Strictness: m,
       Unfolding: ((Util.Post.toMIMEValue_low, Util.Post.toMIMEValue7)) -}
2ae87606bad5608f352a6ffe8a483e9d
  toMIMEValue7 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.timesInteger
                     Util.Post.toMIMEValue_low
                     Util.Post.toMIMEValue_low) -}
ee6f3308839af4629320ebe266983139
  toMIMEValue8 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 1) -}
eaa330ba7789f189c59206c39050f8bf
  toMIMEValue9 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Real.^_$s^2
                     Util.Post.toMIMEValue11
                     Util.Post.toMIMEValue10) -}
4e487fc802f72df58e9a66df1de65130
  toMIMEValue_low :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.minusInteger
                     Util.Post.toMIMEValue9
                     Util.Post.toMIMEValue8) -}
2ed4a56067d45a5f6fd7cca66e94caea
  toMIMEValue_x :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-') -}
9910d750452198c9157fd8d8e61fbf06
  toRequest :: Util.Post.PostReq
               -> Data.Maybe.Maybe Util.Post.PostKind
               -> GHC.Types.IO
                      (GHC.Base.String,
                       [(GHC.Base.String, GHC.Base.String)],
                       GHC.Base.String)
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U>,
       Unfolding: (Util.Post.testRequest5
                     `cast`
                   (<Util.Post.PostReq>_R
                    ->_R <Data.Maybe.Maybe Util.Post.PostKind>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <(GHC.Base.String,
                                    [(GHC.Base.String, GHC.Base.String)],
                                    GHC.Base.String)>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

