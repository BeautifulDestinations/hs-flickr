
==================== FINAL INTERFACE ====================
2016-03-01 11:43:15.225776 UTC

interface main:Flickr.URLs 7084
  interface hash: 5ddce035af0c0021d88e9c65e1ab67e0
  ABI hash: 844af83d698b7460670de20b8825c130
  export-list hash: 93926ff215ffc950999226d2aaf1ea9c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 740846c8c42fc15907ae7fab6950d24f
  used TH splices: False
  where
exports:
  Flickr.URLs.getGroup
  Flickr.URLs.getUserPhotos
  Flickr.URLs.getUserProfile
  Flickr.URLs.lookupGroup
  Flickr.URLs.lookupUser
  Flickr.URLs.photoSourceURL
  Flickr.URLs.userPhotoStreamURL
  Flickr.URLs.userPhotoURL
  Flickr.URLs.userPhotosetURL
  Flickr.URLs.userPhotosetsURL
  Flickr.URLs.userProfilePageURL
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 04dcf41add9dda483c4e1216c1e4d955
  exports: a48c768163b3524ddb6a3c7780b5d55c
  FM 91641286fd5a4035d1caa1713877af9c
  flickCall 355bbd214dbc82d83c42c523bdee3999
  flickTranslate 0d93a9ca510de3c49d118e1a2c6aeefb
import  -/  Flickr.Types 653ba19fff32ac001f790083a5a45199
  exports: 16c0f78ccd56a3138dea1b355b10ed13
  Group 92a9ba753c3aa29993a307766f07264a
  GroupID 7715af3af388e09fe6cfbbe4d79edbf2
  PhotoDetails afa8e7966b786b9f1577afd375bd6d0e
  PhotoID 32a0762d66c6df01a08e8f2f79620151
  PhotoSize 3ecac3476c2cb29b38c851994c73c7c1
  PhotoSizeLarge f99abbd933bc2b5b5554795d5ccc4f92
  PhotoSizeMedium 87b3b86300d30dfeae4f29b60be8825e
  PhotoSizeOriginal 49f049b3aeb2aada4f32ce8dc7447ae5
  PhotoSizeSmall 9308f381bf473dffc0ebd344fbb0c29f
  PhotoSizeSmallSquare 74a02be3eb5daa71c01ff9a47c6d7cd8
  PhotoSizeThumb fcf60ee75c1ba2042b4337c710f1db32
  PhotosetID 2296ab3ea971d51b9fb44b06fb75b4b3
  URLString fb5221ff5748803b8672d77ed2871a7d
  User 55da6a4521f5104a0ed92f1cfebb3575
  UserID cbf2c759a798b6575a1c2d75906b7fcb
  photoDetailsOrigFormat ffae91e81a2f6bfa5c29263055283b18
  photoDetailsOrigSecret 9b05bf2fe8985a380f132275bdae42a7
  photoDetailsPhoto f01056a1cc5eda99b4f586059c6c6da0
  photoFarm efd8f02c45c18f651b4685f1ea4b6a49
  photoId 2029adeffba43b6eecf965987a03a43a
  photoSecret abcc43e15516e70acd7708fe0873214f
  photoServer 82a9afbbdb32e46caa591f9a4666d956
  photoURL 0c6a31343ee582444da16527b5b90674
  userId 33053105e771e5797ec5e4d2aa72f067
import  -/  Flickr.Types.Import 9b5e87367f5380e094973b827aa6043c
  exports: 305bec7abfd17862ca1e01be2c748f5a
  toGroup 7e5dd7cd78f1e24ed33dc09eb5e2edcb
  toString 0a78966e4359fdc10938dc356b82e7fb
  toUser 883b7b16f3fab69cd9d48936690fb540
400ed1f7a6e086d8b2ecb0dc125655c8
  $wgetGroup :: Flickr.Types.GroupID
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.URLString #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.GroupID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.getGroup4
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.URLs.getGroup3, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ GHC.Base.String
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.URLs.getGroup1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Base.String
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) #) }) -}
5775325a389fb8afd149ebe8c1cd5578
  $wgetUserPhotos :: Data.Maybe.Maybe Flickr.Types.UserID
                     -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.URLString #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.getUserPhotos2
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.URLs.getUserPhotos1, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ GHC.Base.String
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.URLs.getGroup1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Base.String
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) #) }) -}
cf3c79ce4bc8c1394e1732cb99e8c617
  $wgetUserProfile :: Data.Maybe.Maybe Flickr.Types.UserID
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.URLString #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.getUserProfile1
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.URLs.getUserPhotos1, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ GHC.Base.String
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.URLs.getGroup1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Base.String
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) #) }) -}
7ce56e14fcb28ddf2d4cad776ad4cd20
  $wlookupGroup :: Flickr.Types.URLString
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.Group #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.URLString ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.lookupGroup1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.URLs.getGroup2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.Group
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltGroup ww8 ww9 ww10 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.Group
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.Group>_R)) #) }) -}
2fea33c9862c8d183b2120426d382c37
  $wlookupUser :: Flickr.Types.URLString
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.User #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.URLString ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.lookupUser1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.URLs.getGroup2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.User
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltUser ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.User
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) #) }) -}
3270495ab9af3dfd8208809db28ec44f
  $wphotoSourceURL :: Flickr.Types.PhotoID
                      -> GHC.Base.String
                      -> Data.Maybe.Maybe GHC.Integer.Type.Integer
                      -> Data.Maybe.Maybe GHC.Base.String
                      -> Data.Maybe.Maybe Flickr.Types.URLString
                      -> Data.Maybe.Maybe GHC.Base.String
                      -> Data.Maybe.Maybe GHC.Base.String
                      -> Flickr.Types.PhotoSize
                      -> Flickr.Types.URLString
    {- Arity: 8,
       Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,U>,
       Unfolding: (\ ww :: Flickr.Types.PhotoID
                     ww1 :: GHC.Base.String
                     ww2 :: Data.Maybe.Maybe GHC.Integer.Type.Integer
                     ww3 :: Data.Maybe.Maybe GHC.Base.String
                     ww4 :: Data.Maybe.Maybe Flickr.Types.URLString
                     ww5 :: Data.Maybe.Maybe GHC.Base.String
                     ww6 :: Data.Maybe.Maybe GHC.Base.String
                     w :: Flickr.Types.PhotoSize ->
                   case ww4 of wild {
                     Data.Maybe.Nothing
                     -> GHC.CString.unpackAppendCString#
                          "http://farm"#
                          (let {
                             n :: [GHC.Types.Char]
                             = GHC.CString.unpackAppendCString#
                                 ".static.flickr.com/"#
                                 (let {
                                    a :: [GHC.Types.Char]
                                    = GHC.Base.++
                                        @ GHC.Types.Char
                                        ww
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           Flickr.URLs.photoSourceURL9
                                           (let {
                                              n1 :: [GHC.Types.Char]
                                              = case w of wild1 {
                                                  Flickr.Types.PhotoSizeSmallSquare
                                                  -> Flickr.URLs.photoSourceURL8
                                                  Flickr.Types.PhotoSizeThumb
                                                  -> Flickr.URLs.photoSourceURL7
                                                  Flickr.Types.PhotoSizeSmall
                                                  -> Flickr.URLs.photoSourceURL6
                                                  Flickr.Types.PhotoSizeMedium
                                                  -> Flickr.URLs.photoSourceURL5
                                                  Flickr.Types.PhotoSizeLarge
                                                  -> Flickr.URLs.photoSourceURL4
                                                  Flickr.Types.PhotoSizeOriginal
                                                  -> GHC.CString.unpackAppendCString#
                                                       "_o."#
                                                       (case ww5 of wild2 {
                                                          Data.Maybe.Nothing
                                                          -> Flickr.URLs.photoSourceURL3
                                                          Data.Maybe.Just v -> v }) }
                                            } in
                                            case w of wild1 {
                                              DEFAULT -> GHC.Base.++ @ GHC.Types.Char ww1 n1
                                              Flickr.Types.PhotoSizeOriginal
                                              -> case ww6 of wild2 {
                                                   Data.Maybe.Nothing
                                                   -> GHC.Types.:
                                                        @ GHC.Types.Char
                                                        Flickr.URLs.photoSourceURL2
                                                        n1
                                                   Data.Maybe.Just v
                                                   -> GHC.Base.++ @ GHC.Types.Char v n1 } }))
                                  } in
                                  case ww2 of wild1 {
                                    Data.Maybe.Nothing
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         Flickr.URLs.photoSourceURL2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            Flickr.URLs.photoSourceURL1
                                            a)
                                    Data.Maybe.Just a1
                                    -> case GHC.Show.$w$cshowsPrec
                                              0
                                              a1
                                              (GHC.Types.[]
                                                 @ GHC.Types.Char) of ww7 { (#,#) ww8 ww9 ->
                                       GHC.Base.++
                                         @ GHC.Types.Char
                                         (GHC.Types.: @ GHC.Types.Char ww8 ww9)
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            Flickr.URLs.photoSourceURL1
                                            a) } })
                           } in
                           case ww3 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Types.: @ GHC.Types.Char Flickr.URLs.photoSourceURL2 n
                             Data.Maybe.Just v -> GHC.Base.++ @ GHC.Types.Char v n })
                     Data.Maybe.Just u -> u }) -}
cc1bdac97e7e0ce757edc29967a9e963
  getGroup :: Flickr.Types.GroupID
              -> Flickr.Monad.FM Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.GroupID ->
                   case Flickr.URLs.$wgetGroup w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.URLString ww1 }) -}
401275f310930d606f81aa611a510be3
  getGroup1 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.URLs.getGroup2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
571f27e77efc5695446d79efe6daf1af
  getGroup2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "url"#) -}
bcba5bb66750cc9b65737f1eb64ffd79
  getGroup3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "group_id"#) -}
100e6bcc68cf334b0e55a577e0c8868f
  getGroup4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.getGroup"#) -}
d9512709c425ab9c1d1fd9972a5315e5
  getUserPhotos :: Data.Maybe.Maybe Flickr.Types.UserID
                   -> Flickr.Monad.FM Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.URLs.$wgetUserPhotos w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.URLString ww1 }) -}
45a1818666987d02bcecb041c1c5924a
  getUserPhotos1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "user_id"#) -}
2fcaeee2cff5a65b97698a2000b8bf32
  getUserPhotos2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.getUserPhotos"#) -}
dcef9fc3b246fb034e4c24ed5ae17872
  getUserProfile :: Data.Maybe.Maybe Flickr.Types.UserID
                    -> Flickr.Monad.FM Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.URLs.$wgetUserProfile w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.URLString ww1 }) -}
99d037738ddceb9c94050d92860d178b
  getUserProfile1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.getUserProfile"#) -}
6b1e8c51a6ae6982296d2ba2c2ad7f4c
  lookupGroup :: Flickr.Types.URLString
                 -> Flickr.Monad.FM Flickr.Types.Group
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.URLString ->
                   case Flickr.URLs.$wlookupGroup w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.Group ww1 }) -}
2bdcb32d5a05801963f070c8a2408dea
  lookupGroup1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.lookupGroup"#) -}
1197f04869d46e70bbea13e48d914e40
  lookupUser :: Flickr.Types.URLString
                -> Flickr.Monad.FM Flickr.Types.User
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.URLString ->
                   case Flickr.URLs.$wlookupUser w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.User ww1 }) -}
382fed88da119d0ff817c36ed9ced2c4
  lookupUser1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.lookupUser"#) -}
73caf59f4024fb7b422951519c4cda29
  photoSourceURL :: Flickr.Types.PhotoDetails
                    -> Flickr.Types.PhotoSize
                    -> Flickr.Types.URLString
    {- Arity: 2,
       Strictness: <S(S(LLLLLLSLLLL)LLLLLLLLLLLLLLLLL),1*U(1*U(1*U,A,A,1*U,1*U,1*U,1*U,A,A,A,A),A,A,A,A,A,A,1*U,1*U,A,A,A,A,A,A,A,A,A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoDetails w1 :: Flickr.Types.PhotoSize ->
                   case w of ww { Flickr.Types.PhotoDetails ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                   case ww1 of ww19 { Flickr.Types.Photo ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ->
                   Flickr.URLs.$wphotoSourceURL
                     ww20
                     ww23
                     ww24
                     ww25
                     ww26
                     ww8
                     ww9
                     w1 } }) -}
b9102e63c46e7e1a7565b1a56e683b7d
  photoSourceURL1 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '/') -}
b71d2d3ecf24af1ba26ca2dc4c9fe417
  photoSourceURL2 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '1') -}
4fec4ba776bbb38afc009dd5d93903cb
  photoSourceURL3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "jpg"#) -}
1c0ab1574be893b21c60e5aa464fe3be
  photoSourceURL4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_b.jpg"#) -}
bf278944aa8e91efab65446a0802a145
  photoSourceURL5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# ".jpg"#) -}
1487102f4bd167daa0a8e4c3179fe429
  photoSourceURL6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_m.jpg"#) -}
932c2a88c8055f12baa6cd89753bae3d
  photoSourceURL7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_t.jpg"#) -}
d5d3d5aaba3ff223e595cbedfd1f5cef
  photoSourceURL8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_s.jpg"#) -}
e0b76645014e75b881b2676b9d0c41d9
  photoSourceURL9 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_') -}
bfef3b208ba47cb38aae60b7dcfc5b5f
  userPhotoStreamURL :: Flickr.Types.User -> Flickr.Types.URLString
    {- Arity: 1, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: (\ u :: Flickr.Types.User ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        Flickr.URLs.userPhotoStreamURL1 })) -}
989c6b3301d6192c37a8d7ce9958381b
  userPhotoStreamURL1 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     Flickr.URLs.photoSourceURL1
                     (GHC.Types.[] @ GHC.Types.Char)) -}
c4a22d70c678aa12deb2e4b96cdd5a47
  userPhotoURL :: Flickr.Types.User
                  -> Flickr.Types.PhotoID
                  -> Flickr.Types.URLString
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)><L,U>,
       Unfolding: (\ u :: Flickr.Types.User pid :: Flickr.Types.PhotoID ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           Flickr.URLs.photoSourceURL1
                           pid) })) -}
69634b857f57556865b63d91f858b264
  userPhotosetURL :: Flickr.Types.User
                     -> Flickr.Types.PhotosetID
                     -> Flickr.Types.URLString
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)><L,U>,
       Unfolding: (\ u :: Flickr.Types.User
                     p :: Flickr.Types.PhotosetID ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        (GHC.CString.unpackAppendCString# "/sets/"# p) })) -}
d6a0881575e11d329eb7748cbda530e1
  userPhotosetsURL :: Flickr.Types.User -> Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: (\ u :: Flickr.Types.User ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        Flickr.URLs.userPhotosetsURL1 })) -}
c6c43509c2470e8acbfd2ba8b5c5850e
  userPhotosetsURL1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "/sets/"#) -}
82449720b1203ae46ea1717bd3c92c5c
  userProfilePageURL :: Flickr.Types.User -> Flickr.Types.URLString
    {- Arity: 1, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: (\ u :: Flickr.Types.User ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/people/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        Flickr.URLs.userPhotoStreamURL1 })) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

