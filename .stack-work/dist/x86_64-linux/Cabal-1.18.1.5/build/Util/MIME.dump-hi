
==================== FINAL INTERFACE ====================
2016-03-01 11:43:02.546202 UTC

interface flickr-0.3.3:Util.MIME 7084
  interface hash: 6a1e6d1cda56b05e04b2cf3c315c8688
  ABI hash: 1f210a08d1975c942151dd00f51920f5
  export-list hash: 861f0510d4c398f48db9659b555bd5d6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 36912d1d14e9038e60d425d72683248b
  used TH splices: False
  where
exports:
  Util.MIME.crnl
  Util.MIME.mixedType
  Util.MIME.showDispParam
  Util.MIME.showDispType
  Util.MIME.showDisposition
  Util.MIME.showMIMEContent
  Util.MIME.showMIMEValue
  Util.MIME.uploadFile
  Util.MIME.uploadFileType
module dependencies:
package dependencies: array-0.5.0.0 base* deepseq-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 old-locale-1.0.0.6 random-1.1* time-1.4.2
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         random-1.1:System.Random time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
family instance modules: base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.IO.Handle.FD d087d2d69d4ab9b9d62d5c85160d89a3
import  -/  base:GHC.IO.Handle.Text 69f1e461016fd70cdf6f3676c04d367a
import  -/  base:GHC.IO.IOMode bb3a450f895ad11f6fb52ce1a04d655a
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Real 35345ccdfd774068d1f4418df87bd3c9
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Numeric fd38becb40ff3d01df4ca3af1a1cc583
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  integer-gmp:GHC.Integer.Type da75f4177e120bcf6b860afbcb9b3385
import  -/  mime-0.3.4:Codec.MIME.Type 1e5e61c4d84b261e20350318b8d4811d
import  -/  random-1.1:System.Random d593dbfc264107ac583a2be2ccc23906
157c8b492f0b39bb70db36db713a84f3
  $wshowDispParam :: Codec.MIME.Type.DispParam
                     -> (# GHC.Types.Char, [GHC.Types.Char] #)
    {- Arity: 1, Strictness: <L,1*U> -}
240413e237f18434b7935e9995fe05c5
  $wshowDisposition :: Codec.MIME.Type.DispType
                       -> [Codec.MIME.Type.DispParam]
                       -> [GHC.Types.Char]
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ ww :: Codec.MIME.Type.DispType
                     ww1 :: [Codec.MIME.Type.DispParam] ->
                   case ww of wild {
                     Codec.MIME.Type.DispInline
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Util.MIME.showDispType3
                          (Util.MIME.showDisposition_go ww1)
                     Codec.MIME.Type.DispAttachment
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Util.MIME.showDispType2
                          (Util.MIME.showDisposition_go ww1)
                     Codec.MIME.Type.DispFormData
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Util.MIME.showDispType1
                          (Util.MIME.showDisposition_go ww1)
                     Codec.MIME.Type.DispOther x
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          x
                          (Util.MIME.showDisposition_go ww1) }) -}
d34c728c536ed8639f41fb06460e7249
  $wshowMIMEValue :: GHC.Base.String
                     -> Codec.MIME.Type.MIMEValue
                     -> (# [(GHC.Base.String, GHC.Base.String)], GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U(U(U,U),1*U,1*U,U,1*U)>,
       Unfolding: (\ w :: GHC.Base.String
                     w1 :: Codec.MIME.Type.MIMEValue ->
                   (# case w1 of wild { Codec.MIME.Type.MIMEValue ds1 ds2 ds3 ds4 ds5 ->
                      case ds5 of wild1 {
                        GHC.Types.False
                        -> case ds2 of wild2 {
                             Data.Maybe.Nothing -> ds4
                             Data.Maybe.Just d
                             -> GHC.Types.:
                                  @ ([GHC.Types.Char], GHC.Base.String)
                                  (Util.MIME.showMIMEValue2, Util.MIME.showDisposition d)
                                  ds4 }
                        GHC.Types.True
                        -> GHC.Types.:
                             @ ([GHC.Types.Char], GHC.Base.String)
                             (Util.MIME.showMIMEValue1, Codec.MIME.Type.showType ds1)
                             (case ds2 of wild2 {
                                Data.Maybe.Nothing -> ds4
                                Data.Maybe.Just d
                                -> GHC.Types.:
                                     @ ([GHC.Types.Char], GHC.Base.String)
                                     (Util.MIME.showMIMEValue2, Util.MIME.showDisposition d)
                                     ds4 }) } },
                      GHC.Base.++
                        @ GHC.Types.Char
                        Util.MIME.crnl
                        (case w1 of wild { Codec.MIME.Type.MIMEValue ds1 ds2 ds3 ds4 ds5 ->
                         Util.MIME.showMIMEContent
                           (case ds1 of wild1 { Codec.MIME.Type.Type ds6 ds7 ->
                            case ds6 of wild2 {
                              DEFAULT -> w
                              Codec.MIME.Type.Multipart ds
                              -> case GHC.List.lookup
                                        @ [GHC.Types.Char]
                                        @ GHC.Base.String
                                        GHC.Classes.$fEq[]_$s$fEq[]
                                        Util.MIME.mixedType2
                                        ds7 of wild3 {
                                   Data.Maybe.Nothing -> w
                                   Data.Maybe.Just x
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Util.MIME.crnl
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           Util.MIME.mixedType_x
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Util.MIME.mixedType_x
                                              x)) } } })
                           ds3 }) #)) -}
f68bbc09cafb0812bd2feebcdb6da6f8
  crnl :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "\r"#) -}
9584d1e13265d9bfb18557711e07b3d8
  mixedType :: GHC.Types.IO
                   (Codec.MIME.Type.MIMEValue, GHC.Base.String)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (Util.MIME.mixedType1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(Codec.MIME.Type.MIMEValue, GHC.Base.String)>_R))) -}
318c49a4e1700837783bfcfbe351d23b
  mixedType1 :: GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                      (Codec.MIME.Type.MIMEValue, GHC.Base.String) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Random.$fRandomInteger3
                          Util.MIME.mixedType4
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      let {
                        boundary :: [GHC.Types.Char]
                        = let {
                            n :: [GHC.Types.Char]
                            = Numeric.$wshowIntAtBase
                                @ GHC.Integer.Type.Integer
                                GHC.Num.$fNumInteger
                                GHC.Integer.Type.$fOrdInteger
                                GHC.Real.$fNumRatio_$s$cfromInteger
                                GHC.Real.$fIntegralInteger_$cquotRem
                                GHC.Real.$fIntegralInteger_$ctoInteger
                                GHC.Show.$fShowInteger
                                Numeric.showHex7
                                GHC.Show.intToDigit
                                ipv1
                                (GHC.Types.[] @ GHC.Types.Char)
                          } in
                          let {
                            lvl7 :: [GHC.Types.Char]
                            = GHC.Types.: @ GHC.Types.Char Util.MIME.mixedType_x n
                          } in
                          letrec {
                            xs :: GHC.Prim.Int# -> [GHC.Types.Char]
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ m :: GHC.Prim.Int# ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# m 1) of wild {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     Util.MIME.mixedType_x
                                     (xs (GHC.Prim.-# m 1))
                                GHC.Types.True -> lvl7 }
                          } in
                          xs 30
                      } in
                      (Codec.MIME.Type.MIMEValue
                         (Codec.MIME.Type.Type
                            Util.MIME.mixedType3
                            (GHC.Types.:
                               @ (GHC.Base.String, GHC.Base.String)
                               (Util.MIME.mixedType2, boundary)
                               (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))))
                         (Data.Maybe.Nothing @ Codec.MIME.Type.Disposition)
                         Codec.MIME.Type.nullMIMEValue1
                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                         GHC.Types.True,
                       boundary) #) }) -}
54094a885787af26e964c0304b62210f
  mixedType2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "boundary"#) -}
2b42205971d5c95ec6db7db17176b0c1
  mixedType3 :: Codec.MIME.Type.MIMEType
    {- HasNoCafRefs,
       Unfolding: (Codec.MIME.Type.Multipart Codec.MIME.Type.Mixed) -}
f6bf67daa6a1ee6362a01d53670f2323
  mixedType4 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    {- Unfolding: ((Util.MIME.mixedType_low, Util.MIME.mixedType5)) -}
f5216fc98f0a9c7e6ec8b12da1cac475
  mixedType5 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.timesInteger
                     Util.MIME.mixedType_low
                     Util.MIME.mixedType_low) -}
35c3d4c0e7934d689e05a1eb17af2a9e
  mixedType6 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 1) -}
7b08ec9c4f4fdbe1f4fb198f7b235786
  mixedType7 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Real.^_$s^2
                     Util.MIME.mixedType9
                     Util.MIME.mixedType8) -}
a8861a6d6b39fc039c2beadfd2ac7312
  mixedType8 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 32) -}
858578efe0a6adddf24e59bfb86e488d
  mixedType9 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 2) -}
ad2112538e7fdd4ffa6fdc4aef0b138c
  mixedType_low :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.minusInteger
                     Util.MIME.mixedType7
                     Util.MIME.mixedType6) -}
8d42e7dd3b7d073ca5a769b98a00d4db
  mixedType_x :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-') -}
298854b68ea3690ca848c7861a03bcf6
  showDispParam :: Codec.MIME.Type.DispParam -> GHC.Base.String
    {- Arity: 1, Strictness: <L,1*U>m2, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Codec.MIME.Type.DispParam ->
                   case Util.MIME.$wshowDispParam w of ww { (#,#) ww1 ww2 ->
                   GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
0569084f87878c525f950bc7ec8cdc5b
  showDispType :: Codec.MIME.Type.DispType -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ dt :: Codec.MIME.Type.DispType ->
                   case dt of wild {
                     Codec.MIME.Type.DispInline -> Util.MIME.showDispType3
                     Codec.MIME.Type.DispAttachment -> Util.MIME.showDispType2
                     Codec.MIME.Type.DispFormData -> Util.MIME.showDispType1
                     Codec.MIME.Type.DispOther x -> x }) -}
12e29d1a858e38be095a6bb674f89295
  showDispType1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "form-data"#) -}
aca4cd208ee297909e149f9c025ad39d
  showDispType2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "attachment"#) -}
a96fc4aaa0d4cf55546e318a9cf81d51
  showDispType3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "inline"#) -}
819cd4fd12098755f09b6091fd4b5538
  showDisposition :: Codec.MIME.Type.Disposition -> GHC.Base.String
    {- Arity: 1, Strictness: <S(SL),U(1*U,1*U)>, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Codec.MIME.Type.Disposition ->
                   case w of ww { Codec.MIME.Type.Disposition ww1 ww2 ->
                   Util.MIME.$wshowDisposition ww1 ww2 }) -}
37f91f1a7195baa215f53ecb3d4ba7ae
  showDisposition_go :: [Codec.MIME.Type.DispParam]
                        -> [GHC.Types.Char]
    {- Arity: 1, Strictness: <S,1*U> -}
ef8c283831c3f556d09b07cf830f9aa8
  showMIMEContent :: GHC.Base.String
                     -> Codec.MIME.Type.MIMEContent
                     -> GHC.Base.String
    {- Arity: 2, Strictness: <L,U><S,1*U> -}
ee08115b39d947dbf7adf705701df969
  showMIMEValue :: GHC.Base.String
                   -> Codec.MIME.Type.MIMEValue
                   -> ([(GHC.Base.String, GHC.Base.String)], GHC.Base.String)
    {- Arity: 2, Strictness: <L,1*U><L,U(U(U,U),1*U,1*U,U,1*U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: GHC.Base.String w1 :: Codec.MIME.Type.MIMEValue ->
                   case Util.MIME.$wshowMIMEValue w w1 of ww { (#,#) ww1 ww2 ->
                   (ww1, ww2) }) -}
cb5b581489e086f04ffabbe404b06bc9
  showMIMEValue1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Content-Type"#) -}
5d88af08b26ce34e0cc8f771d8eba277
  showMIMEValue2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Content-Disposition"#) -}
6008c74287fda33467b02357a89c3169
  uploadFile :: GHC.Base.String
                -> GHC.IO.FilePath
                -> GHC.Types.IO Codec.MIME.Type.MIMEValue
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (Util.MIME.uploadFile1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <GHC.IO.FilePath>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.MIMEValue>_R))) -}
0d3356b8523e82d58f3e601f6d5aa1f8
  uploadFile1 :: GHC.Base.String
                 -> GHC.IO.FilePath
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                       Codec.MIME.Type.MIMEValue #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ nm :: GHC.Base.String
                     fp :: GHC.IO.FilePath
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.FD.openBinaryFile1
                          fp
                          GHC.IO.IOMode.ReadMode
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case GHC.IO.Handle.Text.hGetContents1
                          ipv1
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   (# ipv2,
                      Codec.MIME.Type.MIMEValue
                        Util.MIME.uploadFile6
                        (Data.Maybe.Just
                           @ Codec.MIME.Type.Disposition
                           (Codec.MIME.Type.Disposition
                              Codec.MIME.Type.DispFormData
                              (GHC.Types.:
                                 @ Codec.MIME.Type.DispParam
                                 (Codec.MIME.Type.Name nm)
                                 (GHC.Types.:
                                    @ Codec.MIME.Type.DispParam
                                    (Codec.MIME.Type.Filename fp)
                                    (GHC.Types.[] @ Codec.MIME.Type.DispParam)))))
                        (Codec.MIME.Type.Single ipv3)
                        (GHC.Types.:
                           @ (GHC.Base.String, GHC.Base.String)
                           Util.MIME.uploadFile3
                           (GHC.Types.:
                              @ (GHC.Base.String, GHC.Base.String)
                              (Util.MIME.uploadFile2,
                               case GHC.List.$wlenAcc @ GHC.Types.Char ipv3 0 of ww { DEFAULT ->
                               case GHC.Show.$wshowSignedInt
                                      0
                                      ww
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                              (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))))
                        GHC.Types.True #) } }) -}
aee3388457368947583e330bea0f08cb
  uploadFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Content-Length"#) -}
a41778375dd9ca1bcbc7318a9d3809d1
  uploadFile3 :: ([GHC.Types.Char], [GHC.Types.Char])
    {- Strictness: m,
       Unfolding: ((Util.MIME.uploadFile5, Util.MIME.uploadFile4)) -}
f1b9a85b06102c3a85a9b0314cf6cc95
  uploadFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "binary"#) -}
3446f1af6528fbdafa0eb1775589ad84
  uploadFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Content-Transfer-Encoding"#) -}
6ad9ccdad05a751601c14d7e70ebe8e2
  uploadFile6 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.MIME.uploadFile7
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
b67c08c529be3b849c96905c07bf79a2
  uploadFile7 :: Codec.MIME.Type.MIMEType
    {- Strictness: m7,
       Unfolding: (Codec.MIME.Type.Text Util.MIME.uploadFile8) -}
8f04a9d829ecb7bc8592e6abafda8920
  uploadFile8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "plain"#) -}
03e16ecf621f66441f2c2a77718ec758
  uploadFileType :: GHC.Base.String -> Codec.MIME.Type.Type
    {- Arity: 1, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ bou :: GHC.Base.String ->
                   Codec.MIME.Type.Type
                     Util.MIME.uploadFileType1
                     (GHC.Types.:
                        @ (GHC.Base.String, GHC.Base.String)
                        (Util.MIME.mixedType2, bou)
                        (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))) -}
20c6ad2c36cc45ef4f48e775572e06e8
  uploadFileType1 :: Codec.MIME.Type.MIMEType
    {- HasNoCafRefs, Strictness: m6,
       Unfolding: (Codec.MIME.Type.Multipart Codec.MIME.Type.FormData) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe-inferred
require own pkg trusted: False

