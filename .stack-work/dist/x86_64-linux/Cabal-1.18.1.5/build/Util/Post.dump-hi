
==================== FINAL INTERFACE ====================
2016-03-01 11:43:02.787763 UTC

interface flickr-0.3.3:Util.Post 7084
  interface hash: c5cb82c1d839e82f27f1f50e263cb124
  ABI hash: 9b21f91b8d24150b4c7844182371d48c
  export-list hash: 999e70d2f9d7734cb3030c668d49edc3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 36912d1d14e9038e60d425d72683248b
  used TH splices: False
  where
exports:
  Util.Post.addNameFile
  Util.Post.addNameValue
  Util.Post.fromPostParam
  Util.Post.getMIMEType
  Util.Post.isPostFile
  Util.Post.newPostRequest
  Util.Post.testRequest
  Util.Post.toMIMEType
  Util.Post.toMIMEValue
  Util.Post.toRequest
  Util.Post.PostKind{Util.Post.PostFormData Util.Post.PostQuery Util.Post.PostWWWForm}
  Util.Post.PostParam{Util.Post.PostFile Util.Post.PostNameValue}
  Util.Post.PostReq{Util.Post.PostReq Util.Post.prName Util.Post.prVals}
module dependencies: Codec.Percent Codec.URLEncoder Util.MIME
package dependencies: array-0.5.0.0 base deepseq-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 old-locale-1.0.0.6 random-1.1 time-1.4.2
                      utf8-string-1
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         random-1.1:System.Random time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
family instance modules: base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Real 35345ccdfd774068d1f4418df87bd3c9
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Numeric fd38becb40ff3d01df4ca3af1a1cc583
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  Codec.URLEncoder c28a0c5c8ef6c08510df706bd6bc3ce0
  exports: 8f8b1624f67f1a1c759ebfb76cd52297
  encodeString b8082792624ec5b988a318aae7f10e22
import  -/  Util.MIME 1f210a08d1975c942151dd00f51920f5
  exports: 861f0510d4c398f48db9659b555bd5d6
  crnl f68bbc09cafb0812bd2feebcdb6da6f8
  mixedType 9584d1e13265d9bfb18557711e07b3d8
  showMIMEValue ee08115b39d947dbf7adf705701df969
  uploadFile 6008c74287fda33467b02357a89c3169
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  integer-gmp:GHC.Integer.Type da75f4177e120bcf6b860afbcb9b3385
import  -/  mime-0.3.4:Codec.MIME.Parse d284cbcfb4fdfc8569e68c5dbb94a82b
import  -/  mime-0.3.4:Codec.MIME.Type 1e5e61c4d84b261e20350318b8d4811d
import  -/  random-1.1:System.Random d593dbfc264107ac583a2be2ccc23906
811c0a57eba91af7f8986d432fd7670a
  $wa :: Util.Post.PostParam
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
               Codec.MIME.Type.MIMEValue #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ w :: Util.Post.PostParam
                     w1 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w of wild {
                     Util.Post.PostNameValue n v
                     -> (# w1,
                           Codec.MIME.Type.MIMEValue
                             Util.Post.fromPostParam8
                             (Data.Maybe.Just
                                @ Codec.MIME.Type.Disposition
                                (Codec.MIME.Type.Disposition
                                   Codec.MIME.Type.DispFormData
                                   (GHC.Types.:
                                      @ Codec.MIME.Type.DispParam
                                      (Codec.MIME.Type.Name n)
                                      (GHC.Types.[] @ Codec.MIME.Type.DispParam))))
                             (Codec.MIME.Type.Single (Codec.URLEncoder.encodeString v))
                             (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             GHC.Types.False #)
                     Util.Post.PostFile nm fp mbTy
                     -> case mbTy of wild1 {
                          Data.Maybe.Nothing
                          -> case Codec.MIME.Parse.parseContentType fp of wild2 {
                               Data.Maybe.Nothing
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue
                                       Util.Post.fromPostParam5
                                       ds2
                                       ds3
                                       ds4
                                       ds5 } #) }
                               Data.Maybe.Just t
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue t ds2 ds3 ds4 ds5 } #) } }
                          Data.Maybe.Just ty
                          -> case Codec.MIME.Parse.parseContentType ty of wild2 {
                               Data.Maybe.Nothing
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue
                                       Util.Post.fromPostParam2
                                       ds2
                                       ds3
                                       ds4
                                       ds5 } #) }
                               Data.Maybe.Just t
                               -> case Util.MIME.uploadFile1 nm fp w1 of ds1 { (#,#) ipv ipv1 ->
                                  (# ipv,
                                     case ipv1 of wild3 { Codec.MIME.Type.MIMEValue ds ds2 ds3 ds4 ds5 ->
                                     Codec.MIME.Type.MIMEValue t ds2 ds3 ds4 ds5 } #) } } } }) -}
79f3b805ecfdb53914b70e1edc70f312
  $wgo :: [Util.Post.PostParam]
          -> (# [Util.Post.PostParam], [Util.Post.PostParam] #)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d706e82e3893a7a4943d3f9c0871e76e
  data PostKind
    No C type associated
    RecFlag NonRecursive, Promotable
    = PostQuery :: PostKind |
      PostWWWForm :: PostKind |
      PostFormData :: PostKind
    FamilyInstance: none
5052c211a431dac11e364e8abb0e1bb8
  data PostParam
    No C type associated
    RecFlag NonRecursive, Not promotable
    = PostNameValue :: GHC.Base.String -> GHC.Base.String -> PostParam
        Stricts: _ _ |
      PostFile :: GHC.Base.String -> GHC.IO.FilePath
                  -> (Data.Maybe.Maybe GHC.Base.String) -> PostParam
        Stricts: _ _ _
    FamilyInstance: none
5cfcc6c9a8cbb835e0894fda7fb74418
  data PostReq
    No C type associated
    RecFlag NonRecursive, Not promotable
    = PostReq :: GHC.Base.String -> [Util.Post.PostParam] -> PostReq
        Stricts: _ _
        Fields: prName prVals
    FamilyInstance: none
b320ca992a4667e6870c5add1d467c73
  addNameFile :: GHC.Base.String
                 -> GHC.IO.FilePath
                 -> Data.Maybe.Maybe GHC.Base.String
                 -> Util.Post.PostReq
                 -> Util.Post.PostReq
    {- Arity: 4, HasNoCafRefs,
       Strictness: <L,U><L,U><L,U><S,1*U(U,U)>m,
       Unfolding: InlineRule (4, True, False)
                  (\ nm :: GHC.Base.String
                     fp :: GHC.IO.FilePath
                     mbTy :: Data.Maybe.Maybe GHC.Base.String
                     pr :: Util.Post.PostReq ->
                   case pr of wild { Util.Post.PostReq ds ds1 ->
                   Util.Post.PostReq
                     ds
                     (GHC.Types.:
                        @ Util.Post.PostParam
                        (Util.Post.PostFile nm fp mbTy)
                        ds1) }) -}
951ff05bc285c5d32e16086cbb4e8916
  addNameValue :: GHC.Base.String
                  -> GHC.Base.String
                  -> Util.Post.PostReq
                  -> Util.Post.PostReq
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U,U)>m,
       Unfolding: InlineRule (3, True, False)
                  (\ n :: GHC.Base.String
                     v :: GHC.Base.String
                     pr :: Util.Post.PostReq ->
                   case pr of wild { Util.Post.PostReq ds ds1 ->
                   Util.Post.PostReq
                     ds
                     (GHC.Types.:
                        @ Util.Post.PostParam
                        (Util.Post.PostNameValue n v)
                        ds1) }) -}
2176d4e378017f9e07133b59265c7ec1
  fromPostParam :: GHC.Base.String
                   -> Util.Post.PostParam
                   -> GHC.Types.IO Codec.MIME.Type.MIMEValue
    {- Arity: 3, Strictness: <L,A><S,1*U><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Util.Post.fromPostParam1
                    `cast`
                  (<GHC.Base.String>_R
                   ->_R <Util.Post.PostParam>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.MIMEValue>_R)) -}
85a74ecb37875b7134c8de9313cd5c5a
  fromPostParam1 :: GHC.Base.String
                    -> Util.Post.PostParam
                    -> GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                          Codec.MIME.Type.MIMEValue #)
    {- Arity: 3, Strictness: <L,A><S,1*U><L,U>, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, True)
                  (\ w :: GHC.Base.String
                     w1 :: Util.Post.PostParam
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   Util.Post.$wa w1 w2) -}
a9314d253c4ce250c6c465cdb4449c33
  fromPostParam10 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "x-www-form-urlencoded"#) -}
24ebbf5c21502fbd28ec2887160f3d9a
  fromPostParam2 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.Post.fromPostParam3
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
a03f3b1a9754ea808ee614b40cfd111d
  fromPostParam3 :: Codec.MIME.Type.MIMEType
    {- Strictness: m7,
       Unfolding: (Codec.MIME.Type.Text Util.Post.fromPostParam4) -}
73ba26a24f5ab9765c6f9100a9e64c4d
  fromPostParam4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "plain"#) -}
61d56d23553b3e8eee9dda848e7e4b67
  fromPostParam5 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.Post.fromPostParam6
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
84ea088b12a0175be1487cbf8118f92d
  fromPostParam6 :: Codec.MIME.Type.MIMEType
    {- Strictness: m1,
       Unfolding: (Codec.MIME.Type.Application
                     Util.Post.fromPostParam7) -}
9f856d45ead086da25fcd8c35fa57275
  fromPostParam7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "octet-stream"#) -}
83c0a0e3231dfbb0551db67f6f9cc072
  fromPostParam8 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.Post.fromPostParam9
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
e34a94f7ae0a032026f8193dd436be59
  fromPostParam9 :: Codec.MIME.Type.MIMEType
    {- Strictness: m1,
       Unfolding: (Codec.MIME.Type.Application
                     Util.Post.fromPostParam10) -}
499306852d10d0000247573d320bd281
  getMIMEType :: GHC.Base.String -> GHC.Types.IO Codec.MIME.Type.Type
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (Util.Post.getMIMEType1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.Type>_R))) -}
d126b6d80750ff842232b2b75c1c1089
  getMIMEType1 :: GHC.Base.String
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, Codec.MIME.Type.Type #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ x :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Codec.MIME.Parse.parseContentType x of wild {
                     Data.Maybe.Nothing -> (# eta, Util.Post.fromPostParam5 #)
                     Data.Maybe.Just t -> (# eta, t #) }) -}
a6995b43146fbf4fc23c822301498ffb
  isPostFile :: Util.Post.PostParam -> GHC.Types.Bool
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Util.Post.PostParam ->
                   case ds of wild {
                     Util.Post.PostNameValue ipv ipv1 -> GHC.Types.False
                     Util.Post.PostFile ds1 ds2 ds3 -> GHC.Types.True }) -}
1138d305414b6f690b9638e2b6b601bb
  newPostRequest :: GHC.Base.String -> Util.Post.PostReq
    {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ s :: GHC.Base.String ->
                   Util.Post.PostReq s (GHC.Types.[] @ Util.Post.PostParam)) -}
49b3ea97201f592c7bc92de255ae613d
  prName :: Util.Post.PostReq -> GHC.Base.String
    RecSel Util.Post.PostReq
    {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Util.Post.PostReq ->
                   case ds of wild { Util.Post.PostReq ds1 ds2 -> ds1 }) -}
2a2bb27a442e9336944aff621b10108f
  prVals :: Util.Post.PostReq -> [Util.Post.PostParam]
    RecSel Util.Post.PostReq
    {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Util.Post.PostReq ->
                   case ds of wild { Util.Post.PostReq ds1 ds2 -> ds2 }) -}
4426c031280f07bf7c5a04e2b1a8d903
  testRequest :: Util.Post.PostReq
                 -> Data.Maybe.Maybe Util.Post.PostKind
                 -> GHC.Types.IO ()
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U>,
       Unfolding: (Util.Post.testRequest1
                     `cast`
                   (<Util.Post.PostReq>_R
                    ->_R <Data.Maybe.Maybe Util.Post.PostKind>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
2b3ca7f506c06b4cba38d747f94e1f67
  testRequest1 :: Util.Post.PostReq
                  -> Data.Maybe.Maybe Util.Post.PostKind
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U>,
       Unfolding: (\ a :: Util.Post.PostReq
                     b :: Data.Maybe.Maybe Util.Post.PostKind
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Util.Post.testRequest5 a b eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,) as bs cs ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (GHC.CString.unpackAppendCString# "URL query portion: "# as)
                          GHC.Types.True
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (Data.List.unlines
                             (GHC.Base.map
                                @ ([GHC.Types.Char], [GHC.Types.Char])
                                @ [GHC.Types.Char]
                                Util.Post.testRequest2
                                bs))
                          GHC.Types.True
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (GHC.Types.[] @ GHC.Types.Char)
                          GHC.Types.True
                          ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   System.IO.putStrLn1 cs ipv6 } } } } }) -}
02ba65b95346b997f70e5b49b5de41c4
  testRequest2 :: ([GHC.Types.Char], [GHC.Types.Char])
                  -> GHC.Base.String
    {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: ([GHC.Types.Char], [GHC.Types.Char]) ->
                   case ds of wild { (,) k v ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr @ GHC.Types.Char @ b c n k)
                     (GHC.Types.:
                        @ GHC.Types.Char
                        Util.Post.testRequest4
                        (GHC.Types.: @ GHC.Types.Char Util.Post.testRequest3 v)) }) -}
1342d628a7e5f6e1a168b51e9fa4578f
  testRequest3 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' ') -}
7bd9878a21342e644868de0595ba09a6
  testRequest4 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ':') -}
d1c3b6406a9d36a55d0069f39791c36a
  testRequest5 :: Util.Post.PostReq
                  -> Data.Maybe.Maybe Util.Post.PostKind
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        (GHC.Base.String,
                         [(GHC.Base.String, GHC.Base.String)],
                         GHC.Base.String) #)
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U> -}
0993abe4b7dd5c082399cdbec664d235
  toMIMEType :: GHC.Base.String -> GHC.Types.IO Codec.MIME.Type.Type
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (Util.Post.toMIMEType1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.Type>_R))) -}
436abf6ce56503dcc908dcebc14593ed
  toMIMEType1 :: GHC.Base.String
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, Codec.MIME.Type.Type #)
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ tyStr :: GHC.Base.String
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Codec.MIME.Parse.parseContentType tyStr of wild {
                     Data.Maybe.Nothing -> (# eta, Util.Post.fromPostParam2 #)
                     Data.Maybe.Just t -> (# eta, t #) }) -}
8e52f0ba8e45a98f17fbf525e8f59364
  toMIMEValue :: [Util.Post.PostParam]
                 -> GHC.Types.IO Codec.MIME.Type.MIMEValue
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (Util.Post.toMIMEValue1
                     `cast`
                   (<[Util.Post.PostParam]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.MIMEValue>_R))) -}
7bb6c5b2764a69723f7e4dcc9133f250
  toMIMEValue1 :: [Util.Post.PostParam]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        Codec.MIME.Type.MIMEValue #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ ps :: [Util.Post.PostParam]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Random.$fRandomInteger3
                          Util.Post.toMIMEValue6
                          s of ds1 { (#,#) ipv ipv1 ->
                   case Util.Post.$wgo ps of ww { (#,#) ww1 ww2 ->
                   let {
                     $j :: [Util.Post.PostParam]
                           -> [Util.Post.PostParam]
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Codec.MIME.Type.MIMEValue #)
                       {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                     = \ fs :: [Util.Post.PostParam] ns :: [Util.Post.PostParam] ->
                       case Util.Post.toMIMEValue5 ns ipv of ds2 { (#,#) ipv2 ipv3 ->
                       case Util.MIME.mixedType1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                       case ipv5 of wild { (,) mi b ->
                       case Util.Post.toMIMEValue4 fs ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                       (# ipv6,
                          Codec.MIME.Type.MIMEValue
                            (Codec.MIME.Type.Type
                               Util.Post.toMIMEValue3
                               (GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Util.Post.toMIMEValue2,
                                   let {
                                     n :: [GHC.Types.Char]
                                     = Numeric.$wshowIntAtBase
                                         @ GHC.Integer.Type.Integer
                                         GHC.Num.$fNumInteger
                                         GHC.Integer.Type.$fOrdInteger
                                         GHC.Real.$fNumRatio_$s$cfromInteger
                                         GHC.Real.$fIntegralInteger_$cquotRem
                                         GHC.Real.$fIntegralInteger_$ctoInteger
                                         GHC.Show.$fShowInteger
                                         Numeric.showHex7
                                         GHC.Show.intToDigit
                                         ipv1
                                         (GHC.Types.[] @ GHC.Types.Char)
                                   } in
                                   let {
                                     lvl14 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char Util.Post.toMIMEValue_x n
                                   } in
                                   letrec {
                                     xs :: GHC.Prim.Int# -> [GHC.Types.Char]
                                       {- Arity: 1, Strictness: <L,U> -}
                                     = \ m :: GHC.Prim.Int# ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<=# m 1) of wild1 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              Util.Post.toMIMEValue_x
                                              (xs (GHC.Prim.-# m 1))
                                         GHC.Types.True -> lvl14 }
                                   } in
                                   xs 30)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))))
                            (Data.Maybe.Nothing @ Codec.MIME.Type.Disposition)
                            (Codec.MIME.Type.Multi
                               (GHC.Base.++
                                  @ Codec.MIME.Type.MIMEValue
                                  ipv3
                                  (case ipv7 of wild1 {
                                     [] -> GHC.Types.[] @ Codec.MIME.Type.MIMEValue
                                     : ipv8 ipv9
                                     -> GHC.Types.:
                                          @ Codec.MIME.Type.MIMEValue
                                          (case mi of wild2 { Codec.MIME.Type.MIMEValue ds ds5 ds6 ds7 ds8 ->
                                           Codec.MIME.Type.MIMEValue
                                             ds
                                             ds5
                                             (Codec.MIME.Type.Multi wild1)
                                             ds7
                                             ds8 })
                                          (GHC.Types.[] @ Codec.MIME.Type.MIMEValue) })))
                            (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                            GHC.Types.True #) } } } }
                   } in
                   case ww1 of wild {
                     [] -> $j (GHC.Types.[] @ Util.Post.PostParam) ww2
                     : ds ds2
                     -> case ds2 of wild1 {
                          [] -> $j (GHC.Types.[] @ Util.Post.PostParam) ps
                          : ipv2 ipv3 -> $j wild ww2 } } } }) -}
290aad2ed0570b8f43166b781ff1495a
  toMIMEValue10 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 32) -}
7fa2182fe84e9caa34512b2f0e094bf0
  toMIMEValue11 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 2) -}
cfb35f638aaabc61ba9cb0a0d3f715b5
  toMIMEValue2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "boundary"#) -}
600c26d895e0fe79da00ea4d73140e1d
  toMIMEValue3 :: Codec.MIME.Type.MIMEType
    {- HasNoCafRefs, Strictness: m6,
       Unfolding: (Codec.MIME.Type.Multipart Codec.MIME.Type.FormData) -}
7299300ce3d8aceacb01fd450f071761
  toMIMEValue4 :: [Util.Post.PostParam]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        [Codec.MIME.Type.MIMEValue] #)
    {- Arity: 2, Strictness: <S,1*U><L,U> -}
b789ae2720eefbd9900595ca33e4bed4
  toMIMEValue5 :: [Util.Post.PostParam]
                  -> GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                        [Codec.MIME.Type.MIMEValue] #)
    {- Arity: 2, Strictness: <S,1*U><L,U> -}
2f350354256e63335da01631faf10273
  toMIMEValue6 :: (GHC.Integer.Type.Integer,
                   GHC.Integer.Type.Integer)
    {- Strictness: m,
       Unfolding: ((Util.Post.toMIMEValue_low, Util.Post.toMIMEValue7)) -}
71669fe1ed51708c319a9cd66cbe015b
  toMIMEValue7 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.timesInteger
                     Util.Post.toMIMEValue_low
                     Util.Post.toMIMEValue_low) -}
82288e17dbf4c53cf3e49fbf0cff1234
  toMIMEValue8 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 1) -}
5bf8fa6e27c385aafb339a164fe73da6
  toMIMEValue9 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Real.^_$s^2
                     Util.Post.toMIMEValue11
                     Util.Post.toMIMEValue10) -}
991ca6155839e199fbb01f6d6e770dd0
  toMIMEValue_low :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.minusInteger
                     Util.Post.toMIMEValue9
                     Util.Post.toMIMEValue8) -}
a9af816b0759c99df4e37b847f6750e2
  toMIMEValue_x :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-') -}
356cc156255be69a2eace568d4e90da4
  toRequest :: Util.Post.PostReq
               -> Data.Maybe.Maybe Util.Post.PostKind
               -> GHC.Types.IO
                      (GHC.Base.String,
                       [(GHC.Base.String, GHC.Base.String)],
                       GHC.Base.String)
    {- Arity: 3, Strictness: <L,1*U(A,U)><S,1*U><L,U>,
       Unfolding: (Util.Post.testRequest5
                     `cast`
                   (<Util.Post.PostReq>_R
                    ->_R <Data.Maybe.Maybe Util.Post.PostKind>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                  <(GHC.Base.String,
                                    [(GHC.Base.String, GHC.Base.String)],
                                    GHC.Base.String)>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

