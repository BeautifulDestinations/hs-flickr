
==================== FINAL INTERFACE ====================
2016-03-01 11:43:24.544403 UTC

interface main:Flickr.Photos 7084
  interface hash: 10df4cc7fbe86dcd83c3a259c63ef29d
  ABI hash: 93f1fcbb1cee42c600add2ba8148ec74
  export-list hash: 48860187e67d0fe40b87f9672a2894e2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f0b233317d706b40cf44ae14d7004b5f
  used TH splices: False
  where
exports:
  Flickr.Photos.addTags
  Flickr.Photos.delete
  Flickr.Photos.getAllContexts
  Flickr.Photos.getContactsPhotos
  Flickr.Photos.getContactsPublicPhotos
  Flickr.Photos.getContext
  Flickr.Photos.getCounts
  Flickr.Photos.getExif
  Flickr.Photos.getFavorites
  Flickr.Photos.getInfo
  Flickr.Photos.getNotInSet
  Flickr.Photos.getPerms
  Flickr.Photos.getPhotoURL
  Flickr.Photos.getRecent
  Flickr.Photos.getSizes
  Flickr.Photos.getUntagged
  Flickr.Photos.getWithGeoData
  Flickr.Photos.getWithoutGeoData
  Flickr.Photos.nullSearchConstraints
  Flickr.Photos.recentlyUpdated
  Flickr.Photos.removeTag
  Flickr.Photos.search
  Flickr.Photos.setContentType
  Flickr.Photos.setDates
  Flickr.Photos.setMeta
  Flickr.Photos.setPerms
  Flickr.Photos.setSafetyLevel
  Flickr.Photos.setTags
  Flickr.Photos.SearchConstraints{Flickr.Photos.SearchConstraints Flickr.Photos.s_accuracy Flickr.Photos.s_bbox Flickr.Photos.s_contacts Flickr.Photos.s_content_type Flickr.Photos.s_group_id Flickr.Photos.s_has_geo Flickr.Photos.s_is_commons Flickr.Photos.s_lat Flickr.Photos.s_license Flickr.Photos.s_lon Flickr.Photos.s_machine_tag_mode Flickr.Photos.s_machine_tags Flickr.Photos.s_media Flickr.Photos.s_place_id Flickr.Photos.s_privacy Flickr.Photos.s_radius Flickr.Photos.s_radius_units Flickr.Photos.s_safe_search Flickr.Photos.s_sort Flickr.Photos.s_tag_mode Flickr.Photos.s_tags Flickr.Photos.s_taken Flickr.Photos.s_text Flickr.Photos.s_upload Flickr.Photos.s_woe_id}
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Enum 21572a7ecadc01c858f3321ea577e161
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 04dcf41add9dda483c4e1216c1e4d955
  exports: a48c768163b3524ddb6a3c7780b5d55c
  FM 91641286fd5a4035d1caa1713877af9c
  flickCall_ 1cac995e500e696d5a2c6ff655961ac8
  flickTranslate 0d93a9ca510de3c49d118e1a2c6aeefb
  flickrCall 27853d99c3e0ae1d63c5adb14a8ad9a4
  lsArg 2d739415b761818716273280a0efddbc
  mbArg b541776dade0993a7e0e52bc1bf85701
  parseDoc e28a4c2828b730c0874e225cfb19a6be
  postMethod 36bf5d4b8863fdc1e45fd9fe0ad30de3
  withDeletePerm 0d32446b760f75cbd2b0c642289dda20
  withReadPerm 658c9bde6b0a00d08282c64b1b2dc831
  withWritePerm e8345b81f471c066c6f7cdfdf2cd2d31
import  -/  Flickr.Types 653ba19fff32ac001f790083a5a45199
  exports: 16c0f78ccd56a3138dea1b355b10ed13
  Accuracy f6b8bf10062f79f152c80fe22426e833
  BoundingBox 2a574ae11a9565cdca461494f3d94b3c
  ContentType d8afa193134fe8539df154ac66cce9e6
  Date af4c5331d30d3518aa3eccbd02dfc2da
  DateGranularity c6b4b5c395112952d8a4a6bfe3cf4b97
  DateInterval e845223938215d5ee8afffb7a04a4364
  DateString 662168da1110c3a0cef7e24ecc9a226d
  Decimal aee147d6978ef920841c053376539654
  Description a7ceea6807f6d97eb556c3162cfef551
  EXIF 7ef767ed50a09e72470d47a945adcaae
  GroupID 7715af3af388e09fe6cfbbe4d79edbf2
  LicenseID 4736ce5748b2dbac9284ffff7005d2f5
  MediaType 07e07ebaa734b592987e3aa77de74de3
  Permissions 20b7662580a204cbff8749752bdd4988
  Photo 9c6e2481eefe963aeaf1e66869e9c5ca
  PhotoContext 0c68f304c0a531299fec27bca2099f02
  PhotoCount c3cf33befcb4486f25185e6a56e481d6
  PhotoDetails afa8e7966b786b9f1577afd375bd6d0e
  PhotoID 32a0762d66c6df01a08e8f2f79620151
  PhotoInfo 6c788b02ada67204c58c61f09284a3ad
  PhotoPool 04383f70c7ed4251e614d7518f135c1c
  Photoset 5644986d2f2e6781565013135e41f5b8
  PlaceID 5ac42e7f671b2fdaa8aecb11074041c5
  Privacy fb1252771a239a4aadb457d870d9870c
  Safety adf3410a72159dc8e5e3a0918d3eb69f
  SizeDetails 4687d9518949bbb4fe3bedd27b5a07a1
  SortKey c8c1ca7f8867cdf1072530d4e13e8eb8
  Tag a2783451da0611e173d62dd4c028772c
  Title 158778c8c5a081091ee926d80fa27af8
  URLString fb5221ff5748803b8672d77ed2871a7d
  User 55da6a4521f5104a0ed92f1cfebb3575
  UserID cbf2c759a798b6575a1c2d75906b7fcb
  WhereOnEarthID 82a6269b22ebe175ae5d28940d6f4b2c
  permAddMetaLevel 5f56996b4c785c16a8a0fffb77c7c838
  permCommentLevel 09b00024fb23030f8f426588b4a58a31
  permIsFamily 30d65131b6afe1b4d26dc606f37b86cf
  permIsFriend b83c32939e54937e04f53f386193975b
  permIsPublic 7a4af9ce800e05713e90837f2cacde3f
  photoDetailsPhoto f01056a1cc5eda99b4f586059c6c6da0
  photoDetailsURLs 0f48945df0c98fee1f1685b1bc03ff62
  photoURL 0c6a31343ee582444da16527b5b90674
  showContentType 5e38b958f5670754d46d57fb1e1436c4
  showSafety 900e8e431f2c717404396d867ba0294b
  urlDetailsURL 4bb79b6e56b1a5ae9a96b3cfa8e5686f
import  -/  Flickr.Types.Import 9b5e87367f5380e094973b827aa6043c
  exports: 305bec7abfd17862ca1e01be2c748f5a
  eltPhotoPool 86edc4a053359bbe1eb5768deef5d46d
  eltPhotoset fbaca31d0e8bfcfa4e5f21e1cd9d837c
  eltUser 4838dec1321cbedcdf4ca799f0b19cf6
  toEXIFList de32e4d83a7d8959f53fef069662de6f
  toPermissions 96b283455d82d6cd6f32a3cdcf22f09c
  toPhotoCountList 381301870f0c38ae9d9fb696d9228f3a
  toPhotoDetails 6a98ed26cdf63109eaf4b163f34e8e16
  toPhotoList 1d742cbe83061d87a71f51268d60155c
  toPhotoPair b59bdac5b2c2f4311a33a86cd5f95e26
  toSizeList cda0f651a55676ced7e0de179061e753
import  -/  Flickr.Utils 24444d569f75caf3780759e9be32db2d
  exports: 95e019bbc664423a44346d6cce4f400d
  nsName 2e45503d90fe9b677556140b09b662ba
  pAttr eccd37156d1416dd11f1b8a17340b992
  showBool de2fe3c397cbc946a766099d9bff16c1
import  -/  xml-1.3.14:Text.XML.Light.Proc 277b74c044fa89f0db17455b56117130
1afde7622cf743052eae95ffba1121b8
  $waddTags :: Flickr.Types.PhotoID
               -> [Flickr.Types.Tag]
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.addTags3
                          (case w1 of wild {
                             []
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
a915d0462a4cac424a75e6fe2433b1b5
  $wgetAllContexts :: Flickr.Types.PhotoID
                      -> (# Flickr.Monad.FMEnv
                            -> GHC.Types.IO
                                   ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool]) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getAllContexts5
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               (case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                                Data.Maybe.mapMaybe
                                  @ Text.XML.Light.Types.Element
                                  @ Flickr.Types.Photoset
                                  Flickr.Types.Import.eltPhotoset
                                  (Text.XML.Light.Proc.$wfindChildren
                                     Flickr.Photos.getAllContexts3
                                     ww5) },
                                case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                                Data.Maybe.mapMaybe
                                  @ Text.XML.Light.Types.Element
                                  @ Flickr.Types.PhotoPool
                                  Flickr.Types.Import.eltPhotoPool
                                  (Text.XML.Light.Proc.$wfindChildren
                                     Flickr.Photos.getAllContexts1
                                     ww5) }) #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <([Flickr.Types.Photoset],
                                       [Flickr.Types.PhotoPool])>_R)) #) }) -}
aad62365e315eb146dedb68cc8c252e0
  $wgetContactsPhotos :: Data.Maybe.Maybe GHC.Types.Int
                         -> Data.Maybe.Maybe GHC.Types.Bool
                         -> Data.Maybe.Maybe GHC.Types.Bool
                         -> Data.Maybe.Maybe GHC.Types.Bool
                         -> [Flickr.Types.PhotoInfo]
                         -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U> -}
725d191ab520351a7d34106e526e486f
  $wgetContactsPublicPhotos :: Data.Maybe.Maybe GHC.Types.Int
                               -> Data.Maybe.Maybe GHC.Types.Bool
                               -> Data.Maybe.Maybe GHC.Types.Bool
                               -> Data.Maybe.Maybe GHC.Types.Bool
                               -> [Flickr.Types.PhotoInfo]
                               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U> -}
851a981a5bc9507cf16c6e9d2add03a9
  $wgetContext :: Flickr.Types.PhotoID
                  -> (# Flickr.Monad.FMEnv
                        -> GHC.Types.IO (Flickr.Types.Photo, Flickr.Types.Photo) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getContext1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.Photo, Flickr.Types.Photo)
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPhotoPair ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.Photo, Flickr.Types.Photo)
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.Photo, Flickr.Types.Photo)>_R)) #) }) -}
6a11104834f787aa37658e2e0a826be4
  $wgetCounts :: [Flickr.Types.DateString]
                 -> [Flickr.Types.DateString]
                 -> (# Flickr.Monad.FMEnv
                       -> GHC.Types.IO [Flickr.Types.PhotoCount] #)
    {- Arity: 2, Strictness: <L,1*U><L,1*U> -}
80b1bd9e0f974fa77b89b0f4d6ab879e
  $wgetExif :: Flickr.Types.PhotoID
               -> Data.Maybe.Maybe GHC.Base.String
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.EXIF] #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getExif2
                          (case w1 of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getExif1, a1)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.EXIF]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               Data.Maybe.mapMaybe
                                 @ Text.XML.Light.Types.Element
                                 @ Flickr.Types.EXIF
                                 Flickr.Types.Import.eltEXIF
                                 (Flickr.Utils.pNodes
                                    Flickr.Types.Import.eltEXIF12
                                    (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.EXIF]>_R)) #) }) -}
5e80534d9ce9d951559433102ca828df
  $wgetFavorites :: Flickr.Types.PhotoID
                    -> (# Flickr.Monad.FMEnv
                          -> GHC.Types.IO [(Flickr.Types.User, Flickr.Types.Date)] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getFavorites3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [(Flickr.Types.User, GHC.Base.String)]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Photos.getFavorites_go
                                   (Text.XML.Light.Proc.$wfindChildren
                                      Flickr.Photos.getFavorites1
                                      ww5) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [(Flickr.Types.User, GHC.Base.String)]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[(Flickr.Types.User, GHC.Base.String)]>_R)) #) }) -}
854ddc2ed2878504001ce94e4ae813a6
  $wgetInfo :: Flickr.Types.PhotoID
               -> Data.Maybe.Maybe GHC.Base.String
               -> (# Flickr.Monad.FMEnv
                     -> GHC.Types.IO Flickr.Types.PhotoDetails #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getInfo1
                          (case w1 of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getExif1, a1)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.PhotoDetails
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPhotoDetails ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.PhotoDetails
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.PhotoDetails>_R)) #) }) -}
22d290e027d542175d593d95e281eb20
  $wgetNotInSet :: Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.Privacy
                   -> Data.Maybe.Maybe Flickr.Types.MediaType
                   -> [Flickr.Types.PhotoInfo]
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U> -}
c19d32598d6c8530b0fdcaebb3717b32
  $wgetPerms :: Flickr.Types.PhotoID
                -> (# Flickr.Monad.FMEnv
                      -> GHC.Types.IO Flickr.Types.Permissions #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getPerms1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.Permissions
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPermissions ww4 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.Permissions
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.Permissions>_R)) #) }) -}
c6eba25acf93def07cdd0b537fcb6acf
  $wgetPhotoURL :: Data.Maybe.Maybe Flickr.Types.URLString
                   -> [Flickr.Types.URLDetails]
                   -> Flickr.Types.URLString
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ ww :: Data.Maybe.Maybe Flickr.Types.URLString
                     ww1 :: [Flickr.Types.URLDetails] ->
                   case ww of wild {
                     Data.Maybe.Nothing
                     -> case ww1 of wild1 {
                          [] -> Flickr.Photos.getPhotoURL1
                          : u ds -> Flickr.Types.urlDetailsURL u }
                     Data.Maybe.Just v
                     -> case v of wild1 {
                          []
                          -> case ww1 of wild2 {
                               [] -> Flickr.Photos.getPhotoURL1
                               : u ds -> Flickr.Types.urlDetailsURL u }
                          : ipv ipv1 -> wild1 } }) -}
4e99a1f2e485d9c51aeca2cf8c0577c2
  $wgetRecent :: [Flickr.Types.PhotoInfo]
                 -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getRecent2
                          (case GHC.Base.map
                                  @ Flickr.Types.PhotoInfo
                                  @ [GHC.Types.Char]
                                  Flickr.Types.$fShowPhotoInfo_$cshow
                                  w of wild {
                             [] -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getRecent1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> case GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                                   ipv
                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      [Flickr.Types.Photo] #)
                            of {}
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPhotoList
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> case GHC.Prim.raiseIO#
                                        @ GHC.Exception.SomeException
                                        @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                        (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                           (Flickr.Monad.FlickErr
                                              Flickr.Monad.checkResponse14
                                              Flickr.Monad.FlickParseError
                                              (GHC.Types.[] @ GHC.Types.Char)
                                              (Data.Maybe.Nothing @ GHC.Base.String)
                                              (case GHC.List.$wlenAcc
                                                      @ GHC.Types.Char
                                                      ipv1
                                                      0 of ww11 { DEFAULT ->
                                               case GHC.Show.$wshowSignedInt
                                                      0
                                                      ww11
                                                      (GHC.Types.[]
                                                         @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                               GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    Flickr.Monad.parseDoc1
                                                    ipv1) } })))
                                        ipv
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           [Flickr.Types.Photo] #)
                                 of {}
                              Data.Maybe.Just res
                              -> (# ipv, case res of wild2 { (,) ds2 y -> y } #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Photo]>_R)) #) }) -}
d6adfdd6134e91ae4f6c5a0e2b5227ce
  $wgetSizes :: Flickr.Types.PhotoID
                -> (# Flickr.Monad.FMEnv
                      -> GHC.Types.IO [Flickr.Types.SizeDetails] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getSizes1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.SizeDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               Data.Maybe.mapMaybe
                                 @ Text.XML.Light.Types.Element
                                 @ Flickr.Types.SizeDetails
                                 Flickr.Types.Import.eltSize
                                 (Flickr.Utils.pNodes
                                    Flickr.Types.Import.eltSize7
                                    (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.SizeDetails]>_R)) #) }) -}
35a9cebfd84f05883a1464a301617091
  $wgetUntagged :: Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.Privacy
                   -> Data.Maybe.Maybe Flickr.Types.MediaType
                   -> [Flickr.Types.PhotoInfo]
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U> -}
02b12e8454194978b579df75a84c9783
  $wgetWithGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                      -> Data.Maybe.Maybe Flickr.Types.DateInterval
                      -> Data.Maybe.Maybe Flickr.Types.Privacy
                      -> Data.Maybe.Maybe Flickr.Types.SortKey
                      -> Data.Maybe.Maybe Flickr.Types.MediaType
                      -> [Flickr.Types.PhotoInfo]
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U> -}
48670e55ad808300fe865c61cdf672a1
  $wgetWithoutGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                         -> Data.Maybe.Maybe Flickr.Types.DateInterval
                         -> Data.Maybe.Maybe Flickr.Types.Privacy
                         -> Data.Maybe.Maybe Flickr.Types.SortKey
                         -> Data.Maybe.Maybe Flickr.Types.MediaType
                         -> [Flickr.Types.PhotoInfo]
                         -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U> -}
7ff26285d48e72e579ea6efd982fe11b
  $wrecentlyUpdated :: Flickr.Types.DateString
                       -> [Flickr.Types.PhotoInfo]
                       -> (# Flickr.Monad.FMEnv
                             -> GHC.Types.IO
                                    (Flickr.Types.PhotoContext, [Flickr.Types.Photo]) #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.DateString
                     w1 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.recentlyUpdated2
                          (case GHC.Base.map
                                  @ Flickr.Types.PhotoInfo
                                  @ [GHC.Types.Char]
                                  Flickr.Types.$fShowPhotoInfo_$cshow
                                  w1 of wild {
                             []
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.recentlyUpdated1, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getRecent1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.recentlyUpdated1, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPhotoList
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.PhotoContext,
                                       [Flickr.Types.Photo])>_R)) #) }) -}
86ac13b1fcc6a2f17ad39b8c2e9c1080
  $wsearch :: Data.Maybe.Maybe Flickr.Types.UserID
              -> Flickr.Photos.SearchConstraints
              -> [Flickr.Types.PhotoInfo]
              -> (# Flickr.Monad.FMEnv
                    -> GHC.Types.IO
                           (Flickr.Types.PhotoContext, [Flickr.Types.Photo]) #)
    {- Arity: 3,
       Strictness: <L,1*U><L,U(1*U,1*U,1*U,U,U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U> -}
144ccca3a14d3a8a2d7346402bccb08a
  $wsetContentType :: Flickr.Types.PhotoID
                      -> Flickr.Types.ContentType
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.ContentType ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setContentType2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.setContentType1, Flickr.Types.showContentType w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
13cd775b56b9bd644eeb85c6363f2385
  $wsetDates :: Flickr.Types.PhotoID
                -> Data.Maybe.Maybe Flickr.Types.DateString
                -> Data.Maybe.Maybe Flickr.Types.DateString
                -> Data.Maybe.Maybe Flickr.Types.DateGranularity
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w2 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w3 :: Data.Maybe.Maybe Flickr.Types.DateGranularity ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setDates4
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case w3 of wild {
                                 Data.Maybe.Nothing
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.addTags2, w)
                                      (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.setDates3, GHC.Show.$fShowInt_$cshow a1)
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.addTags2, w)
                                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }
                           } in
                           case w1 of wild {
                             Data.Maybe.Nothing
                             -> case w2 of wild1 {
                                  Data.Maybe.Nothing -> xs
                                  Data.Maybe.Just a1
                                  -> GHC.Types.:
                                       @ (GHC.Base.String, GHC.Base.String)
                                       (Flickr.Photos.setDates2, a1)
                                       xs }
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.setDates1, a1)
                                  (case w2 of wild1 {
                                     Data.Maybe.Nothing -> xs
                                     Data.Maybe.Just a2
                                     -> GHC.Types.:
                                          @ (GHC.Base.String, GHC.Base.String)
                                          (Flickr.Photos.setDates2, a2)
                                          xs }) }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
7c0d184d90febd71fa94a20de1a61314
  $wsetMeta :: Flickr.Types.PhotoID
               -> Flickr.Types.Title
               -> Flickr.Types.Description
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.Title
                     w2 :: Flickr.Types.Description ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setMeta3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.setMeta2, w1)
                                (GHC.Types.:
                                   @ (GHC.Base.String, GHC.Base.String)
                                   (Flickr.Photos.setMeta1, w2)
                                   (GHC.Types.[]
                                      @ (GHC.Base.String, GHC.Base.String))))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
3f4722fe8bc3e29946a8e1bb0b88ed7e
  $wsetPerms :: Flickr.Types.PhotoID
                -> Flickr.Types.Permissions
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U(A,1*U,1*U,1*U,1*U(U),1*U(U))>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.Permissions ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setPerms6
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.setPerms5,
                                 case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                 case Flickr.Utils.$wshowBool ds2 of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 } })
                                (GHC.Types.:
                                   @ (GHC.Base.String, GHC.Base.String)
                                   (Flickr.Photos.setPerms4,
                                    case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                    case Flickr.Utils.$wshowBool ds3 of ww { (#,#) ww1 ww2 ->
                                    GHC.Types.: @ GHC.Types.Char ww1 ww2 } })
                                   (GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.setPerms3,
                                       case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                       case Flickr.Utils.$wshowBool ds4 of ww { (#,#) ww1 ww2 ->
                                       GHC.Types.: @ GHC.Types.Char ww1 ww2 } })
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.setPerms2,
                                          case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                          case ds5 of ww2 { GHC.Types.I# ww3 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww3
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                                         (GHC.Types.:
                                            @ (GHC.Base.String, GHC.Base.String)
                                            (Flickr.Photos.setPerms1,
                                             case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                             case ds6 of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0
                                                    ww3
                                                    (GHC.Types.[]
                                                       @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                                            (GHC.Types.[]
                                               @ (GHC.Base.String,
                                                  GHC.Base.String)))))))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
53c956d976907aea211d1b7be6831788
  $wsetSafetyLevel :: Flickr.Types.PhotoID
                      -> Data.Maybe.Maybe Flickr.Types.Safety
                      -> Data.Maybe.Maybe GHC.Types.Bool
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.Safety
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setSafetyLevel3
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case w2 of wild {
                                 Data.Maybe.Nothing
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.addTags2, w)
                                      (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.setSafetyLevel2, Flickr.Utils.showBool a1)
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.addTags2, w)
                                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }
                           } in
                           case w1 of wild {
                             Data.Maybe.Nothing -> xs
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.setSafetyLevel1, Flickr.Types.showSafety a1)
                                  xs }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
be0cf4e8a6f55ac09dceda157c4f672a
  $wsetTags :: Flickr.Types.PhotoID
               -> [Flickr.Types.Tag]
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setTags1
                          (case w1 of wild {
                             []
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
9a950440e1a3259b76213a0239352406
  data SearchConstraints
    No C type associated
    RecFlag NonRecursive, Not promotable
    = SearchConstraints :: [Flickr.Types.Tag]
                           -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe GHC.Base.String)
                           -> (Data.Maybe.Maybe Flickr.Types.DateInterval)
                           -> (Data.Maybe.Maybe Flickr.Types.DateInterval)
                           -> (Data.Maybe.Maybe [Flickr.Types.LicenseID])
                           -> (Data.Maybe.Maybe Flickr.Types.SortKey)
                           -> (Data.Maybe.Maybe Flickr.Types.Privacy)
                           -> (Data.Maybe.Maybe Flickr.Types.BoundingBox)
                           -> (Data.Maybe.Maybe Flickr.Types.Accuracy)
                           -> (Data.Maybe.Maybe Flickr.Types.Safety)
                           -> (Data.Maybe.Maybe Flickr.Types.ContentType)
                           -> [Flickr.Types.Tag] -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe Flickr.Types.GroupID)
                           -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe Flickr.Types.WhereOnEarthID)
                           -> (Data.Maybe.Maybe Flickr.Types.PlaceID)
                           -> (Data.Maybe.Maybe Flickr.Types.MediaType)
                           -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe Flickr.Types.Decimal)
                           -> (Data.Maybe.Maybe Flickr.Types.Decimal)
                           -> (Data.Maybe.Maybe Flickr.Types.Decimal)
                           -> (Data.Maybe.Maybe GHC.Base.String)
                           -> (Data.Maybe.Maybe GHC.Types.Bool) -> SearchConstraints
        Stricts: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        Fields: s_tags s_tag_mode s_text s_upload s_taken s_license s_sort s_privacy s_bbox s_accuracy s_safe_search s_content_type s_machine_tags s_machine_tag_mode s_group_id s_contacts s_woe_id s_place_id s_media s_has_geo s_lat s_lon s_radius s_radius_units s_is_commons
    FamilyInstance: none
e4988c9cc2228b0e1b7162ef7f3c8f50
  addTags :: Flickr.Types.PhotoID
             -> [Flickr.Types.Tag]
             -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Photos.$waddTags w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
62300aba4c785c0c870915b18078deef
  addTags1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "tags"#) -}
25e3b2ba15dad7f7099802f2fbcc32c9
  addTags2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "photo_id"#) -}
ff25be6a3733046abe9dcf93b63cf074
  addTags3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.addTags"#) -}
7b752073bce989fc0b6933f6bc20b4e9
  delete :: Flickr.Types.PhotoID -> Flickr.Monad.FM ()
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.delete1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ()
                     (\ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withDeletePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
f469a755673eca83b04626c9378bc325
  delete1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.delete"#) -}
be9b3b00b15349d567ef6535c2d3b08d
  getAllContexts :: Flickr.Types.PhotoID
                    -> Flickr.Monad.FM
                           ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool])
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetAllContexts w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool])
                     ww1 }) -}
1d798444ad64929dc499a2c5f56f5abd
  getAllContexts1 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Photos.getAllContexts2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
285611c83fe4436da63b478a73faa4bd
  getAllContexts2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "pool"#) -}
847df0ed6c142af2b758fd9856869ffe
  getAllContexts3 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Photos.getAllContexts4
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
4b34433659bc665e49be0506f55da89f
  getAllContexts4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "set"#) -}
2ac30be5224d15bc17630fd4d123779a
  getAllContexts5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getAllContexts"#) -}
4d353f6e9a02ee788c9f7ad811cfbd4a
  getContactsPhotos :: Data.Maybe.Maybe GHC.Types.Int
                       -> Data.Maybe.Maybe GHC.Types.Bool
                       -> Data.Maybe.Maybe GHC.Types.Bool
                       -> Data.Maybe.Maybe GHC.Types.Bool
                       -> [Flickr.Types.PhotoInfo]
                       -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe GHC.Types.Int
                     w1 :: Data.Maybe.Maybe GHC.Types.Bool
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool
                     w3 :: Data.Maybe.Maybe GHC.Types.Bool
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetContactsPhotos
                          w
                          w1
                          w2
                          w3
                          w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
96a46bd58762b753cedf422b4dc133f7
  getContactsPublicPhotos :: Data.Maybe.Maybe GHC.Types.Int
                             -> Data.Maybe.Maybe GHC.Types.Bool
                             -> Data.Maybe.Maybe GHC.Types.Bool
                             -> Data.Maybe.Maybe GHC.Types.Bool
                             -> [Flickr.Types.PhotoInfo]
                             -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe GHC.Types.Int
                     w1 :: Data.Maybe.Maybe GHC.Types.Bool
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool
                     w3 :: Data.Maybe.Maybe GHC.Types.Bool
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetContactsPublicPhotos
                          w
                          w1
                          w2
                          w3
                          w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
adb6507d12835166b1e8caf092abf44f
  getContext :: Flickr.Types.PhotoID
                -> Flickr.Monad.FM (Flickr.Types.Photo, Flickr.Types.Photo)
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetContext w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.Photo, Flickr.Types.Photo)
                     ww1 }) -}
72e02740bc5ffa1c7593f7e2ff49bdb8
  getContext1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getContext"#) -}
29eabb137204079472d0562aea927652
  getCounts :: [Flickr.Types.DateString]
               -> [Flickr.Types.DateString]
               -> Flickr.Monad.FM [Flickr.Types.PhotoCount]
    {- Arity: 2, Strictness: <L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: [Flickr.Types.DateString]
                     w1 :: [Flickr.Types.DateString] ->
                   case Flickr.Photos.$wgetCounts w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.PhotoCount] ww1 }) -}
08f7e97f1e8a776512cdeaea8bc38fe6
  getExif :: Flickr.Types.PhotoID
             -> Data.Maybe.Maybe GHC.Base.String
             -> Flickr.Monad.FM [Flickr.Types.EXIF]
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Photos.$wgetExif w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.EXIF] ww1 }) -}
979ce5dd23db61e1fde0c57453df418c
  getExif1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "secret"#) -}
203be2caeb93c823e2eff3401f5a95e0
  getExif2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getExif"#) -}
ce49f98b4069296d4bb745add0b99f71
  getFavorites :: Flickr.Types.PhotoID
                  -> Flickr.Monad.FM [(Flickr.Types.User, Flickr.Types.Date)]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetFavorites w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ [(Flickr.Types.User, Flickr.Types.Date)]
                     ww1 }) -}
b3eb7defb1b6421ebb02445efa91694a
  getFavorites1 :: Text.XML.Light.Types.QName
    {- Strictness: m,
       Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Photos.getFavorites2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
3f94221ac55229907d384356463436b0
  getFavorites2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "person"#) -}
3f94faccd24889eb6caec6ab9da7e728
  getFavorites3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getFavorites"#) -}
7a5856027c37de46cc419ace1ee264a9
  getFavorites_go :: [Text.XML.Light.Types.Element]
                     -> Data.Maybe.Maybe [(Flickr.Types.User, GHC.Base.String)]
    {- Arity: 1, Strictness: <S,1*U> -}
8e45436e9bb4bc9232c3c2d520dfdca7
  getInfo :: Flickr.Types.PhotoID
             -> Data.Maybe.Maybe GHC.Base.String
             -> Flickr.Monad.FM Flickr.Types.PhotoDetails
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Photos.$wgetInfo w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.PhotoDetails ww1 }) -}
ea9a176a30632afaffd9e6125ab79d1a
  getInfo1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getInfo"#) -}
dbe5750ea952508f0c7bc63afb3e3c83
  getNotInSet :: Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.Privacy
                 -> Data.Maybe.Maybe Flickr.Types.MediaType
                 -> [Flickr.Types.PhotoInfo]
                 -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetNotInSet w w1 w2 w3 w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
250abf74773881b745cbb57dc3911dfe
  getPerms :: Flickr.Types.PhotoID
              -> Flickr.Monad.FM Flickr.Types.Permissions
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetPerms w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.Permissions ww1 }) -}
a1f2b123a1cdf2766d865e261174bed7
  getPerms1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getPerms"#) -}
55e166ff0b7455a9331b359c463edcb2
  getPhotoURL :: Flickr.Types.PhotoDetails -> Flickr.Types.URLString
    {- Arity: 1,
       Strictness: <S(S(LLLLLLSLLLL)LLLLLLLLLLLLLLLLL),1*U(1*U(A,A,A,A,A,A,1*U,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoDetails ->
                   case w of ww { Flickr.Types.PhotoDetails ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                   case ww1 of ww19 { Flickr.Types.Photo ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ->
                   Flickr.Photos.$wgetPhotoURL ww26 ww18 } }) -}
a53c0a661d7570f1eafa94fef7cadd8d
  getPhotoURL1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "<unknown>"#) -}
be9eb33f4c09f940564049507969d5af
  getRecent :: [Flickr.Types.PhotoInfo]
               -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetRecent w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
81524a2d20277b5cfe2582051752801b
  getRecent1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "extras"#) -}
2b116ed4180da79a58f111ec516a4f21
  getRecent2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getRecent"#) -}
86861c5e59b6d50e0f89ffe9e9f2a778
  getSizes :: Flickr.Types.PhotoID
              -> Flickr.Monad.FM [Flickr.Types.SizeDetails]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetSizes w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.SizeDetails] ww1 }) -}
4cb28daf16bb299829fcdfd47d5748de
  getSizes1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getSizes"#) -}
b09972533223f16dd3da4fd9d0e34262
  getUntagged :: Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.Privacy
                 -> Data.Maybe.Maybe Flickr.Types.MediaType
                 -> [Flickr.Types.PhotoInfo]
                 -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetUntagged w w1 w2 w3 w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
3ced2c5ccdc5ef6611a1d2f000da5795
  getWithGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                    -> Data.Maybe.Maybe Flickr.Types.DateInterval
                    -> Data.Maybe.Maybe Flickr.Types.Privacy
                    -> Data.Maybe.Maybe Flickr.Types.SortKey
                    -> Data.Maybe.Maybe Flickr.Types.MediaType
                    -> [Flickr.Types.PhotoInfo]
                    -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.SortKey
                     w4 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w5 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetWithGeoData
                          w
                          w1
                          w2
                          w3
                          w4
                          w5 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
0972a79946ed628ea07f3be2437f9a4c
  getWithoutGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                       -> Data.Maybe.Maybe Flickr.Types.DateInterval
                       -> Data.Maybe.Maybe Flickr.Types.Privacy
                       -> Data.Maybe.Maybe Flickr.Types.SortKey
                       -> Data.Maybe.Maybe Flickr.Types.MediaType
                       -> [Flickr.Types.PhotoInfo]
                       -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.SortKey
                     w4 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w5 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetWithoutGeoData
                          w
                          w1
                          w2
                          w3
                          w4
                          w5 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
7df2a11c77541b43489902a811d0527e
  nullSearchConstraints :: Flickr.Photos.SearchConstraints
    {- HasNoCafRefs,
       Unfolding: (Flickr.Photos.SearchConstraints
                     (GHC.Types.[] @ Flickr.Types.Tag)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ Flickr.Types.DateInterval)
                     (Data.Maybe.Nothing @ Flickr.Types.DateInterval)
                     (Data.Maybe.Nothing @ [Flickr.Types.LicenseID])
                     (Data.Maybe.Nothing @ Flickr.Types.SortKey)
                     (Data.Maybe.Nothing @ Flickr.Types.Privacy)
                     (Data.Maybe.Nothing @ Flickr.Types.BoundingBox)
                     (Data.Maybe.Nothing @ Flickr.Types.Accuracy)
                     (Data.Maybe.Nothing @ Flickr.Types.Safety)
                     (Data.Maybe.Nothing @ Flickr.Types.ContentType)
                     (GHC.Types.[] @ Flickr.Types.Tag)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ Flickr.Types.GroupID)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ Flickr.Types.WhereOnEarthID)
                     (Data.Maybe.Nothing @ Flickr.Types.PlaceID)
                     (Data.Maybe.Nothing @ Flickr.Types.MediaType)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ Flickr.Types.Decimal)
                     (Data.Maybe.Nothing @ Flickr.Types.Decimal)
                     (Data.Maybe.Nothing @ Flickr.Types.Decimal)
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)) -}
942f6e1aaa7624bfc96cc4649634d45b
  recentlyUpdated :: Flickr.Types.DateString
                     -> [Flickr.Types.PhotoInfo]
                     -> Flickr.Monad.FM
                            (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.DateString w1 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wrecentlyUpdated w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                     ww1 }) -}
c304818fe0b17aeae1141c2ea5470660
  recentlyUpdated1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "min_date"#) -}
bd3a8d8f46739e575f35863eddcc7a2c
  recentlyUpdated2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.recentlyUpdated"#) -}
1f8760c34000a9eaf31d6eb3f3109b0c
  removeTag :: Flickr.Types.Tag -> Flickr.Monad.FM ()
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.Tag ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.removeTag2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.removeTag1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ()
                     (\ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
f902a2d12da4b520a2e04dc4628a8244
  removeTag1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "tag_id"#) -}
2ceab19401b35d43a88c70891863ffb8
  removeTag2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.removeTag"#) -}
a7a528ea8de23f186758bb17bd955c7e
  s_accuracy :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe Flickr.Types.Accuracy
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds10 }) -}
14920587ec34112a91c310894cc516ae
  s_bbox :: Flickr.Photos.SearchConstraints
            -> Data.Maybe.Maybe Flickr.Types.BoundingBox
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds9 }) -}
e33427f5e977aea1b963f4d032cd80e8
  s_contacts :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds16 }) -}
bca3b6731d9ec00e35b34511f09685c4
  s_content_type :: Flickr.Photos.SearchConstraints
                    -> Data.Maybe.Maybe Flickr.Types.ContentType
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds12 }) -}
7611c98e3a35ba355eb750dec07fc5f6
  s_group_id :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe Flickr.Types.GroupID
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds15 }) -}
094dffcdcd8713fa4407c8c1a42f9880
  s_has_geo :: Flickr.Photos.SearchConstraints
               -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds20 }) -}
5d8766d6d19b5bca359f4866990ac6fa
  s_is_commons :: Flickr.Photos.SearchConstraints
                  -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds25 }) -}
511a13b1700b1b86077cdf212c86f5ac
  s_lat :: Flickr.Photos.SearchConstraints
           -> Data.Maybe.Maybe Flickr.Types.Decimal
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds21 }) -}
6b04993d2fea22d213b220106a9db96b
  s_license :: Flickr.Photos.SearchConstraints
               -> Data.Maybe.Maybe [Flickr.Types.LicenseID]
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLSLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds6 }) -}
b3a3a28bfac74d18f79c3a9a7212271a
  s_lon :: Flickr.Photos.SearchConstraints
           -> Data.Maybe.Maybe Flickr.Types.Decimal
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds22 }) -}
f826b5e4d62058ee582f744d0847ee2e
  s_machine_tag_mode :: Flickr.Photos.SearchConstraints
                        -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds14 }) -}
46fdf8a3b55d03d6b4cbbd2d1d544e28
  s_machine_tags :: Flickr.Photos.SearchConstraints
                    -> [Flickr.Types.Tag]
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds13 }) -}
505f0f41725a31b0f3ca7c924dcc67d7
  s_media :: Flickr.Photos.SearchConstraints
             -> Data.Maybe.Maybe Flickr.Types.MediaType
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds19 }) -}
446c36281ea4cd273986c863c57cb180
  s_place_id :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe Flickr.Types.PlaceID
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds18 }) -}
ad20c78e74e900183ccf759d449e2a55
  s_privacy :: Flickr.Photos.SearchConstraints
               -> Data.Maybe.Maybe Flickr.Types.Privacy
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds8 }) -}
33ce254cc22efdfaee02b76c6faf141a
  s_radius :: Flickr.Photos.SearchConstraints
              -> Data.Maybe.Maybe Flickr.Types.Decimal
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds23 }) -}
9745c2d2415249a65310e21f8c82fe2f
  s_radius_units :: Flickr.Photos.SearchConstraints
                    -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds24 }) -}
8f796a9fa6331a65b7b54f9ba1260af9
  s_safe_search :: Flickr.Photos.SearchConstraints
                   -> Data.Maybe.Maybe Flickr.Types.Safety
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds11 }) -}
6757d817a769ae794fb43f1728edfe0e
  s_sort :: Flickr.Photos.SearchConstraints
            -> Data.Maybe.Maybe Flickr.Types.SortKey
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLSLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds7 }) -}
02f4c371695d4687df4ebd0ea42c4799
  s_tag_mode :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LSLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds2 }) -}
ceae880d8dbe9aae8632af0c93378905
  s_tags :: Flickr.Photos.SearchConstraints -> [Flickr.Types.Tag]
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds1 }) -}
65197d20379fb65a7f73023d5d02aa63
  s_taken :: Flickr.Photos.SearchConstraints
             -> Data.Maybe.Maybe Flickr.Types.DateInterval
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLSLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds5 }) -}
01b25fcab6368e3269aae3f9c0872486
  s_text :: Flickr.Photos.SearchConstraints
            -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds3 }) -}
43bf1dab4db4f6f50381f13b997e4a14
  s_upload :: Flickr.Photos.SearchConstraints
              -> Data.Maybe.Maybe Flickr.Types.DateInterval
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds4 }) -}
c43865c92c53aa4986fb729f27fecf5c
  s_woe_id :: Flickr.Photos.SearchConstraints
              -> Data.Maybe.Maybe Flickr.Types.WhereOnEarthID
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds17 }) -}
d587f9728c184c23cd951becb3b1bf77
  search :: Data.Maybe.Maybe Flickr.Types.UserID
            -> Flickr.Photos.SearchConstraints
            -> [Flickr.Types.PhotoInfo]
            -> Flickr.Monad.FM
                   (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
    {- Arity: 3,
       Strictness: <L,1*U><L,U(1*U,1*U,1*U,U,U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID
                     w1 :: Flickr.Photos.SearchConstraints
                     w2 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wsearch w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                     ww1 }) -}
b7540d178acde90b5e0df26886a630dd
  setContentType :: Flickr.Types.PhotoID
                    -> Flickr.Types.ContentType
                    -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.ContentType ->
                   case Flickr.Photos.$wsetContentType w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
0bba4b22ae493cdb21965c54d194d9fb
  setContentType1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "content_type"#) -}
fd535eeed7beafb3a09a12fb0c26ce1c
  setContentType2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setContentType"#) -}
369d5db91e864de5c089e71914a5ac33
  setDates :: Flickr.Types.PhotoID
              -> Data.Maybe.Maybe Flickr.Types.DateString
              -> Data.Maybe.Maybe Flickr.Types.DateString
              -> Data.Maybe.Maybe Flickr.Types.DateGranularity
              -> Flickr.Monad.FM ()
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w2 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w3 :: Data.Maybe.Maybe Flickr.Types.DateGranularity ->
                   case Flickr.Photos.$wsetDates w w1 w2 w3 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
c4b6fd0e0ff5f2727064e472ec19f1e5
  setDates1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "date_posted"#) -}
70ce2da6de83f9dee7873c41e580ecc5
  setDates2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "date_taken"#) -}
bfef9ad9a40298dcfca627936c7f25c9
  setDates3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "date_taken_granularity"#) -}
d35da52f90da0fffb3b01fcd0a5e8584
  setDates4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setDates"#) -}
7df9cbac0eb2d1bb10e3c15daac96ae6
  setMeta :: Flickr.Types.PhotoID
             -> Flickr.Types.Title
             -> Flickr.Types.Description
             -> Flickr.Monad.FM ()
    {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.Title
                     w2 :: Flickr.Types.Description ->
                   case Flickr.Photos.$wsetMeta w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
0dad4c5d9dd4447e3e9a1c0032fdc7ff
  setMeta1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "description"#) -}
ae57973e27091265e4984a98a1eadf2b
  setMeta2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "title"#) -}
5a122caa0c6cf17c8c3509a51b188e67
  setMeta3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setMeta"#) -}
2fb3baa95954841f090c2f17f792b952
  setPerms :: Flickr.Types.PhotoID
              -> Flickr.Types.Permissions
              -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U(A,1*U,1*U,1*U,1*U(U),1*U(U))>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.Permissions ->
                   case Flickr.Photos.$wsetPerms w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
163e9ae28f8d3eb98313a020950fa77b
  setPerms1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "perm_addmeta"#) -}
c587ac1e12ddd6f9945b0e4f3205ec19
  setPerms2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "perm_comment"#) -}
6af8f85859953472110418d50b68902f
  setPerms3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "is_family"#) -}
1bfbd2befd61bfbe70f56583c352eeec
  setPerms4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "is_friend"#) -}
845943b92ed06dc54e0d60c0e2e6d389
  setPerms5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "is_public"#) -}
4691f529084469d1e20e52f103d8e5fd
  setPerms6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setPerms"#) -}
b6bfa00f032d177f2ac0f01f57630ca0
  setSafetyLevel :: Flickr.Types.PhotoID
                    -> Data.Maybe.Maybe Flickr.Types.Safety
                    -> Data.Maybe.Maybe GHC.Types.Bool
                    -> Flickr.Monad.FM ()
    {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.Safety
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool ->
                   case Flickr.Photos.$wsetSafetyLevel w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
d24007ebeaea27598c81c3151e9990bc
  setSafetyLevel1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "safety_level"#) -}
141b3e8f0c52b761501f838236207973
  setSafetyLevel2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "hidden"#) -}
f74222826b6a6b74dd31e1001235cdee
  setSafetyLevel3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setSafetyLevel"#) -}
9e878ca5a6fc392e20f39c18ce19e7bc
  setTags :: Flickr.Types.PhotoID
             -> [Flickr.Types.Tag]
             -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Photos.$wsetTags w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
37dfa885e7932b0e7d31c83656df69d1
  setTags1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setTags"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

