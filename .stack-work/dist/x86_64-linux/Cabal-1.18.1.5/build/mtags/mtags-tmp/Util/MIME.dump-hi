
==================== FINAL INTERFACE ====================
2016-03-01 11:43:17.285889 UTC

interface main:Util.MIME 7084
  interface hash: 1eec4f90bab8feeba306cc7d4e2ff47f
  ABI hash: aa41eea7ee329c84da38bfb290cc6f1b
  export-list hash: 0c76e8424382ddac49c0d6dd072c6495
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1fc04d511fb4e76176babab5fc2a128b
  used TH splices: False
  where
exports:
  Util.MIME.crnl
  Util.MIME.mixedType
  Util.MIME.showDispParam
  Util.MIME.showDispType
  Util.MIME.showDisposition
  Util.MIME.showMIMEContent
  Util.MIME.showMIMEValue
  Util.MIME.uploadFile
  Util.MIME.uploadFileType
module dependencies:
package dependencies: array-0.5.0.0 base* deepseq-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 old-locale-1.0.0.6 random-1.1* time-1.4.2
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         random-1.1:System.Random time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
family instance modules: base:Data.Either base:Data.Monoid
                         base:Data.Type.Equality base:GHC.Exts base:GHC.Generics
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.IO.Handle.FD d087d2d69d4ab9b9d62d5c85160d89a3
import  -/  base:GHC.IO.Handle.Text 69f1e461016fd70cdf6f3676c04d367a
import  -/  base:GHC.IO.IOMode bb3a450f895ad11f6fb52ce1a04d655a
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Num 5e7786970581cacc802bf850d458a30b
import  -/  base:GHC.Real 35345ccdfd774068d1f4418df87bd3c9
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Numeric fd38becb40ff3d01df4ca3af1a1cc583
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  integer-gmp:GHC.Integer.Type da75f4177e120bcf6b860afbcb9b3385
import  -/  mime-0.3.4:Codec.MIME.Type 1e5e61c4d84b261e20350318b8d4811d
import  -/  random-1.1:System.Random d593dbfc264107ac583a2be2ccc23906
996036ad72ce129d0e282f201d62393a
  $wshowDispParam :: Codec.MIME.Type.DispParam
                     -> (# GHC.Types.Char, [GHC.Types.Char] #)
    {- Arity: 1, Strictness: <L,1*U> -}
392e80d48a82df2c6bd57ad0ff02a747
  $wshowDisposition :: Codec.MIME.Type.DispType
                       -> [Codec.MIME.Type.DispParam]
                       -> [GHC.Types.Char]
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ ww :: Codec.MIME.Type.DispType
                     ww1 :: [Codec.MIME.Type.DispParam] ->
                   case ww of wild {
                     Codec.MIME.Type.DispInline
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Util.MIME.showDispType3
                          (Util.MIME.showDisposition_go ww1)
                     Codec.MIME.Type.DispAttachment
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Util.MIME.showDispType2
                          (Util.MIME.showDisposition_go ww1)
                     Codec.MIME.Type.DispFormData
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Util.MIME.showDispType1
                          (Util.MIME.showDisposition_go ww1)
                     Codec.MIME.Type.DispOther x
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          x
                          (Util.MIME.showDisposition_go ww1) }) -}
18ae635b3ccbe4c72b28aaf82638f258
  $wshowMIMEValue :: GHC.Base.String
                     -> Codec.MIME.Type.MIMEValue
                     -> (# [(GHC.Base.String, GHC.Base.String)], GHC.Base.String #)
    {- Arity: 2, Strictness: <L,1*U><L,U(U(U,U),1*U,1*U,U,1*U)>,
       Unfolding: (\ w :: GHC.Base.String
                     w1 :: Codec.MIME.Type.MIMEValue ->
                   (# case w1 of wild { Codec.MIME.Type.MIMEValue ds1 ds2 ds3 ds4 ds5 ->
                      case ds5 of wild1 {
                        GHC.Types.False
                        -> case ds2 of wild2 {
                             Data.Maybe.Nothing -> ds4
                             Data.Maybe.Just d
                             -> GHC.Types.:
                                  @ ([GHC.Types.Char], GHC.Base.String)
                                  (Util.MIME.showMIMEValue2, Util.MIME.showDisposition d)
                                  ds4 }
                        GHC.Types.True
                        -> GHC.Types.:
                             @ ([GHC.Types.Char], GHC.Base.String)
                             (Util.MIME.showMIMEValue1, Codec.MIME.Type.showType ds1)
                             (case ds2 of wild2 {
                                Data.Maybe.Nothing -> ds4
                                Data.Maybe.Just d
                                -> GHC.Types.:
                                     @ ([GHC.Types.Char], GHC.Base.String)
                                     (Util.MIME.showMIMEValue2, Util.MIME.showDisposition d)
                                     ds4 }) } },
                      GHC.Base.++
                        @ GHC.Types.Char
                        Util.MIME.crnl
                        (case w1 of wild { Codec.MIME.Type.MIMEValue ds1 ds2 ds3 ds4 ds5 ->
                         Util.MIME.showMIMEContent
                           (case ds1 of wild1 { Codec.MIME.Type.Type ds6 ds7 ->
                            case ds6 of wild2 {
                              DEFAULT -> w
                              Codec.MIME.Type.Multipart ds
                              -> case GHC.List.lookup
                                        @ [GHC.Types.Char]
                                        @ GHC.Base.String
                                        GHC.Classes.$fEq[]_$s$fEq[]
                                        Util.MIME.mixedType2
                                        ds7 of wild3 {
                                   Data.Maybe.Nothing -> w
                                   Data.Maybe.Just x
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Util.MIME.crnl
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           Util.MIME.mixedType_x
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Util.MIME.mixedType_x
                                              x)) } } })
                           ds3 }) #)) -}
cfde07fffc481dcc121c8bdec73489c3
  crnl :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "\r"#) -}
2174d82f26646a17e476837a857a0029
  mixedType :: GHC.Types.IO
                   (Codec.MIME.Type.MIMEValue, GHC.Base.String)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (Util.MIME.mixedType1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(Codec.MIME.Type.MIMEValue, GHC.Base.String)>_R))) -}
ae0507d8032459ab0a55d9c70628bbf3
  mixedType1 :: GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                      (Codec.MIME.Type.MIMEValue, GHC.Base.String) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case System.Random.$fRandomInteger3
                          Util.MIME.mixedType4
                          eta of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      let {
                        boundary :: [GHC.Types.Char]
                        = let {
                            n :: [GHC.Types.Char]
                            = Numeric.$wshowIntAtBase
                                @ GHC.Integer.Type.Integer
                                GHC.Num.$fNumInteger
                                GHC.Integer.Type.$fOrdInteger
                                GHC.Real.$fNumRatio_$s$cfromInteger
                                GHC.Real.$fIntegralInteger_$cquotRem
                                GHC.Real.$fIntegralInteger_$ctoInteger
                                GHC.Show.$fShowInteger
                                Numeric.showHex7
                                GHC.Show.intToDigit
                                ipv1
                                (GHC.Types.[] @ GHC.Types.Char)
                          } in
                          let {
                            lvl7 :: [GHC.Types.Char]
                            = GHC.Types.: @ GHC.Types.Char Util.MIME.mixedType_x n
                          } in
                          letrec {
                            xs :: GHC.Prim.Int# -> [GHC.Types.Char]
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ m :: GHC.Prim.Int# ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# m 1) of wild {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     Util.MIME.mixedType_x
                                     (xs (GHC.Prim.-# m 1))
                                GHC.Types.True -> lvl7 }
                          } in
                          xs 30
                      } in
                      (Codec.MIME.Type.MIMEValue
                         (Codec.MIME.Type.Type
                            Util.MIME.mixedType3
                            (GHC.Types.:
                               @ (GHC.Base.String, GHC.Base.String)
                               (Util.MIME.mixedType2, boundary)
                               (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))))
                         (Data.Maybe.Nothing @ Codec.MIME.Type.Disposition)
                         Codec.MIME.Type.nullMIMEValue1
                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                         GHC.Types.True,
                       boundary) #) }) -}
b9a1a92506ccb91a8623c5f8fe3cec83
  mixedType2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "boundary"#) -}
0e01b12486d62554c22da5e614d73ef4
  mixedType3 :: Codec.MIME.Type.MIMEType
    {- HasNoCafRefs,
       Unfolding: (Codec.MIME.Type.Multipart Codec.MIME.Type.Mixed) -}
76f10d48df5d73cf2f87e2d092e1dc51
  mixedType4 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    {- Unfolding: ((Util.MIME.mixedType_low, Util.MIME.mixedType5)) -}
fadf82ea6a96b96b7013fc2fd031eb3e
  mixedType5 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.timesInteger
                     Util.MIME.mixedType_low
                     Util.MIME.mixedType_low) -}
f39deff958bbdff6bbac3034c05b8be9
  mixedType6 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 1) -}
90c418032aa76c41d96dd0f4b1ffc36a
  mixedType7 :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Real.^_$s^2
                     Util.MIME.mixedType9
                     Util.MIME.mixedType8) -}
461ac8f14c4cb391d24f326db05e510a
  mixedType8 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 32) -}
66c82e4659240181db59f7a19c9c87c7
  mixedType9 :: GHC.Integer.Type.Integer
    {- Unfolding: (__integer 2) -}
2c77bab0a41736bb26f3efff7f8aa226
  mixedType_low :: GHC.Integer.Type.Integer
    {- Unfolding: (GHC.Integer.Type.minusInteger
                     Util.MIME.mixedType7
                     Util.MIME.mixedType6) -}
52526d02848173f5f12e9afee847abba
  mixedType_x :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '-') -}
49ccf98304ed029380298b9cc1cfabbb
  showDispParam :: Codec.MIME.Type.DispParam -> GHC.Base.String
    {- Arity: 1, Strictness: <L,1*U>m2, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Codec.MIME.Type.DispParam ->
                   case Util.MIME.$wshowDispParam w of ww { (#,#) ww1 ww2 ->
                   GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
d857322b31f294e8137fef1962e032c4
  showDispType :: Codec.MIME.Type.DispType -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ dt :: Codec.MIME.Type.DispType ->
                   case dt of wild {
                     Codec.MIME.Type.DispInline -> Util.MIME.showDispType3
                     Codec.MIME.Type.DispAttachment -> Util.MIME.showDispType2
                     Codec.MIME.Type.DispFormData -> Util.MIME.showDispType1
                     Codec.MIME.Type.DispOther x -> x }) -}
2978b35c026baa91c31e5fdd3739c3b6
  showDispType1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "form-data"#) -}
655ed9b5cef427fc487ade3cb44ee2b0
  showDispType2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "attachment"#) -}
3ff6d68f6015f53d3abc42ba1e211cff
  showDispType3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "inline"#) -}
a514739d34266e426ae320ad2cfae256
  showDisposition :: Codec.MIME.Type.Disposition -> GHC.Base.String
    {- Arity: 1, Strictness: <S(SL),U(1*U,1*U)>, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Codec.MIME.Type.Disposition ->
                   case w of ww { Codec.MIME.Type.Disposition ww1 ww2 ->
                   Util.MIME.$wshowDisposition ww1 ww2 }) -}
dd35d7af6c75bfdd5459c294f3d46323
  showDisposition_go :: [Codec.MIME.Type.DispParam]
                        -> [GHC.Types.Char]
    {- Arity: 1, Strictness: <S,1*U> -}
6d8592a20d2a81ac41e037ec0bef4c47
  showMIMEContent :: GHC.Base.String
                     -> Codec.MIME.Type.MIMEContent
                     -> GHC.Base.String
    {- Arity: 2, Strictness: <L,U><S,1*U> -}
f6e874414e3864034723e6bc483cd7c6
  showMIMEValue :: GHC.Base.String
                   -> Codec.MIME.Type.MIMEValue
                   -> ([(GHC.Base.String, GHC.Base.String)], GHC.Base.String)
    {- Arity: 2, Strictness: <L,1*U><L,U(U(U,U),1*U,1*U,U,1*U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: GHC.Base.String w1 :: Codec.MIME.Type.MIMEValue ->
                   case Util.MIME.$wshowMIMEValue w w1 of ww { (#,#) ww1 ww2 ->
                   (ww1, ww2) }) -}
6328bee4caa54cec88e39b0921896dd8
  showMIMEValue1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Content-Type"#) -}
0e82d44c7f3ec0f265be5b9bc051222d
  showMIMEValue2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Content-Disposition"#) -}
35a910a3f867b4908f63edea860394b5
  uploadFile :: GHC.Base.String
                -> GHC.IO.FilePath
                -> GHC.Types.IO Codec.MIME.Type.MIMEValue
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (Util.MIME.uploadFile1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <GHC.IO.FilePath>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <Codec.MIME.Type.MIMEValue>_R))) -}
15d7e69185c8ea953cd96afdea6ab99e
  uploadFile1 :: GHC.Base.String
                 -> GHC.IO.FilePath
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                       Codec.MIME.Type.MIMEValue #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ nm :: GHC.Base.String
                     fp :: GHC.IO.FilePath
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.FD.openBinaryFile1
                          fp
                          GHC.IO.IOMode.ReadMode
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case GHC.IO.Handle.Text.hGetContents1
                          ipv1
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   (# ipv2,
                      Codec.MIME.Type.MIMEValue
                        Util.MIME.uploadFile6
                        (Data.Maybe.Just
                           @ Codec.MIME.Type.Disposition
                           (Codec.MIME.Type.Disposition
                              Codec.MIME.Type.DispFormData
                              (GHC.Types.:
                                 @ Codec.MIME.Type.DispParam
                                 (Codec.MIME.Type.Name nm)
                                 (GHC.Types.:
                                    @ Codec.MIME.Type.DispParam
                                    (Codec.MIME.Type.Filename fp)
                                    (GHC.Types.[] @ Codec.MIME.Type.DispParam)))))
                        (Codec.MIME.Type.Single ipv3)
                        (GHC.Types.:
                           @ (GHC.Base.String, GHC.Base.String)
                           Util.MIME.uploadFile3
                           (GHC.Types.:
                              @ (GHC.Base.String, GHC.Base.String)
                              (Util.MIME.uploadFile2,
                               case GHC.List.$wlenAcc @ GHC.Types.Char ipv3 0 of ww { DEFAULT ->
                               case GHC.Show.$wshowSignedInt
                                      0
                                      ww
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                              (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))))
                        GHC.Types.True #) } }) -}
75a05ff568d51e670cc557187c08cf8d
  uploadFile2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Content-Length"#) -}
3bd5c91c18c930353143619cd4dba4b5
  uploadFile3 :: ([GHC.Types.Char], [GHC.Types.Char])
    {- Strictness: m,
       Unfolding: ((Util.MIME.uploadFile5, Util.MIME.uploadFile4)) -}
38e8733522963c71f7695fb76de2f7ee
  uploadFile4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "binary"#) -}
6e502ad36823f728fb13d1e8003ca69f
  uploadFile5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "Content-Transfer-Encoding"#) -}
100630f33710ec393b294531859d269d
  uploadFile6 :: Codec.MIME.Type.Type
    {- Strictness: m,
       Unfolding: (Codec.MIME.Type.Type
                     Util.MIME.uploadFile7
                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
68f18714b469437df763b7209a154cbc
  uploadFile7 :: Codec.MIME.Type.MIMEType
    {- Strictness: m7,
       Unfolding: (Codec.MIME.Type.Text Util.MIME.uploadFile8) -}
fd89039e3ed9f2d6847c86202b4045b7
  uploadFile8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "plain"#) -}
fb4d09118ba52e2383dcfbd7e165b9e2
  uploadFileType :: GHC.Base.String -> Codec.MIME.Type.Type
    {- Arity: 1, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ bou :: GHC.Base.String ->
                   Codec.MIME.Type.Type
                     Util.MIME.uploadFileType1
                     (GHC.Types.:
                        @ (GHC.Base.String, GHC.Base.String)
                        (Util.MIME.mixedType2, bou)
                        (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))) -}
f042723a6bf8ef23d2da04fa482ebe54
  uploadFileType1 :: Codec.MIME.Type.MIMEType
    {- HasNoCafRefs, Strictness: m6,
       Unfolding: (Codec.MIME.Type.Multipart Codec.MIME.Type.FormData) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe-inferred
require own pkg trusted: False

