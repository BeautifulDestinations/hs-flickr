
==================== FINAL INTERFACE ====================
2016-03-01 11:43:19.834619 UTC

interface main:Flickr.Auth 7084
  interface hash: eb588af653f3fe59552a36a00daf70da
  ABI hash: 5535e53d51c13c6e025bf0af593b215a
  export-list hash: 66843c5cbd7b32bacb8a0c150a90a3c6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: daf7589b64663df4be8eafeb44b6b3a7
  used TH splices: False
  where
exports:
  Flickr.Auth.checkToken
  Flickr.Auth.getFrob
  Flickr.Auth.getFullToken
  Flickr.Auth.getToken
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 04dcf41add9dda483c4e1216c1e4d955
  exports: a48c768163b3524ddb6a3c7780b5d55c
  FM 91641286fd5a4035d1caa1713877af9c
  flickCall 355bbd214dbc82d83c42c523bdee3999
  flickTranslate 0d93a9ca510de3c49d118e1a2c6aeefb
  signedMethod f36aa67da0eb51d4b90159a3157f52e8
import  -/  Flickr.Types 653ba19fff32ac001f790083a5a45199
  exports: 16c0f78ccd56a3138dea1b355b10ed13
  AuthFrob cb6beed6e349f8ad65dae04b689b1fe7
  AuthMiniToken d6ee4c18f1c56cf0983c8f87d79ef49d
  AuthToken 6b85d7739d578fa12461079abcac3b8a
  AuthTokenValue 143168c001ca0edaf8f06af07350fec9
  aFrob f4dde08fd4d6ed66fa61293397f26e15
import  -/  Flickr.Types.Import 9b5e87367f5380e094973b827aa6043c
  exports: 305bec7abfd17862ca1e01be2c748f5a
  toAuthFrob 99975d33bf00ee28a7f6a843a064d95f
  toAuthToken 34139952d5e3196983e30023f31c0991
e36d1d96301ae5e0615adb40d8c0ee1d
  $wcheckToken :: Flickr.Types.AuthTokenValue
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.AuthToken #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.AuthTokenValue ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Auth.checkToken2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Auth.checkToken1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  ds8
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.AuthToken
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltAuthToken ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.AuthToken
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.AuthToken>_R)) #) }) -}
8130e243849aba2adebaeac5ad4ff74e
  $wgetFullToken :: Flickr.Types.AuthMiniToken
                    -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.AuthToken #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.AuthMiniToken ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Auth.getFullToken2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Auth.getFullToken1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  ds8
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.AuthToken
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltAuthToken ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.AuthToken
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.AuthToken>_R)) #) }) -}
cdf7da0b6f968b4f32bd386135f3cd32
  $wgetToken :: Flickr.Types.AuthFrob
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.AuthToken #)
    {- Arity: 1, Strictness: <L,1*U(1*U)>,
       Unfolding: (\ w :: Flickr.Types.AuthFrob ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Auth.getToken2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Auth.getToken1, Flickr.Types.aFrob w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  ds8
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.AuthToken
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltAuthToken ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.AuthToken
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.AuthToken>_R)) #) }) -}
7a7298ff01018acd720ab75052f98c63
  checkToken :: Flickr.Types.AuthTokenValue
                -> Flickr.Monad.FM Flickr.Types.AuthToken
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.AuthTokenValue ->
                   case Flickr.Auth.$wcheckToken w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.AuthToken ww1 }) -}
e94836908c02e27f460081a3f62bec20
  checkToken1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "auth_token"#) -}
ce03d749a09324db669332a05666f2fc
  checkToken2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.checkToken"#) -}
b62f6be5bca28d7882e2455268f46bb3
  getFrob :: Flickr.Monad.FM Flickr.Types.AuthFrob
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Auth.getFrob1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ Flickr.Types.AuthFrob
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 ds8
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Flickr.Types.AuthFrob
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                           let {
                             $j :: GHC.Prim.Void#
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Flickr.Types.AuthFrob #)
                               {- Arity: 1, Strictness: <B,A>b -}
                             = \ w :: GHC.Prim.Void# ->
                               GHC.Prim.raiseIO#
                                 @ GHC.Exception.SomeException
                                 @ Flickr.Types.AuthFrob
                                 (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                    (Flickr.Monad.FlickErr
                                       Flickr.Monad.checkResponse14
                                       Flickr.Monad.FlickParseError
                                       (GHC.Types.[] @ GHC.Types.Char)
                                       (Data.Maybe.Nothing @ GHC.Base.String)
                                       (case GHC.List.$wlenAcc
                                               @ GHC.Types.Char
                                               ipv1
                                               0 of ww11 { DEFAULT ->
                                        case GHC.Show.$wshowSignedInt
                                               0
                                               ww11
                                               (GHC.Types.[]
                                                  @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                        GHC.Base.++
                                          @ GHC.Types.Char
                                          (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             Flickr.Monad.parseDoc1
                                             ipv1) } })))
                                 ipv
                           } in
                           case GHC.Classes.$fOrd[]_$s$ccompare
                                  ww8
                                  Flickr.Types.Import.eltAuthFrob1 of wild1 {
                             DEFAULT -> $j GHC.Prim.void#
                             GHC.Types.EQ
                             -> case ww9 of wild2 {
                                  Data.Maybe.Nothing
                                  -> case ww10 of wild3 {
                                       Data.Maybe.Nothing
                                       -> (# ipv,
                                             Flickr.Types.AuthFrob
                                               (Text.XML.Light.Proc.$wstrContent ww5) #)
                                       Data.Maybe.Just a2 -> $j GHC.Prim.void# }
                                  Data.Maybe.Just ipv2 -> $j GHC.Prim.void# } } } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.AuthFrob>_R)) }) -}
1fe452f4901f2a679732123ac610ef70
  getFrob1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.getFrob"#) -}
094ec05f77762cfdd7431f1a075b8552
  getFullToken :: Flickr.Types.AuthMiniToken
                  -> Flickr.Monad.FM Flickr.Types.AuthToken
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.AuthMiniToken ->
                   case Flickr.Auth.$wgetFullToken w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.AuthToken ww1 }) -}
85d474c732e6bb67370f2bf423b74051
  getFullToken1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "mini_token"#) -}
02acfe3817f9f645225feff6cb069875
  getFullToken2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.getFullToken"#) -}
06bf74c058a087e972a89928c368f66a
  getToken :: Flickr.Types.AuthFrob
              -> Flickr.Monad.FM Flickr.Types.AuthToken
    {- Arity: 1, Strictness: <L,1*U(1*U)>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.AuthFrob ->
                   case Flickr.Auth.$wgetToken w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.AuthToken ww1 }) -}
46c1f4b8d8db680d3745c31cd045749a
  getToken1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "frob"#) -}
cd6eec366fc5c8a25dda15299a0ee15d
  getToken2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.getToken"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

