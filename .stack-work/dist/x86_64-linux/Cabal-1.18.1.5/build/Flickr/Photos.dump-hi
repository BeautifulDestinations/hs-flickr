
==================== FINAL INTERFACE ====================
2016-03-01 11:43:08.606786 UTC

interface flickr-0.3.3:Flickr.Photos 7084
  interface hash: f4577f4612f4ead7b3dca3a2c2c48a74
  ABI hash: e44bd7c3727c4e0f839cc330ed4e13e2
  export-list hash: 128d769d8f7f17acda32c5a1375d2f9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Photos.addTags
  Flickr.Photos.delete
  Flickr.Photos.getAllContexts
  Flickr.Photos.getContactsPhotos
  Flickr.Photos.getContactsPublicPhotos
  Flickr.Photos.getContext
  Flickr.Photos.getCounts
  Flickr.Photos.getExif
  Flickr.Photos.getFavorites
  Flickr.Photos.getInfo
  Flickr.Photos.getNotInSet
  Flickr.Photos.getPerms
  Flickr.Photos.getPhotoURL
  Flickr.Photos.getRecent
  Flickr.Photos.getSizes
  Flickr.Photos.getUntagged
  Flickr.Photos.getWithGeoData
  Flickr.Photos.getWithoutGeoData
  Flickr.Photos.nullSearchConstraints
  Flickr.Photos.recentlyUpdated
  Flickr.Photos.removeTag
  Flickr.Photos.search
  Flickr.Photos.setContentType
  Flickr.Photos.setDates
  Flickr.Photos.setMeta
  Flickr.Photos.setPerms
  Flickr.Photos.setSafetyLevel
  Flickr.Photos.setTags
  Flickr.Photos.SearchConstraints{Flickr.Photos.SearchConstraints Flickr.Photos.s_accuracy Flickr.Photos.s_bbox Flickr.Photos.s_contacts Flickr.Photos.s_content_type Flickr.Photos.s_group_id Flickr.Photos.s_has_geo Flickr.Photos.s_is_commons Flickr.Photos.s_lat Flickr.Photos.s_license Flickr.Photos.s_lon Flickr.Photos.s_machine_tag_mode Flickr.Photos.s_machine_tags Flickr.Photos.s_media Flickr.Photos.s_place_id Flickr.Photos.s_privacy Flickr.Photos.s_radius Flickr.Photos.s_radius_units Flickr.Photos.s_safe_search Flickr.Photos.s_sort Flickr.Photos.s_tag_mode Flickr.Photos.s_tags Flickr.Photos.s_taken Flickr.Photos.s_text Flickr.Photos.s_upload Flickr.Photos.s_woe_id}
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Enum 21572a7ecadc01c858f3321ea577e161
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall_ a4b037ad88ec2630c5c3c4b581c42182
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  lsArg c3c9ceb6cf2fc5ee33bd67fb297f08ca
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
  parseDoc ebc82270611937ab5ebfce244f09c14d
  postMethod b894fdcbd5b83d21dfa037dd8bba6dcf
  withDeletePerm c84b476e88a18f6822791431226ee9a5
  withReadPerm 6aa3446da9d22d6d7f84a29bfdacb8f8
  withWritePerm 73ff2a63e3ab148ae336fe33c2f18317
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Accuracy 8bd4ee12142f445991e03afe08347ceb
  BoundingBox 22f10c6bb413e86c509c9932cddfde49
  ContentType c95f74205cfdcf8a8a1f92c75fbaaa57
  Date e7986bf164b0885fcbe9146747083d6a
  DateGranularity 436cff5365d686fd8c82d04e98657449
  DateInterval 4927c1b8cfa401f9f8098cba09bc3f83
  DateString a427169cec8ea5149274e8471b82a83a
  Decimal 77a4e3d1918bd296f4fe59e3d2154e4f
  Description 0f09844aba820db62e5a35c62e31daf2
  EXIF a580ac20bd7586db9196cb2dd15f8216
  GroupID 814d222d53ec49fe860073bc3ecfc0b2
  LicenseID 0c87926020657d21f262a1fe20a9050d
  MediaType 99f5356ae5366fc74c6193432f647e6a
  Permissions a4059c629f69c00c0f9f59f337a7865a
  Photo 2deca11afc0a961b40b35bcb8cfdb204
  PhotoContext b13240513008c5723d6a1a8824274a9d
  PhotoCount b670f83ec9ce63fe824032084554eebd
  PhotoDetails 341128c749a7d878c444c56c8e108dc3
  PhotoID afad6d42cded8baa9088f416d88f77bf
  PhotoInfo 80f14b9fec26e6389cc8843e842ac6d9
  PhotoPool 9d3b50b2ab2da6ab4a0fcda2964d57e7
  Photoset ded0f4fbb84c8010c83e3ae825aa5eda
  PlaceID 33fbdda9f0861e717e1d3521228b5a6d
  Privacy fd81207a7f196a1180a47b91a275a3b7
  Safety 3e889d9e2f824714d8a9cd713c30a35c
  SizeDetails 033cc30024d8161e2c60d3ce93617d70
  SortKey 141400c0fa0b73369469081965f4ad40
  Tag 594aea30f29023f654431318539b9dd4
  Title 59e2ae57b02071f479ef98256eda64dc
  URLString 32f844fecb624b165352138e161a92d9
  User 5f85fd7c8b4696b56ab0c1231a6049c3
  UserID c293dabe8f0c6a26ce6f08bd072224fe
  WhereOnEarthID bc4b53942522074527ee64fdb076b609
  permAddMetaLevel 6a3cd08bba38117ce9526503de0ac13e
  permCommentLevel 4169c918c87b707df7af79db86d202ea
  permIsFamily 52849efba9643dd0a6f0cc073d917aba
  permIsFriend c7efff80d8215a30c5f90b403c3f9983
  permIsPublic bd7646914c2052191473085312967bfd
  photoDetailsPhoto fe4e1ada259a8aa3a070261791dd0339
  photoDetailsURLs e6803c1dbe789f2d66bad76fc61dc5e8
  photoURL ed75bc9caf9f7fcf5fee0ca2b842fe74
  showContentType 6c992732c91b24b721d6a74d55e179c2
  showSafety a68f9cab6dfea46399d3b666fce8ff77
  urlDetailsURL 997761881484a16487f2e567f32d6497
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  eltPhotoPool 18979e1f2c326eb53fa200670607ad40
  eltPhotoset 3da12c46560909475fb24b51aa4eba65
  eltUser 995cecd72f82cb21a8b10682fa2e7cfb
  toEXIFList 36cc908db9fe2140d07a0fb184e07472
  toPermissions af698f6c24cadb18e33753c40f47a0a2
  toPhotoCountList 2188afb7751002f14d74b17e65212059
  toPhotoDetails 885df7bf9202c48596c54ed7d0dfd6be
  toPhotoList 35e814ac6bfec3a1de4ef5e719304676
  toPhotoPair 16f81fc5c352e2bded0124d7ddf5163a
  toSizeList 33205fe7173c80fb4fa6c5b3cd240a16
import  -/  Flickr.Utils 68facf93de1ef1e4c93b470398fe5414
  exports: 7ebed314ffe0fcb0fea5a3de318e595b
  nsName 13a53574b6a1b9c1497f6aa27508e98b
  pAttr 6e01f0483c8f6392578f85f66019745f
  showBool 3b96ac61efe940e49f0d6aaed8731c13
import  -/  xml-1.3.14:Text.XML.Light.Proc 277b74c044fa89f0db17455b56117130
c0d784a4e124ff2a36f4b1fe2ff7763b
  $waddTags :: Flickr.Types.PhotoID
               -> [Flickr.Types.Tag]
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.addTags3
                          (case w1 of wild {
                             []
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
58e6f4f2d7ffe22c85733660c143d458
  $wgetAllContexts :: Flickr.Types.PhotoID
                      -> (# Flickr.Monad.FMEnv
                            -> GHC.Types.IO
                                   ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool]) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getAllContexts5
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               (case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                                Data.Maybe.mapMaybe
                                  @ Text.XML.Light.Types.Element
                                  @ Flickr.Types.Photoset
                                  Flickr.Types.Import.eltPhotoset
                                  (Text.XML.Light.Proc.$wfindChildren
                                     Flickr.Photos.getAllContexts3
                                     ww5) },
                                case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                                Data.Maybe.mapMaybe
                                  @ Text.XML.Light.Types.Element
                                  @ Flickr.Types.PhotoPool
                                  Flickr.Types.Import.eltPhotoPool
                                  (Text.XML.Light.Proc.$wfindChildren
                                     Flickr.Photos.getAllContexts1
                                     ww5) }) #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <([Flickr.Types.Photoset],
                                       [Flickr.Types.PhotoPool])>_R)) #) }) -}
3b15f6c9803d5fd8dfa42ade3d6cb6f7
  $wgetContactsPhotos :: Data.Maybe.Maybe GHC.Types.Int
                         -> Data.Maybe.Maybe GHC.Types.Bool
                         -> Data.Maybe.Maybe GHC.Types.Bool
                         -> Data.Maybe.Maybe GHC.Types.Bool
                         -> [Flickr.Types.PhotoInfo]
                         -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U> -}
cd51b7f672f1a2d62a04b1a69de62e47
  $wgetContactsPublicPhotos :: Data.Maybe.Maybe GHC.Types.Int
                               -> Data.Maybe.Maybe GHC.Types.Bool
                               -> Data.Maybe.Maybe GHC.Types.Bool
                               -> Data.Maybe.Maybe GHC.Types.Bool
                               -> [Flickr.Types.PhotoInfo]
                               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U> -}
32b2c05ff72e53f539076263c97c4819
  $wgetContext :: Flickr.Types.PhotoID
                  -> (# Flickr.Monad.FMEnv
                        -> GHC.Types.IO (Flickr.Types.Photo, Flickr.Types.Photo) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getContext1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.Photo, Flickr.Types.Photo)
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPhotoPair ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.Photo, Flickr.Types.Photo)
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.Photo, Flickr.Types.Photo)>_R)) #) }) -}
642df9686e1f8755bcab6c771a607f5b
  $wgetCounts :: [Flickr.Types.DateString]
                 -> [Flickr.Types.DateString]
                 -> (# Flickr.Monad.FMEnv
                       -> GHC.Types.IO [Flickr.Types.PhotoCount] #)
    {- Arity: 2, Strictness: <L,1*U><L,1*U> -}
8f232c6830aaef7f7108790c322a8ad7
  $wgetExif :: Flickr.Types.PhotoID
               -> Data.Maybe.Maybe GHC.Base.String
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.EXIF] #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getExif2
                          (case w1 of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getExif1, a1)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.EXIF]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               Data.Maybe.mapMaybe
                                 @ Text.XML.Light.Types.Element
                                 @ Flickr.Types.EXIF
                                 Flickr.Types.Import.eltEXIF
                                 (Flickr.Utils.pNodes
                                    Flickr.Types.Import.eltEXIF12
                                    (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.EXIF]>_R)) #) }) -}
859f97d9f9a44cf8e9cc2daa0f7c8c67
  $wgetFavorites :: Flickr.Types.PhotoID
                    -> (# Flickr.Monad.FMEnv
                          -> GHC.Types.IO [(Flickr.Types.User, Flickr.Types.Date)] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getFavorites3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [(Flickr.Types.User, GHC.Base.String)]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Photos.getFavorites_go
                                   (Text.XML.Light.Proc.$wfindChildren
                                      Flickr.Photos.getFavorites1
                                      ww5) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [(Flickr.Types.User, GHC.Base.String)]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[(Flickr.Types.User, GHC.Base.String)]>_R)) #) }) -}
18f750dc80121d9eaf0116668d278f42
  $wgetInfo :: Flickr.Types.PhotoID
               -> Data.Maybe.Maybe GHC.Base.String
               -> (# Flickr.Monad.FMEnv
                     -> GHC.Types.IO Flickr.Types.PhotoDetails #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getInfo1
                          (case w1 of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getExif1, a1)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.PhotoDetails
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPhotoDetails ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.PhotoDetails
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.PhotoDetails>_R)) #) }) -}
69a3bf5ed4f46a418e292698ffba952a
  $wgetNotInSet :: Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.Privacy
                   -> Data.Maybe.Maybe Flickr.Types.MediaType
                   -> [Flickr.Types.PhotoInfo]
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U> -}
afcfc69f413cceee941ef90be14a0549
  $wgetPerms :: Flickr.Types.PhotoID
                -> (# Flickr.Monad.FMEnv
                      -> GHC.Types.IO Flickr.Types.Permissions #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getPerms1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.Permissions
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPermissions ww4 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.Permissions
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.Permissions>_R)) #) }) -}
c24afc15e07eebdc7746d65fe9da9a9d
  $wgetPhotoURL :: Data.Maybe.Maybe Flickr.Types.URLString
                   -> [Flickr.Types.URLDetails]
                   -> Flickr.Types.URLString
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ ww :: Data.Maybe.Maybe Flickr.Types.URLString
                     ww1 :: [Flickr.Types.URLDetails] ->
                   case ww of wild {
                     Data.Maybe.Nothing
                     -> case ww1 of wild1 {
                          [] -> Flickr.Photos.getPhotoURL1
                          : u ds -> Flickr.Types.urlDetailsURL u }
                     Data.Maybe.Just v
                     -> case v of wild1 {
                          []
                          -> case ww1 of wild2 {
                               [] -> Flickr.Photos.getPhotoURL1
                               : u ds -> Flickr.Types.urlDetailsURL u }
                          : ipv ipv1 -> wild1 } }) -}
1e58ee7e216506674599e94eafb2c68c
  $wgetRecent :: [Flickr.Types.PhotoInfo]
                 -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getRecent2
                          (case GHC.Base.map
                                  @ Flickr.Types.PhotoInfo
                                  @ [GHC.Types.Char]
                                  Flickr.Types.$fShowPhotoInfo_$cshow
                                  w of wild {
                             [] -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getRecent1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> case GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                                   ipv
                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      [Flickr.Types.Photo] #)
                            of {}
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPhotoList
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> case GHC.Prim.raiseIO#
                                        @ GHC.Exception.SomeException
                                        @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                        (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                           (Flickr.Monad.FlickErr
                                              Flickr.Monad.checkResponse14
                                              Flickr.Monad.FlickParseError
                                              (GHC.Types.[] @ GHC.Types.Char)
                                              (Data.Maybe.Nothing @ GHC.Base.String)
                                              (case GHC.List.$wlenAcc
                                                      @ GHC.Types.Char
                                                      ipv1
                                                      0 of ww11 { DEFAULT ->
                                               case GHC.Show.$wshowSignedInt
                                                      0
                                                      ww11
                                                      (GHC.Types.[]
                                                         @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                               GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    Flickr.Monad.parseDoc1
                                                    ipv1) } })))
                                        ipv
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           [Flickr.Types.Photo] #)
                                 of {}
                              Data.Maybe.Just res
                              -> (# ipv, case res of wild2 { (,) ds2 y -> y } #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Photo]>_R)) #) }) -}
4750666161b474f9c66887bdc7bc36bb
  $wgetSizes :: Flickr.Types.PhotoID
                -> (# Flickr.Monad.FMEnv
                      -> GHC.Types.IO [Flickr.Types.SizeDetails] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.getSizes1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.SizeDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               Data.Maybe.mapMaybe
                                 @ Text.XML.Light.Types.Element
                                 @ Flickr.Types.SizeDetails
                                 Flickr.Types.Import.eltSize
                                 (Flickr.Utils.pNodes
                                    Flickr.Types.Import.eltSize7
                                    (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.SizeDetails]>_R)) #) }) -}
c1eec0d0365ac66fc6b667a2ab0f9349
  $wgetUntagged :: Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.DateInterval
                   -> Data.Maybe.Maybe Flickr.Types.Privacy
                   -> Data.Maybe.Maybe Flickr.Types.MediaType
                   -> [Flickr.Types.PhotoInfo]
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U> -}
2908fa111a9ee150052a64b4e71dd96f
  $wgetWithGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                      -> Data.Maybe.Maybe Flickr.Types.DateInterval
                      -> Data.Maybe.Maybe Flickr.Types.Privacy
                      -> Data.Maybe.Maybe Flickr.Types.SortKey
                      -> Data.Maybe.Maybe Flickr.Types.MediaType
                      -> [Flickr.Types.PhotoInfo]
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U> -}
c4c876e118c0ed3e9f580038026f4e3f
  $wgetWithoutGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                         -> Data.Maybe.Maybe Flickr.Types.DateInterval
                         -> Data.Maybe.Maybe Flickr.Types.Privacy
                         -> Data.Maybe.Maybe Flickr.Types.SortKey
                         -> Data.Maybe.Maybe Flickr.Types.MediaType
                         -> [Flickr.Types.PhotoInfo]
                         -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U> -}
6f765a8c7a4152824814881693b6742f
  $wrecentlyUpdated :: Flickr.Types.DateString
                       -> [Flickr.Types.PhotoInfo]
                       -> (# Flickr.Monad.FMEnv
                             -> GHC.Types.IO
                                    (Flickr.Types.PhotoContext, [Flickr.Types.Photo]) #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.DateString
                     w1 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.recentlyUpdated2
                          (case GHC.Base.map
                                  @ Flickr.Types.PhotoInfo
                                  @ [GHC.Types.Char]
                                  Flickr.Types.$fShowPhotoInfo_$cshow
                                  w1 of wild {
                             []
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.recentlyUpdated1, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.getRecent1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.recentlyUpdated1, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPhotoList
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.PhotoContext,
                                       [Flickr.Types.Photo])>_R)) #) }) -}
7d70df349b0f367f4f115fcf674b038d
  $wsearch :: Data.Maybe.Maybe Flickr.Types.UserID
              -> Flickr.Photos.SearchConstraints
              -> [Flickr.Types.PhotoInfo]
              -> (# Flickr.Monad.FMEnv
                    -> GHC.Types.IO
                           (Flickr.Types.PhotoContext, [Flickr.Types.Photo]) #)
    {- Arity: 3,
       Strictness: <L,1*U><L,U(1*U,1*U,1*U,U,U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U> -}
726142b2cadc29cf3babd74802bd30ae
  $wsetContentType :: Flickr.Types.PhotoID
                      -> Flickr.Types.ContentType
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.ContentType ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setContentType2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.setContentType1, Flickr.Types.showContentType w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
e8abe11bcf6c1cc32b2a415331d46e30
  $wsetDates :: Flickr.Types.PhotoID
                -> Data.Maybe.Maybe Flickr.Types.DateString
                -> Data.Maybe.Maybe Flickr.Types.DateString
                -> Data.Maybe.Maybe Flickr.Types.DateGranularity
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w2 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w3 :: Data.Maybe.Maybe Flickr.Types.DateGranularity ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setDates4
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case w3 of wild {
                                 Data.Maybe.Nothing
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.addTags2, w)
                                      (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.setDates3, GHC.Show.$fShowInt_$cshow a1)
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.addTags2, w)
                                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }
                           } in
                           case w1 of wild {
                             Data.Maybe.Nothing
                             -> case w2 of wild1 {
                                  Data.Maybe.Nothing -> xs
                                  Data.Maybe.Just a1
                                  -> GHC.Types.:
                                       @ (GHC.Base.String, GHC.Base.String)
                                       (Flickr.Photos.setDates2, a1)
                                       xs }
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.setDates1, a1)
                                  (case w2 of wild1 {
                                     Data.Maybe.Nothing -> xs
                                     Data.Maybe.Just a2
                                     -> GHC.Types.:
                                          @ (GHC.Base.String, GHC.Base.String)
                                          (Flickr.Photos.setDates2, a2)
                                          xs }) }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
b4f834570f4f1626ac757603d6c5ab5a
  $wsetMeta :: Flickr.Types.PhotoID
               -> Flickr.Types.Title
               -> Flickr.Types.Description
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.Title
                     w2 :: Flickr.Types.Description ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setMeta3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.setMeta2, w1)
                                (GHC.Types.:
                                   @ (GHC.Base.String, GHC.Base.String)
                                   (Flickr.Photos.setMeta1, w2)
                                   (GHC.Types.[]
                                      @ (GHC.Base.String, GHC.Base.String))))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
b6063222bdec0e66f0647c02b30707c7
  $wsetPerms :: Flickr.Types.PhotoID
                -> Flickr.Types.Permissions
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U(A,1*U,1*U,1*U,1*U(U),1*U(U))>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.Permissions ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setPerms6
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.setPerms5,
                                 case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                 case Flickr.Utils.$wshowBool ds2 of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 } })
                                (GHC.Types.:
                                   @ (GHC.Base.String, GHC.Base.String)
                                   (Flickr.Photos.setPerms4,
                                    case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                    case Flickr.Utils.$wshowBool ds3 of ww { (#,#) ww1 ww2 ->
                                    GHC.Types.: @ GHC.Types.Char ww1 ww2 } })
                                   (GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.setPerms3,
                                       case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                       case Flickr.Utils.$wshowBool ds4 of ww { (#,#) ww1 ww2 ->
                                       GHC.Types.: @ GHC.Types.Char ww1 ww2 } })
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.setPerms2,
                                          case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                          case ds5 of ww2 { GHC.Types.I# ww3 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww3
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                          GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                                         (GHC.Types.:
                                            @ (GHC.Base.String, GHC.Base.String)
                                            (Flickr.Photos.setPerms1,
                                             case w1 of wild { Flickr.Types.Permissions ds1 ds2 ds3 ds4 ds5 ds6 ->
                                             case ds6 of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0
                                                    ww3
                                                    (GHC.Types.[]
                                                       @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                                            (GHC.Types.[]
                                               @ (GHC.Base.String,
                                                  GHC.Base.String)))))))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
51a2d78e84c7b7b5c812c2cf459c07f4
  $wsetSafetyLevel :: Flickr.Types.PhotoID
                      -> Data.Maybe.Maybe Flickr.Types.Safety
                      -> Data.Maybe.Maybe GHC.Types.Bool
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.Safety
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setSafetyLevel3
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case w2 of wild {
                                 Data.Maybe.Nothing
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.addTags2, w)
                                      (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.setSafetyLevel2, Flickr.Utils.showBool a1)
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.addTags2, w)
                                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }
                           } in
                           case w1 of wild {
                             Data.Maybe.Nothing -> xs
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.setSafetyLevel1, Flickr.Types.showSafety a1)
                                  xs }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
c1ada6faa81f32aa833a0038744d9ebc
  $wsetTags :: Flickr.Types.PhotoID
               -> [Flickr.Types.Tag]
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.setTags1
                          (case w1 of wild {
                             []
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             : ipv ipv1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.addTags1,
                                   Data.List.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     ipv
                                     (Data.List.prependToAll
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.lsArg1
                                        ipv1))
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Photos.addTags2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
714137ad39537a5b4593c798317f1491
  data SearchConstraints
    No C type associated
    RecFlag NonRecursive, Not promotable
    = SearchConstraints :: [Flickr.Types.Tag]
                           -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe GHC.Base.String)
                           -> (Data.Maybe.Maybe Flickr.Types.DateInterval)
                           -> (Data.Maybe.Maybe Flickr.Types.DateInterval)
                           -> (Data.Maybe.Maybe [Flickr.Types.LicenseID])
                           -> (Data.Maybe.Maybe Flickr.Types.SortKey)
                           -> (Data.Maybe.Maybe Flickr.Types.Privacy)
                           -> (Data.Maybe.Maybe Flickr.Types.BoundingBox)
                           -> (Data.Maybe.Maybe Flickr.Types.Accuracy)
                           -> (Data.Maybe.Maybe Flickr.Types.Safety)
                           -> (Data.Maybe.Maybe Flickr.Types.ContentType)
                           -> [Flickr.Types.Tag] -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe Flickr.Types.GroupID)
                           -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe Flickr.Types.WhereOnEarthID)
                           -> (Data.Maybe.Maybe Flickr.Types.PlaceID)
                           -> (Data.Maybe.Maybe Flickr.Types.MediaType)
                           -> (Data.Maybe.Maybe GHC.Types.Bool)
                           -> (Data.Maybe.Maybe Flickr.Types.Decimal)
                           -> (Data.Maybe.Maybe Flickr.Types.Decimal)
                           -> (Data.Maybe.Maybe Flickr.Types.Decimal)
                           -> (Data.Maybe.Maybe GHC.Base.String)
                           -> (Data.Maybe.Maybe GHC.Types.Bool) -> SearchConstraints
        Stricts: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        Fields: s_tags s_tag_mode s_text s_upload s_taken s_license s_sort s_privacy s_bbox s_accuracy s_safe_search s_content_type s_machine_tags s_machine_tag_mode s_group_id s_contacts s_woe_id s_place_id s_media s_has_geo s_lat s_lon s_radius s_radius_units s_is_commons
    FamilyInstance: none
afce4e0b9981c6db80de4663ec5317d4
  addTags :: Flickr.Types.PhotoID
             -> [Flickr.Types.Tag]
             -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Photos.$waddTags w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
5af24b75349bdf230256356a6ce2777b
  addTags1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "tags"#) -}
7fb1a942e0f97c444a1e144434bc3d30
  addTags2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "photo_id"#) -}
39b19b1ce7d2b9de9d900f6a2714098d
  addTags3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.addTags"#) -}
85dc8e6bade9001b23261097c0580758
  delete :: Flickr.Types.PhotoID -> Flickr.Monad.FM ()
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.delete1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.addTags2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ()
                     (\ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withDeletePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
cbbea5120510495e6567dfbf7cb6717b
  delete1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.delete"#) -}
f70cc1cc16aa4229942bc4b190c0ee4b
  getAllContexts :: Flickr.Types.PhotoID
                    -> Flickr.Monad.FM
                           ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool])
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetAllContexts w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ([Flickr.Types.Photoset], [Flickr.Types.PhotoPool])
                     ww1 }) -}
283b90b3c362b517b2879e5cd54109de
  getAllContexts1 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Photos.getAllContexts2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
9460f757578a664f4f9609184efdb7ff
  getAllContexts2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "pool"#) -}
77e8f935ed9428243bf097817b7de4fd
  getAllContexts3 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Photos.getAllContexts4
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
498e7c1ccadbc515cd3d72b07a823ccc
  getAllContexts4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "set"#) -}
04ba16810f749c4d2d5faa7235825e46
  getAllContexts5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getAllContexts"#) -}
d00e990977462e301eb45055b7f0b68e
  getContactsPhotos :: Data.Maybe.Maybe GHC.Types.Int
                       -> Data.Maybe.Maybe GHC.Types.Bool
                       -> Data.Maybe.Maybe GHC.Types.Bool
                       -> Data.Maybe.Maybe GHC.Types.Bool
                       -> [Flickr.Types.PhotoInfo]
                       -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe GHC.Types.Int
                     w1 :: Data.Maybe.Maybe GHC.Types.Bool
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool
                     w3 :: Data.Maybe.Maybe GHC.Types.Bool
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetContactsPhotos
                          w
                          w1
                          w2
                          w3
                          w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
726bba897406779f115a467a1559656d
  getContactsPublicPhotos :: Data.Maybe.Maybe GHC.Types.Int
                             -> Data.Maybe.Maybe GHC.Types.Bool
                             -> Data.Maybe.Maybe GHC.Types.Bool
                             -> Data.Maybe.Maybe GHC.Types.Bool
                             -> [Flickr.Types.PhotoInfo]
                             -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe GHC.Types.Int
                     w1 :: Data.Maybe.Maybe GHC.Types.Bool
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool
                     w3 :: Data.Maybe.Maybe GHC.Types.Bool
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetContactsPublicPhotos
                          w
                          w1
                          w2
                          w3
                          w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
41ae111788e89dff2c3486633a6df3e7
  getContext :: Flickr.Types.PhotoID
                -> Flickr.Monad.FM (Flickr.Types.Photo, Flickr.Types.Photo)
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetContext w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.Photo, Flickr.Types.Photo)
                     ww1 }) -}
4e7ab7926ae2e776f2904370e69b417d
  getContext1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getContext"#) -}
4a39dec91f6cade79b5e782ff5a1c142
  getCounts :: [Flickr.Types.DateString]
               -> [Flickr.Types.DateString]
               -> Flickr.Monad.FM [Flickr.Types.PhotoCount]
    {- Arity: 2, Strictness: <L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: [Flickr.Types.DateString]
                     w1 :: [Flickr.Types.DateString] ->
                   case Flickr.Photos.$wgetCounts w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.PhotoCount] ww1 }) -}
810579e021ec0b8bea90efba508f7a74
  getExif :: Flickr.Types.PhotoID
             -> Data.Maybe.Maybe GHC.Base.String
             -> Flickr.Monad.FM [Flickr.Types.EXIF]
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Photos.$wgetExif w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.EXIF] ww1 }) -}
e8bb705784b13e0d299e17fdf34e451a
  getExif1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "secret"#) -}
2502bde6c00adfd1db4397b5e36a1256
  getExif2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getExif"#) -}
e0882115996ef6db5d2678ec36350f6f
  getFavorites :: Flickr.Types.PhotoID
                  -> Flickr.Monad.FM [(Flickr.Types.User, Flickr.Types.Date)]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetFavorites w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ [(Flickr.Types.User, Flickr.Types.Date)]
                     ww1 }) -}
8bcc8b749dfa9f0f42957d7f577b71c6
  getFavorites1 :: Text.XML.Light.Types.QName
    {- Strictness: m,
       Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Photos.getFavorites2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
0dfc93bc29af562814d6cbe348d2ff25
  getFavorites2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "person"#) -}
366aa52a19956fc72cbff191caf1080d
  getFavorites3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getFavorites"#) -}
eba06332b13ba2ce6636d700fff60a9e
  getFavorites_go :: [Text.XML.Light.Types.Element]
                     -> Data.Maybe.Maybe [(Flickr.Types.User, GHC.Base.String)]
    {- Arity: 1, Strictness: <S,1*U> -}
7eabe37a59332d687219e1407af3bfdd
  getInfo :: Flickr.Types.PhotoID
             -> Data.Maybe.Maybe GHC.Base.String
             -> Flickr.Monad.FM Flickr.Types.PhotoDetails
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Photos.$wgetInfo w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.PhotoDetails ww1 }) -}
7ace90aa80518b7e81c7a5e76130633b
  getInfo1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getInfo"#) -}
db8bd4be9e03ce5d4acc14dae90941c0
  getNotInSet :: Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.Privacy
                 -> Data.Maybe.Maybe Flickr.Types.MediaType
                 -> [Flickr.Types.PhotoInfo]
                 -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetNotInSet w w1 w2 w3 w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
08d0c7351ac77460e48a47a689363815
  getPerms :: Flickr.Types.PhotoID
              -> Flickr.Monad.FM Flickr.Types.Permissions
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetPerms w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.Permissions ww1 }) -}
5e501b5f2084dd1dedc6755a50628976
  getPerms1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getPerms"#) -}
1b4d70f0b11578f8bed2b5eb369bb153
  getPhotoURL :: Flickr.Types.PhotoDetails -> Flickr.Types.URLString
    {- Arity: 1,
       Strictness: <S(S(LLLLLLSLLLL)LLLLLLLLLLLLLLLLL),1*U(1*U(A,A,A,A,A,A,1*U,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
       Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoDetails ->
                   case w of ww { Flickr.Types.PhotoDetails ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                   case ww1 of ww19 { Flickr.Types.Photo ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ->
                   Flickr.Photos.$wgetPhotoURL ww26 ww18 } }) -}
d73e3bc587be615faf0688c706e7225d
  getPhotoURL1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "<unknown>"#) -}
ef07e8f1e6e7da9d4619a44802f5a3f0
  getRecent :: [Flickr.Types.PhotoInfo]
               -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetRecent w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
8ceda3d05018dc44acd81eb397a2ec0d
  getRecent1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "extras"#) -}
a2924501c76781debcfbfb331f716a36
  getRecent2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getRecent"#) -}
0b67ac8fd6577a5df4defb91c3702da8
  getSizes :: Flickr.Types.PhotoID
              -> Flickr.Monad.FM [Flickr.Types.SizeDetails]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Photos.$wgetSizes w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.SizeDetails] ww1 }) -}
98828109b3cbdf58de2ff6b0957e0c80
  getSizes1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.getSizes"#) -}
85e54a21a7e2afe3a290e0533d91b925
  getUntagged :: Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.DateInterval
                 -> Data.Maybe.Maybe Flickr.Types.Privacy
                 -> Data.Maybe.Maybe Flickr.Types.MediaType
                 -> [Flickr.Types.PhotoInfo]
                 -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (5, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w4 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetUntagged w w1 w2 w3 w4 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
eb7a8478e6450757b50bde2bc23743fc
  getWithGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                    -> Data.Maybe.Maybe Flickr.Types.DateInterval
                    -> Data.Maybe.Maybe Flickr.Types.Privacy
                    -> Data.Maybe.Maybe Flickr.Types.SortKey
                    -> Data.Maybe.Maybe Flickr.Types.MediaType
                    -> [Flickr.Types.PhotoInfo]
                    -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.SortKey
                     w4 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w5 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetWithGeoData
                          w
                          w1
                          w2
                          w3
                          w4
                          w5 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
e08e590eb09573884c141f939ad96588
  getWithoutGeoData :: Data.Maybe.Maybe Flickr.Types.DateInterval
                       -> Data.Maybe.Maybe Flickr.Types.DateInterval
                       -> Data.Maybe.Maybe Flickr.Types.Privacy
                       -> Data.Maybe.Maybe Flickr.Types.SortKey
                       -> Data.Maybe.Maybe Flickr.Types.MediaType
                       -> [Flickr.Types.PhotoInfo]
                       -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (6, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateInterval
                     w2 :: Data.Maybe.Maybe Flickr.Types.Privacy
                     w3 :: Data.Maybe.Maybe Flickr.Types.SortKey
                     w4 :: Data.Maybe.Maybe Flickr.Types.MediaType
                     w5 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wgetWithoutGeoData
                          w
                          w1
                          w2
                          w3
                          w4
                          w5 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
9dfaf367021979bfd195c6f2962934d4
  nullSearchConstraints :: Flickr.Photos.SearchConstraints
    {- HasNoCafRefs,
       Unfolding: (Flickr.Photos.SearchConstraints
                     (GHC.Types.[] @ Flickr.Types.Tag)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ Flickr.Types.DateInterval)
                     (Data.Maybe.Nothing @ Flickr.Types.DateInterval)
                     (Data.Maybe.Nothing @ [Flickr.Types.LicenseID])
                     (Data.Maybe.Nothing @ Flickr.Types.SortKey)
                     (Data.Maybe.Nothing @ Flickr.Types.Privacy)
                     (Data.Maybe.Nothing @ Flickr.Types.BoundingBox)
                     (Data.Maybe.Nothing @ Flickr.Types.Accuracy)
                     (Data.Maybe.Nothing @ Flickr.Types.Safety)
                     (Data.Maybe.Nothing @ Flickr.Types.ContentType)
                     (GHC.Types.[] @ Flickr.Types.Tag)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ Flickr.Types.GroupID)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ Flickr.Types.WhereOnEarthID)
                     (Data.Maybe.Nothing @ Flickr.Types.PlaceID)
                     (Data.Maybe.Nothing @ Flickr.Types.MediaType)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)
                     (Data.Maybe.Nothing @ Flickr.Types.Decimal)
                     (Data.Maybe.Nothing @ Flickr.Types.Decimal)
                     (Data.Maybe.Nothing @ Flickr.Types.Decimal)
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Types.Bool)) -}
b0601e623e0243876cc0ed6037d55aa9
  recentlyUpdated :: Flickr.Types.DateString
                     -> [Flickr.Types.PhotoInfo]
                     -> Flickr.Monad.FM
                            (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.DateString w1 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wrecentlyUpdated w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                     ww1 }) -}
fba69bc896f5a28cd750e393aee97102
  recentlyUpdated1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "min_date"#) -}
80b8d164fc39818cd9e7caae3fe7e337
  recentlyUpdated2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.recentlyUpdated"#) -}
edea42c7783af0d47c495fe734f82fa0
  removeTag :: Flickr.Types.Tag -> Flickr.Monad.FM ()
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.Tag ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.removeTag2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.removeTag1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ()
                     (\ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
ca591a6425b030cfe0706e3c17a49717
  removeTag1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "tag_id"#) -}
b65ee326f61403afa0a3da281aed679e
  removeTag2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.removeTag"#) -}
000ea2b0a251765024491e1023f1451a
  s_accuracy :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe Flickr.Types.Accuracy
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds10 }) -}
68d5ffa439c4b5c0194b4c47094b5424
  s_bbox :: Flickr.Photos.SearchConstraints
            -> Data.Maybe.Maybe Flickr.Types.BoundingBox
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds9 }) -}
9e03e94dd5bacb27305a89ba2d499481
  s_contacts :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds16 }) -}
442cf1574577933e3d97580c729fca08
  s_content_type :: Flickr.Photos.SearchConstraints
                    -> Data.Maybe.Maybe Flickr.Types.ContentType
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds12 }) -}
fd57486ed53670e42eaa9a69a88fb555
  s_group_id :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe Flickr.Types.GroupID
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds15 }) -}
d57f2583bf87aa1b7b2a72c2a3a897a6
  s_has_geo :: Flickr.Photos.SearchConstraints
               -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds20 }) -}
89563269f6839419b82d76e2a5847bdb
  s_is_commons :: Flickr.Photos.SearchConstraints
                  -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds25 }) -}
9818a0ae4da4bccc688db0b1451309b3
  s_lat :: Flickr.Photos.SearchConstraints
           -> Data.Maybe.Maybe Flickr.Types.Decimal
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds21 }) -}
6eb7d4b30e3e59890b90f61cb9afedba
  s_license :: Flickr.Photos.SearchConstraints
               -> Data.Maybe.Maybe [Flickr.Types.LicenseID]
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLSLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds6 }) -}
06214f3f24a9d2194704bd5a550457d4
  s_lon :: Flickr.Photos.SearchConstraints
           -> Data.Maybe.Maybe Flickr.Types.Decimal
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds22 }) -}
02a63012adb828ca6d466d404aabf08a
  s_machine_tag_mode :: Flickr.Photos.SearchConstraints
                        -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds14 }) -}
8bc14f65fce3014146a148fe01cce087
  s_machine_tags :: Flickr.Photos.SearchConstraints
                    -> [Flickr.Types.Tag]
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds13 }) -}
881f2f3bab8da019757f22b86b5fcabd
  s_media :: Flickr.Photos.SearchConstraints
             -> Data.Maybe.Maybe Flickr.Types.MediaType
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds19 }) -}
c164dabd071d0e618cde7cae6b68defd
  s_place_id :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe Flickr.Types.PlaceID
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds18 }) -}
8381bb71e9cf865018c1321efc2812a0
  s_privacy :: Flickr.Photos.SearchConstraints
               -> Data.Maybe.Maybe Flickr.Types.Privacy
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds8 }) -}
077c2894bbe87f7c371358b482fabd72
  s_radius :: Flickr.Photos.SearchConstraints
              -> Data.Maybe.Maybe Flickr.Types.Decimal
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds23 }) -}
713fd09a2f647de2be8860f817c66510
  s_radius_units :: Flickr.Photos.SearchConstraints
                    -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds24 }) -}
22ef5e05b52dede4d0dc9f2338cdce6b
  s_safe_search :: Flickr.Photos.SearchConstraints
                   -> Data.Maybe.Maybe Flickr.Types.Safety
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds11 }) -}
6b56ce207e395d464a60e9a36879bf48
  s_sort :: Flickr.Photos.SearchConstraints
            -> Data.Maybe.Maybe Flickr.Types.SortKey
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLSLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds7 }) -}
d331a6fef71a59af9aec07969af868dd
  s_tag_mode :: Flickr.Photos.SearchConstraints
                -> Data.Maybe.Maybe GHC.Types.Bool
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LSLLLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds2 }) -}
91f7c3b4277a94daf2256f8c9b5aab4d
  s_tags :: Flickr.Photos.SearchConstraints -> [Flickr.Types.Tag]
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds1 }) -}
ab93a61b028d6ec1f599fee7b2777ae7
  s_taken :: Flickr.Photos.SearchConstraints
             -> Data.Maybe.Maybe Flickr.Types.DateInterval
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLSLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds5 }) -}
e5502b5dda89c824a8cc0699f3df38f1
  s_text :: Flickr.Photos.SearchConstraints
            -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds3 }) -}
dd1c73b3236ca45cdc1a180ca9a86257
  s_upload :: Flickr.Photos.SearchConstraints
              -> Data.Maybe.Maybe Flickr.Types.DateInterval
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds4 }) -}
56020eb041d82038113fac5851386187
  s_woe_id :: Flickr.Photos.SearchConstraints
              -> Data.Maybe.Maybe Flickr.Types.WhereOnEarthID
    RecSel Flickr.Photos.SearchConstraints
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Photos.SearchConstraints ->
                   case ds of wild { Flickr.Photos.SearchConstraints ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                   ds17 }) -}
9f637ce517520dba0def1650eefb8a8b
  search :: Data.Maybe.Maybe Flickr.Types.UserID
            -> Flickr.Photos.SearchConstraints
            -> [Flickr.Types.PhotoInfo]
            -> Flickr.Monad.FM
                   (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
    {- Arity: 3,
       Strictness: <L,1*U><L,U(1*U,1*U,1*U,U,U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID
                     w1 :: Flickr.Photos.SearchConstraints
                     w2 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Photos.$wsearch w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                     ww1 }) -}
0e42e2be22eba0b54d6804f5187be42b
  setContentType :: Flickr.Types.PhotoID
                    -> Flickr.Types.ContentType
                    -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.ContentType ->
                   case Flickr.Photos.$wsetContentType w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
5a9122d528c75c650f7895d16d7341bd
  setContentType1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "content_type"#) -}
6a6d17eda471248b9918254c9a044046
  setContentType2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setContentType"#) -}
04a3ff05eda60834c2f2eec6defdf1bc
  setDates :: Flickr.Types.PhotoID
              -> Data.Maybe.Maybe Flickr.Types.DateString
              -> Data.Maybe.Maybe Flickr.Types.DateString
              -> Data.Maybe.Maybe Flickr.Types.DateGranularity
              -> Flickr.Monad.FM ()
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w2 :: Data.Maybe.Maybe Flickr.Types.DateString
                     w3 :: Data.Maybe.Maybe Flickr.Types.DateGranularity ->
                   case Flickr.Photos.$wsetDates w w1 w2 w3 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
4e8cf1d9f3e771d4585b9483b6445a6e
  setDates1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "date_posted"#) -}
024a4df512639f50fdb1c6ec8dbeeb15
  setDates2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "date_taken"#) -}
29539c773c8439008433234092ea5dc4
  setDates3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "date_taken_granularity"#) -}
89c37ae0ae788af79ecd00d123c040e9
  setDates4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setDates"#) -}
bc01b90fd76ad3ef2171d51f697547d2
  setMeta :: Flickr.Types.PhotoID
             -> Flickr.Types.Title
             -> Flickr.Types.Description
             -> Flickr.Monad.FM ()
    {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.Title
                     w2 :: Flickr.Types.Description ->
                   case Flickr.Photos.$wsetMeta w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
8a29dd5c88baad0db28754acf7cd1fcc
  setMeta1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "description"#) -}
3870aff964b95d21dabdd09967f33734
  setMeta2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "title"#) -}
03653c257a85a964e7d10238ae6a26ef
  setMeta3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setMeta"#) -}
f9689ea9ce65f280023a490339d773a4
  setPerms :: Flickr.Types.PhotoID
              -> Flickr.Types.Permissions
              -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U(A,1*U,1*U,1*U,1*U(U),1*U(U))>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.Permissions ->
                   case Flickr.Photos.$wsetPerms w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
c088381a86fc34c0dc0a1d7b646de6bc
  setPerms1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "perm_addmeta"#) -}
0d3356878923ad54f691ad14ae8df766
  setPerms2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "perm_comment"#) -}
6631c5feabca5aa85913d730e4a6f253
  setPerms3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "is_family"#) -}
00badf7cb69b229401995f10a2d00506
  setPerms4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "is_friend"#) -}
fb5a833d1ea114ab89d9b3fd224b8e98
  setPerms5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "is_public"#) -}
2328ea48eba5f59fe3ef9f4ff0cfe765
  setPerms6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setPerms"#) -}
7feb1fd811b9fd5a4278f7921bcd2e18
  setSafetyLevel :: Flickr.Types.PhotoID
                    -> Data.Maybe.Maybe Flickr.Types.Safety
                    -> Data.Maybe.Maybe GHC.Types.Bool
                    -> Flickr.Monad.FM ()
    {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.PhotoID
                     w1 :: Data.Maybe.Maybe Flickr.Types.Safety
                     w2 :: Data.Maybe.Maybe GHC.Types.Bool ->
                   case Flickr.Photos.$wsetSafetyLevel w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
11981d000d0311f2ad876a53f3a71815
  setSafetyLevel1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "safety_level"#) -}
a23104daeb04408e0e5856a63bd82a96
  setSafetyLevel2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "hidden"#) -}
0e6a4451a96a2acebc196413169875ba
  setSafetyLevel3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setSafetyLevel"#) -}
dcb224a10e003c8ecbb5ba3226c5ce38
  setTags :: Flickr.Types.PhotoID
             -> [Flickr.Types.Tag]
             -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: [Flickr.Types.Tag] ->
                   case Flickr.Photos.$wsetTags w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
8bbc818004abd0197ec9444850eb0451
  setTags1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.setTags"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

