
==================== FINAL INTERFACE ====================
2016-03-01 11:43:10.322861 UTC

interface flickr-0.3.3:Flickr.Tags 7084
  interface hash: 4be802782f6bafc24e734a1cb42b6f43
  ABI hash: 33afebabfd1a43079825dec05b93fbe0
  export-list hash: 4c2a64da5f82babf38fbefa8499736c6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Tags.getClusterPhotos
  Flickr.Tags.getClusters
  Flickr.Tags.getHotList
  Flickr.Tags.getListPhoto
  Flickr.Tags.getListUser
  Flickr.Tags.getListUserPopular
  Flickr.Tags.getListUserRaw
  Flickr.Tags.getRelated
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Cluster 6909cb1a0baddad0a0508e4e75c9638d
  ClusterID 861a0720a4ef61d8530ab289c18cb591
  DayWeek d880a9d4fec2a47be74665a0ff0736cf
  Photo 2deca11afc0a961b40b35bcb8cfdb204
  PhotoContext b13240513008c5723d6a1a8824274a9d
  PhotoID afad6d42cded8baa9088f416d88f77bf
  Tag 594aea30f29023f654431318539b9dd4
  TagDetails de3681f66d620aa5246baa9d81bdee18
  TagID e4622c5566af9eb9dd4663d540754e10
  UserID c293dabe8f0c6a26ce6f08bd072224fe
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toClusterList 0e7f1ba22c83588f75734e3d3cd77fe3
  toPhotoList 35e814ac6bfec3a1de4ef5e719304676
  toTagDetailsList 8bcb285d8737a0d21239eb72b292e91e
0487ebb0bcb58639c7af963d0a6bb193
  $wgetClusterPhotos :: Flickr.Types.TagID
                        -> Flickr.Types.ClusterID
                        -> (# Flickr.Monad.FMEnv
                              -> GHC.Types.IO
                                     (Flickr.Types.PhotoContext, [Flickr.Types.Photo]) #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.TagID
                     w1 :: Flickr.Types.ClusterID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getClusterPhotos3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Tags.getClusterPhotos2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Tags.getClusterPhotos1, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPhotoList
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.PhotoContext,
                                       [Flickr.Types.Photo])>_R)) #) }) -}
f1fccb2f9297c2c350bef6cc4200ceaa
  $wgetClusters :: Flickr.Types.Tag
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Cluster] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.Tag ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getClusters1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Tags.getClusterPhotos2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.Cluster]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               Data.Maybe.mapMaybe
                                 @ Text.XML.Light.Types.Element
                                 @ Flickr.Types.Cluster
                                 Flickr.Types.Import.eltCluster
                                 (Flickr.Utils.pNodes
                                    Flickr.Types.Import.eltCluster4
                                    (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.Cluster]>_R)) #) }) -}
40c44a408a4f689a5d09de20737f0479
  $wgetHotList :: Data.Maybe.Maybe Flickr.Types.DayWeek
                  -> Data.Maybe.Maybe GHC.Types.Int
                  -> (# Flickr.Monad.FMEnv
                        -> GHC.Types.IO [Flickr.Types.TagDetails] #)
    {- Arity: 2, Strictness: <L,1*U><L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.DayWeek
                     w1 :: Data.Maybe.Maybe GHC.Types.Int ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getHotList5
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> case w1 of wild1 {
                                  Data.Maybe.Nothing
                                  -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                  Data.Maybe.Just a1
                                  -> GHC.Types.:
                                       @ (GHC.Base.String, GHC.Base.String)
                                       (Flickr.Tags.getHotList4, GHC.Show.$fShowInt_$cshow a1)
                                       (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Tags.getHotList3,
                                   case a1 of wild1 {
                                     GHC.Types.False -> Flickr.Tags.getHotList2
                                     GHC.Types.True -> Flickr.Tags.getHotList1 })
                                  (case w1 of wild1 {
                                     Data.Maybe.Nothing
                                     -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                     Data.Maybe.Just a2
                                     -> GHC.Types.:
                                          @ (GHC.Base.String, GHC.Base.String)
                                          (Flickr.Tags.getHotList4, GHC.Show.$fShowInt_$cshow a2)
                                          (GHC.Types.[]
                                             @ (GHC.Base.String,
                                                GHC.Base.String)) }) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltTagDetailsList ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagDetails]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagDetails]>_R)) #) }) -}
9234df214ac339cf728e51d8ae657af3
  $wgetListPhoto :: Flickr.Types.PhotoID
                    -> (# Flickr.Monad.FMEnv
                          -> GHC.Types.IO [Flickr.Types.TagDetails] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getListPhoto2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Tags.getListPhoto1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltTagDetailsList ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagDetails]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagDetails]>_R)) #) }) -}
ddca68cc065be4fa5a9be663829407ca
  $wgetListUser :: Data.Maybe.Maybe Flickr.Types.UserID
                   -> (# Flickr.Monad.FMEnv
                         -> GHC.Types.IO [Flickr.Types.TagDetails] #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getListUser2
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Tags.getListUser1, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltTagDetailsList ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagDetails]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagDetails]>_R)) #) }) -}
e075447ef35d16f046cbcbb2950c4da0
  $wgetListUserPopular :: Data.Maybe.Maybe Flickr.Types.UserID
                          -> Data.Maybe.Maybe GHC.Types.Int
                          -> (# Flickr.Monad.FMEnv
                                -> GHC.Types.IO [Flickr.Types.TagDetails] #)
    {- Arity: 2, Strictness: <L,1*U><L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.UserID
                     w1 :: Data.Maybe.Maybe GHC.Types.Int ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getListUserPopular1
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> case w1 of wild1 {
                                  Data.Maybe.Nothing
                                  -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                  Data.Maybe.Just a1
                                  -> GHC.Types.:
                                       @ (GHC.Base.String, GHC.Base.String)
                                       (Flickr.Tags.getHotList4, GHC.Show.$fShowInt_$cshow a1)
                                       (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Tags.getListUser1, a1)
                                  (case w1 of wild1 {
                                     Data.Maybe.Nothing
                                     -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                     Data.Maybe.Just a2
                                     -> GHC.Types.:
                                          @ (GHC.Base.String, GHC.Base.String)
                                          (Flickr.Tags.getHotList4, GHC.Show.$fShowInt_$cshow a2)
                                          (GHC.Types.[]
                                             @ (GHC.Base.String,
                                                GHC.Base.String)) }) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltTagDetailsList ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagDetails]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagDetails]>_R)) #) }) -}
62ad22c930609afa3fe2983b8aa61706
  $wgetListUserRaw :: Data.Maybe.Maybe Flickr.Types.Tag
                      -> (# Flickr.Monad.FMEnv
                            -> GHC.Types.IO [Flickr.Types.TagDetails] #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.Tag ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getListUserRaw1
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Tags.getClusterPhotos2, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltTagDetailsList ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagDetails]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagDetails]>_R)) #) }) -}
021308b2a84a699afaf424a0283cfa5b
  $wgetRelated :: Flickr.Types.Tag
                  -> (# Flickr.Monad.FMEnv
                        -> GHC.Types.IO [Flickr.Types.TagDetails] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.Tag ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Tags.getRelated1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Tags.getClusterPhotos2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagDetails]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltTagDetailsList ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagDetails]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagDetails]>_R)) #) }) -}
57e95b4a6a9476b7469b53464c1cba6a
  getClusterPhotos :: Flickr.Types.TagID
                      -> Flickr.Types.ClusterID
                      -> Flickr.Monad.FM
                             (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.TagID w1 :: Flickr.Types.ClusterID ->
                   case Flickr.Tags.$wgetClusterPhotos w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                     ww1 }) -}
338301eb1a17990e94c20bd124e3dabe
  getClusterPhotos1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cluster_id"#) -}
9f88f266f16bec6acf79e982e1120213
  getClusterPhotos2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "tag"#) -}
d075d29a395a164654eaa0c041e23d2e
  getClusterPhotos3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getClusterPhotos"#) -}
aa936bc49291d487d855de7cc787157a
  getClusters :: Flickr.Types.Tag
                 -> Flickr.Monad.FM [Flickr.Types.Cluster]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.Tag ->
                   case Flickr.Tags.$wgetClusters w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Cluster] ww1 }) -}
92570a4bd6c7b79d651bc057cc29693d
  getClusters1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getClusters"#) -}
1bd6f2d736fc0a61008fb6094122b261
  getHotList :: Data.Maybe.Maybe Flickr.Types.DayWeek
                -> Data.Maybe.Maybe GHC.Types.Int
                -> Flickr.Monad.FM [Flickr.Types.TagDetails]
    {- Arity: 2, Strictness: <L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DayWeek
                     w1 :: Data.Maybe.Maybe GHC.Types.Int ->
                   case Flickr.Tags.$wgetHotList w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagDetails] ww1 }) -}
534d32974798f9f342efb7eac5e737f2
  getHotList1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "day"#) -}
14e3a29cacba062f0bac2ab99421ffbc
  getHotList2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "week"#) -}
4778e985911d0fa22150903f5fd3687a
  getHotList3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "period"#) -}
0259d76d681ba586fd1d69251f4ff177
  getHotList4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "count"#) -}
f2b0b0786753f358bdd7d36d3386d763
  getHotList5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getHotList"#) -}
7bd0ef99e06eee23f00fb7ffcce30ff2
  getListPhoto :: Flickr.Types.PhotoID
                  -> Flickr.Monad.FM [Flickr.Types.TagDetails]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PhotoID ->
                   case Flickr.Tags.$wgetListPhoto w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagDetails] ww1 }) -}
62d41d38bc229d2dcaf4c92c3b92ede5
  getListPhoto1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "photo_id"#) -}
6f84384277b26d25f4156b6a022fa2d6
  getListPhoto2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getListPhoto"#) -}
6a84bc9e1d9ea3de13f775546a37baed
  getListUser :: Data.Maybe.Maybe Flickr.Types.UserID
                 -> Flickr.Monad.FM [Flickr.Types.TagDetails]
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.Tags.$wgetListUser w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagDetails] ww1 }) -}
d30c3b318b8e50d6794bcb1c481bd18e
  getListUser1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "user_id"#) -}
1bfbf7c2c2e594223e0c50b3c21202d8
  getListUser2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getListUser"#) -}
28870144201126b4129b956fecab61af
  getListUserPopular :: Data.Maybe.Maybe Flickr.Types.UserID
                        -> Data.Maybe.Maybe GHC.Types.Int
                        -> Flickr.Monad.FM [Flickr.Types.TagDetails]
    {- Arity: 2, Strictness: <L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID
                     w1 :: Data.Maybe.Maybe GHC.Types.Int ->
                   case Flickr.Tags.$wgetListUserPopular w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagDetails] ww1 }) -}
5df8ba83920baa4201c97e967bf01394
  getListUserPopular1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getListUserPopular"#) -}
1f9646351fdbce8c091f9e8b2abc4a8c
  getListUserRaw :: Data.Maybe.Maybe Flickr.Types.Tag
                    -> Flickr.Monad.FM [Flickr.Types.TagDetails]
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.Tag ->
                   case Flickr.Tags.$wgetListUserRaw w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagDetails] ww1 }) -}
fc727ea1d2e92d1f15096d406b057c22
  getListUserRaw1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getListUserRaw"#) -}
75913fc9c038afe6a4fece653750ef21
  getRelated :: Flickr.Types.Tag
                -> Flickr.Monad.FM [Flickr.Types.TagDetails]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.Tag ->
                   case Flickr.Tags.$wgetRelated w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagDetails] ww1 }) -}
ca52c727801287182308f814261b8e9a
  getRelated1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.tags.getRelated"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

