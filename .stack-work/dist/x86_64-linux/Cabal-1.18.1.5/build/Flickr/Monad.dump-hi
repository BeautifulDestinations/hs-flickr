
==================== FINAL INTERFACE ====================
2016-03-01 17:02:52.635158 UTC

interface flickr-0.3.3:Flickr.Monad 7084
  interface hash: 345018d5129cafa9a4cbd0500c2acd2a
  ABI hash: 6de6ab67db79412c432c6826a71bd502
  export-list hash: d889671f2b278e4b47117b8a29fd3d51
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1ed821a1a6ac3bec98b1ab768c61218b
  used TH splices: False
  where
exports:
  Flickr.Monad.api_base
  Flickr.Monad.auth_base
  Flickr.Monad.catchFlickr
  Flickr.Monad.checkResponse
  Flickr.Monad.eiArg
  Flickr.Monad.flick
  Flickr.Monad.flickAPI
  Flickr.Monad.flickCall
  Flickr.Monad.flickCall_
  Flickr.Monad.flickError
  Flickr.Monad.flickFromException
  Flickr.Monad.flickToException
  Flickr.Monad.flickTranslate
  Flickr.Monad.flickrCall
  Flickr.Monad.genLoginURL
  Flickr.Monad.getAPIKey
  Flickr.Monad.getAuthMiniToken
  Flickr.Monad.getAuthToken
  Flickr.Monad.getBaseURL
  Flickr.Monad.getMobileAuthURL
  Flickr.Monad.handleFlickr
  Flickr.Monad.liftIO
  Flickr.Monad.lsArg
  Flickr.Monad.mbArg
  Flickr.Monad.mkLoginURL
  Flickr.Monad.onlyTheseProperties
  Flickr.Monad.pagedCall
  Flickr.Monad.parseDoc
  Flickr.Monad.postMethod
  Flickr.Monad.replace_base
  Flickr.Monad.restGet
  Flickr.Monad.restPost
  Flickr.Monad.signedMethod
  Flickr.Monad.throwFlickErr
  Flickr.Monad.tryFlick
  Flickr.Monad.upload_base
  Flickr.Monad.withAPIKey
  Flickr.Monad.withAuthMiniToken
  Flickr.Monad.withAuthToken
  Flickr.Monad.withBase
  Flickr.Monad.withDeletePerm
  Flickr.Monad.withPageSize
  Flickr.Monad.withReadPerm
  Flickr.Monad.withSharedSecret
  Flickr.Monad.withWritePerm
  Flickr.Monad.ErrM
  Flickr.Monad.FM{Flickr.Monad.FM}
  Flickr.Monad.FMEnv{Flickr.Monad.FMEnv Flickr.Monad.fm_api_base Flickr.Monad.fm_api_key Flickr.Monad.fm_auth_mini_token Flickr.Monad.fm_auth_token Flickr.Monad.fm_include_props Flickr.Monad.fm_is_paged Flickr.Monad.fm_is_signed Flickr.Monad.fm_page Flickr.Monad.fm_per_page Flickr.Monad.fm_perm_level Flickr.Monad.fm_post_method}
  Flickr.Monad.FlickErr{Flickr.Monad.FlickErr Flickr.Monad.flickErrorCode Flickr.Monad.flickErrorLoc Flickr.Monad.flickErrorMsg Flickr.Monad.flickErrorSource Flickr.Monad.flickErrorType}
  Flickr.Monad.FlickErrorType{Flickr.Monad.EmptyResponse Flickr.Monad.FlickParseError Flickr.Monad.FlickrAPIError Flickr.Monad.IllformedError Flickr.Monad.MissingStatus Flickr.Monad.UnexpectedResponse}
  Flickr.Monad.SomeFlickException{Flickr.Monad.SomeFlickException}
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Utils
                     Util.Fetch Util.Keys Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Control.Exception 7d63ae88211a26e1cc154f7ca3a7313a
import  -/  base:Control.Exception.Base 9ef98277d024bfe7aa9db866724676f1
import  -/  base:Data.Either d1c890129a7c6a9ec02a642c6c2f4ed3
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:Data.Typeable 272ab3b77c7bfce843c7719673e87b91
import  -/  base:Data.Typeable.Internal 0a59b012ccae898413a1fcdd48585b4a
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Exception a293a91a9633ed37799c62ca0fb2dade
import  -/  base:GHC.IO 4f1da187b3631b8d72997b7dc992301d
import  -/  base:GHC.List 4cff382327e59a5787355ca0a4174450
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  base:System.IO cadd0efb01c47ddd8f52d750739fdbdf
import  -/  base:Text.Read 6fe10a0a6d0a38c215de3b09e72ca556
import  -/  filepath-1.3.0.2:System.FilePath 6018bcc28659490ac691bcde3d1d9ec5
import  -/  filepath-1.3.0.2:System.FilePath.Posix f4c65ca4c4c0c1c24422e5320ef0b17b
import  -/  Flickr.Utils 68facf93de1ef1e4c93b470398fe5414
  exports: 7ebed314ffe0fcb0fea5a3de318e595b
  nsName 13a53574b6a1b9c1497f6aa27508e98b
  pAttr 6e01f0483c8f6392578f85f66019745f
import  -/  Util.Fetch 37c42d0db762544d990d8af5a1703c1a
  exports: 981d7cd3d0a173043e9172bae048f332
  URLString 17762375cf25daa0da7c6a40a147810d
  postContentsURL 983d5519e845ec54ae4fc59aa21c97c0
  readContentsURL 5b3a990e4627cd954846c16883d61d0b
import  -/  Util.Keys 1b1f09c5fabb70b5b96151f27f74c054
  exports: e966ca30ce99bf5a2da450d102bf2d61
  APIKey 101048fab935365cc9fadc8644be004e
  apiKey fcf3f5d3d0a6d56f2013e7c601b714cb
  apiSecret fdb6c5432dfa8ba0f49bfd41cf5ff746
  hsflickrAPIKey b541224fb8bd56ca8c70c24a2b0ecbbe
import  -/  Util.MD5 7008b75a8131bd2950e8247609153d99
  exports: 53064cf2ad0bdc8505a60ee1c1dd42bb
  md5sumStr 1e92590c9fb9eceff1eb8f8dc4abedce
import  -/  Util.Post 9b21f91b8d24150b4c7844182371d48c
  exports: 999e70d2f9d7734cb3030c668d49edc3
  PostQuery 15adca1ca2da1c9bc5b94abee324fa37
  addNameFile b320ca992a4667e6870c5add1d467c73
  addNameValue 951ff05bc285c5d32e16086cbb4e8916
  newPostRequest 1138d305414b6f690b9638e2b6b601bb
  toRequest 356cc156255be69a2eace568d4e90da4
import  -/  ghc-prim:GHC.Classes 3e6cbe1e7e80480408cfa8d5450726a0
import  -/  ghc-prim:GHC.Types dcba736fa3dfba12d307ab18354845d2
import  -/  xml-1.3.14:Text.XML.Light 9d59617891bd0fbdb6d3ffcf65939020
import  -/  xml-1.3.14:Text.XML.Light.Input 25968ed6dce317a07e70c1f79512ab87
import  -/  xml-1.3.14:Text.XML.Light.Proc 277b74c044fa89f0db17455b56117130
import  -/  xml-1.3.14:Text.XML.Light.Types 4483de4cddeaa14654667ed2520d029e
599e883a42e77415365217c4b7d85a50
  $fEqFlickErrorType :: GHC.Classes.Eq Flickr.Monad.FlickErrorType
    DFunId[0]
    {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.FlickErrorType
                    Flickr.Monad.$fEqFlickErrorType_$c==
                    Flickr.Monad.$fEqFlickErrorType_$c/= -}
599e883a42e77415365217c4b7d85a50
  $fEqFlickErrorType_$c/= :: Flickr.Monad.FlickErrorType
                             -> Flickr.Monad.FlickErrorType
                             -> GHC.Types.Bool
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
       Unfolding: (\ a1 :: Flickr.Monad.FlickErrorType
                     b :: Flickr.Monad.FlickErrorType ->
                   case a1 of wild {
                     Flickr.Monad.UnexpectedResponse
                     -> case b of wild1 {
                          DEFAULT -> GHC.Types.True
                          Flickr.Monad.UnexpectedResponse -> GHC.Types.False }
                     Flickr.Monad.MissingStatus
                     -> case b of wild1 {
                          DEFAULT -> GHC.Types.True
                          Flickr.Monad.MissingStatus -> GHC.Types.False }
                     Flickr.Monad.EmptyResponse
                     -> case b of wild1 {
                          DEFAULT -> GHC.Types.True
                          Flickr.Monad.EmptyResponse -> GHC.Types.False }
                     Flickr.Monad.IllformedError
                     -> case b of wild1 {
                          DEFAULT -> GHC.Types.True
                          Flickr.Monad.IllformedError -> GHC.Types.False }
                     Flickr.Monad.FlickParseError
                     -> case b of wild1 {
                          DEFAULT -> GHC.Types.True
                          Flickr.Monad.FlickParseError -> GHC.Types.False }
                     Flickr.Monad.FlickrAPIError
                     -> case b of wild1 {
                          DEFAULT -> GHC.Types.True
                          Flickr.Monad.FlickrAPIError -> GHC.Types.False } }) -}
599e883a42e77415365217c4b7d85a50
  $fEqFlickErrorType_$c== :: Flickr.Monad.FlickErrorType
                             -> Flickr.Monad.FlickErrorType
                             -> GHC.Types.Bool
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
       Unfolding: (\ ds :: Flickr.Monad.FlickErrorType
                     ds1 :: Flickr.Monad.FlickErrorType ->
                   case ds of wild {
                     Flickr.Monad.UnexpectedResponse
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Flickr.Monad.UnexpectedResponse -> GHC.Types.True }
                     Flickr.Monad.MissingStatus
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Flickr.Monad.MissingStatus -> GHC.Types.True }
                     Flickr.Monad.EmptyResponse
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Flickr.Monad.EmptyResponse -> GHC.Types.True }
                     Flickr.Monad.IllformedError
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Flickr.Monad.IllformedError -> GHC.Types.True }
                     Flickr.Monad.FlickParseError
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Flickr.Monad.FlickParseError -> GHC.Types.True }
                     Flickr.Monad.FlickrAPIError
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Flickr.Monad.FlickrAPIError -> GHC.Types.True } }) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fExceptionFlickErr :: GHC.Exception.Exception
                             Flickr.Monad.FlickErr
    DFunId[0]
    {- Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.FlickErr
                    Flickr.Monad.$fExceptionFlickErr_$ctypeRep#
                      `cast`
                    (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                              <*>_N <Flickr.Monad.FlickErr>_N))
                    Flickr.Monad.$fShowFlickErr
                    Flickr.Monad.$fExceptionFlickErr_$ctoException
                    Flickr.Monad.$fExceptionFlickErr_$cfromException -}
c1886162007ce1886435c883524b640d
  $fExceptionFlickErr1 :: Data.Typeable.Internal.TypeRep
    {- Strictness: m,
       Unfolding: (Data.Typeable.Internal.TypeRep
                     __word 10291610323805442401
                     __word 2524934244988475180
                     Flickr.Monad.$fExceptionFlickErr2
                     (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
f15bd6fbb149f3188efb23fbb2f9e25f
  $fExceptionFlickErr2 :: Data.Typeable.Internal.TyCon
    {- Strictness: m,
       Unfolding: (Data.Typeable.Internal.TyCon
                     __word 10291610323805442401
                     __word 2524934244988475180
                     Flickr.Monad.$fExceptionFlickErr5
                     Flickr.Monad.$fExceptionFlickErr4
                     Flickr.Monad.$fExceptionFlickErr3) -}
98b0d63a1f09282a2c1d41644fa64280
  $fExceptionFlickErr3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "FlickErr"#) -}
0eba6418585928c4b97c40c589deeabe
  $fExceptionFlickErr4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Flickr.Monad"#) -}
30b861d3267a7dbfc4f8738b9392a7e1
  $fExceptionFlickErr5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "flickr-0.3.3"#) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fExceptionFlickErr_$cfromException :: GHC.Exception.SomeException
                                         -> Data.Maybe.Maybe Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
       Unfolding: (Flickr.Monad.$fExceptionFlickErr_$sflickFromException) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fExceptionFlickErr_$ctoException :: Flickr.Monad.FlickErr
                                       -> GHC.Exception.SomeException
    {- Arity: 1, Strictness: <L,U> -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fExceptionFlickErr_$ctypeRep# :: GHC.Prim.Proxy#
                                        * Flickr.Monad.FlickErr
                                    -> Data.Typeable.Internal.TypeRep
    {- Arity: 1, Strictness: <L,A>m,
       Unfolding: InlineRule (1, True, True)
                  (\ ds :: GHC.Prim.Proxy# * Flickr.Monad.FlickErr ->
                   Flickr.Monad.$fExceptionFlickErr1) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fExceptionFlickErr_$sflickFromException :: GHC.Exception.SomeException
                                              -> Data.Maybe.Maybe Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
       Unfolding: (\ eta :: GHC.Exception.SomeException ->
                   case eta of wild { GHC.Exception.SomeException e10 $dException1 e2 ->
                   case (GHC.Exception.$p1Exception @ e10 $dException1)
                          `cast`
                        (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e10>_N)
                          (GHC.Prim.proxy#
                             @ *
                             @ e10) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ->
                   case dt of wild2 {
                     DEFAULT -> Data.Maybe.Nothing @ Flickr.Monad.FlickErr
                     __word 14457301338598565400
                     -> case dt1 of wild3 {
                          DEFAULT -> Data.Maybe.Nothing @ Flickr.Monad.FlickErr
                          __word 7360164807085354615
                          -> case e2
                                    `cast`
                                  (UnivCo representational e10 Flickr.Monad.SomeFlickException) of wild4 { Flickr.Monad.SomeFlickException e $dException a1 ->
                             case (GHC.Exception.$p1Exception @ e $dException)
                                    `cast`
                                  (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e>_N)
                                    (GHC.Prim.proxy#
                                       @ *
                                       @ e) of wild5 { Data.Typeable.Internal.TypeRep dt2 dt3 ds1 ds4 ->
                             case dt2 of wild6 {
                               DEFAULT -> Data.Maybe.Nothing @ Flickr.Monad.FlickErr
                               __word 10291610323805442401
                               -> case dt3 of wild7 {
                                    DEFAULT -> Data.Maybe.Nothing @ Flickr.Monad.FlickErr
                                    __word 2524934244988475180
                                    -> Data.Maybe.Just
                                         @ Flickr.Monad.FlickErr
                                         a1
                                           `cast`
                                         (UnivCo representational e Flickr.Monad.FlickErr) } } } } } } } }) -}
875f5941a2d953944d01ea4ce437833e
  $fExceptionSomeFlickException :: GHC.Exception.Exception
                                       Flickr.Monad.SomeFlickException
    DFunId[0]
    {- Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.SomeFlickException
                    Flickr.Monad.$fExceptionSomeFlickException_$ctypeRep#
                      `cast`
                    (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                              <*>_N <Flickr.Monad.SomeFlickException>_N))
                    Flickr.Monad.$fShowSomeFlickException
                    Flickr.Monad.$fExceptionSomeFlickException_$ctoException
                    Flickr.Monad.$fExceptionSomeFlickException_$cfromException -}
ecd29519fc4d83ddd00e72ebd674d8a8
  $fExceptionSomeFlickException1 :: Data.Typeable.Internal.TypeRep
    {- Strictness: m,
       Unfolding: (Data.Typeable.Internal.TypeRep
                     __word 14457301338598565400
                     __word 7360164807085354615
                     Flickr.Monad.$fExceptionSomeFlickException2
                     (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
a6f623172644fcdfd0c2571c7cdc6f8d
  $fExceptionSomeFlickException2 :: Data.Typeable.Internal.TyCon
    {- Strictness: m,
       Unfolding: (Data.Typeable.Internal.TyCon
                     __word 14457301338598565400
                     __word 7360164807085354615
                     Flickr.Monad.$fExceptionFlickErr5
                     Flickr.Monad.$fExceptionFlickErr4
                     Flickr.Monad.$fExceptionSomeFlickException_ww5) -}
875f5941a2d953944d01ea4ce437833e
  $fExceptionSomeFlickException_$cfromException :: GHC.Exception.SomeException
                                                   -> Data.Maybe.Maybe
                                                          Flickr.Monad.SomeFlickException
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
       Unfolding: (\ eta :: GHC.Exception.SomeException ->
                   case eta of wild { GHC.Exception.SomeException e10 $dException1 e2 ->
                   case (GHC.Exception.$p1Exception @ e10 $dException1)
                          `cast`
                        (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e10>_N)
                          (GHC.Prim.proxy#
                             @ *
                             @ e10) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ->
                   case dt of wild2 {
                     DEFAULT -> Data.Maybe.Nothing @ Flickr.Monad.SomeFlickException
                     __word 14457301338598565400
                     -> case dt1 of wild3 {
                          DEFAULT -> Data.Maybe.Nothing @ Flickr.Monad.SomeFlickException
                          __word 7360164807085354615
                          -> Data.Maybe.Just
                               @ Flickr.Monad.SomeFlickException
                               e2
                                 `cast`
                               (UnivCo representational e10 Flickr.Monad.SomeFlickException) } } } }) -}
875f5941a2d953944d01ea4ce437833e
  $fExceptionSomeFlickException_$ctoException :: Flickr.Monad.SomeFlickException
                                                 -> GHC.Exception.SomeException
    {- Arity: 1 -}
875f5941a2d953944d01ea4ce437833e
  $fExceptionSomeFlickException_$ctypeRep# :: GHC.Prim.Proxy#
                                                  * Flickr.Monad.SomeFlickException
                                              -> Data.Typeable.Internal.TypeRep
    {- Arity: 1, Strictness: <L,A>m,
       Unfolding: InlineRule (1, True, True)
                  (\ ds :: GHC.Prim.Proxy# * Flickr.Monad.SomeFlickException ->
                   Flickr.Monad.$fExceptionSomeFlickException1) -}
b1f07b3cd504bcca6c3731baaea98314
  $fExceptionSomeFlickException_ww5 :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "SomeFlickException"#) -}
9e0a04bb4803c174c013b2fb8be73ec0
  $fMonadFM :: GHC.Base.Monad Flickr.Monad.FM
    DFunId[0]
    {- Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.FM
                    Flickr.Monad.$fMonadFM_$c>>=
                    Flickr.Monad.$fMonadFM_$c>>
                    Flickr.Monad.$fMonadFM_$creturn
                    Flickr.Monad.$fMonadFM_$cfail -}
9e0a04bb4803c174c013b2fb8be73ec0
  $fMonadFM_$c>> :: Flickr.Monad.FM a
                    -> Flickr.Monad.FM b
                    -> Flickr.Monad.FM b
    {- Arity: 2, HasNoCafRefs,
       Strictness: <S,1*U(C(C1(U(U,A))))><L,U(C(C1(U)))>m,
       Inline: INLINE (sat-args=2),
       Unfolding: InlineRule (2, False, False)
                  (\ @ a1 @ b m1 :: Flickr.Monad.FM a1 k1 :: Flickr.Monad.FM b ->
                   Flickr.Monad.$fMonadFM_$c>>= @ a1 @ b m1 (\ ds :: a1 -> k1)) -}
9e0a04bb4803c174c013b2fb8be73ec0
  $fMonadFM_$c>>= :: Flickr.Monad.FM a
                     -> (a -> Flickr.Monad.FM b)
                     -> Flickr.Monad.FM b
    {- Arity: 2, HasNoCafRefs,
       Strictness: <S,1*U(C(C1(U(U,U))))><L,C(U(1*C1(C1(U))))>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1
                     @ b
                     w :: Flickr.Monad.FM a1
                     w1 :: a1 -> Flickr.Monad.FM b ->
                   case w of ww { Flickr.Monad.FM ww1 ->
                   Flickr.Monad.FM
                     @ b
                     (\ env :: Flickr.Monad.FMEnv
                        s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <a1>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      case w1 ipv1 of wild { Flickr.Monad.FM b1 ->
                      (b1 env) `cast` (GHC.Types.NTCo:IO[0] <b>_R) ipv } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <b>_R)) }) -}
9e0a04bb4803c174c013b2fb8be73ec0
  $fMonadFM_$cfail :: GHC.Base.String -> Flickr.Monad.FM a
    {- Arity: 1, Strictness: <B,U>b -}
9e0a04bb4803c174c013b2fb8be73ec0
  $fMonadFM_$creturn :: a -> Flickr.Monad.FM a
    {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 x :: a1 ->
                   Flickr.Monad.FM
                     @ a1
                     (\ ds :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      (# eta, x #))
                       `cast`
                     (<Flickr.Monad.FMEnv>_R ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R))) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fShowFlickErr :: GHC.Show.Show Flickr.Monad.FlickErr
    DFunId[0]
    {- Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.FlickErr
                    Flickr.Monad.$fShowFlickErr_$cshowsPrec
                    Flickr.Monad.$fShowFlickErr_$cshow
                    Flickr.Monad.$fShowFlickErr_$cshowList -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fShowFlickErr1 :: Flickr.Monad.FlickErr -> GHC.Show.ShowS
    {- Arity: 2, Strictness: <L,U(U(U),U,U,A,U)><L,1*U>,
       Unfolding: (\ x :: Flickr.Monad.FlickErr s :: GHC.Base.String ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     (Flickr.Monad.$fShowFlickErr_$cshow x)
                     s) -}
9669323e41502d6dd84b3c8bd410c451
  $fShowFlickErr2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Flickr API error"#) -}
cd729f47775fbe4a9b18b87470d455bc
  $fShowFlickErr3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "ok response returned, but ill-formed"#) -}
0a1f2a4799832e64b0645a0333792431
  $fShowFlickErr4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "ill-formed 'rsp' content"#) -}
2a64b0b31bf4d20749e348829fa0a530
  $fShowFlickErr5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "empty 'rsp' content"#) -}
f8ca5bf8c2f63fe67cd31e46ed89ed1a
  $fShowFlickErr6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "unexpected response; missing 'rsp' top element"#) -}
5d679c4b1c8e3dd0b8f4209195b19b91
  $fShowFlickErr7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "unexpected XML Flickr response"#) -}
919fe544edfa471c7a750f29e4009ad5
  $fShowFlickErr8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Flickr error:"#) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fShowFlickErr_$cshow :: Flickr.Monad.FlickErr -> GHC.Base.String
    {- Arity: 1, Strictness: <L,U(1*U(U),U,1*U,A,U)>,
       Unfolding: (\ x :: Flickr.Monad.FlickErr ->
                   Data.List.unlines
                     (GHC.Types.:
                        @ [GHC.Types.Char]
                        Flickr.Monad.$fShowFlickErr8
                        (GHC.Types.:
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              (GHC.CString.unpackAppendCString#
                                 " Code: "#
                                 (case x of wild { Flickr.Monad.FlickErr ds ds1 ds2 ds3 ds4 ->
                                  case ds of ww2 { GHC.Types.I# ww3 ->
                                  case GHC.Show.$wshowSignedInt
                                         0
                                         ww3
                                         (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                  GHC.Types.: @ GHC.Types.Char ww5 ww6 } } }))
                              (GHC.Types.:
                                 @ [GHC.Types.Char]
                                 (GHC.CString.unpackAppendCString#
                                    " Type: "#
                                    (case x of wild { Flickr.Monad.FlickErr ds ds1 ds2 ds3 ds4 ->
                                     case ds1 of wild1 {
                                       Flickr.Monad.UnexpectedResponse
                                       -> Flickr.Monad.$fShowFlickErr7
                                       Flickr.Monad.MissingStatus -> Flickr.Monad.$fShowFlickErr6
                                       Flickr.Monad.EmptyResponse -> Flickr.Monad.$fShowFlickErr5
                                       Flickr.Monad.IllformedError -> Flickr.Monad.$fShowFlickErr4
                                       Flickr.Monad.FlickParseError -> Flickr.Monad.$fShowFlickErr3
                                       Flickr.Monad.FlickrAPIError
                                       -> Flickr.Monad.$fShowFlickErr2 } }))
                                 (GHC.Types.:
                                    @ [GHC.Types.Char]
                                    (GHC.CString.unpackAppendCString#
                                       " Details: "#
                                       (case x of wild { Flickr.Monad.FlickErr ds ds1 ds2 ds3 ds4 ->
                                        ds2 }))
                                    (case x of wild { Flickr.Monad.FlickErr ds ds1 ds2 ds3 ds4 ->
                                     case ds1 of wild1 {
                                       DEFAULT -> GHC.Types.[] @ GHC.Base.String
                                       Flickr.Monad.IllformedError
                                       -> GHC.Types.:
                                            @ GHC.Base.String
                                            (GHC.CString.unpackAppendCString# " Source: "# ds4)
                                            (GHC.Types.[] @ GHC.Base.String)
                                       Flickr.Monad.FlickParseError
                                       -> GHC.Types.:
                                            @ GHC.Base.String
                                            (GHC.CString.unpackAppendCString# " Source: "# ds4)
                                            (GHC.Types.[] @ GHC.Base.String) } }))))))) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fShowFlickErr_$cshowList :: [Flickr.Monad.FlickErr]
                               -> GHC.Show.ShowS
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ls :: [Flickr.Monad.FlickErr] s :: GHC.Base.String ->
                   GHC.Show.showList__
                     @ Flickr.Monad.FlickErr
                     Flickr.Monad.$fShowFlickErr1
                     ls
                     s) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fShowFlickErr_$cshowsPrec :: GHC.Types.Int
                                -> Flickr.Monad.FlickErr
                                -> GHC.Show.ShowS
    {- Arity: 3, Strictness: <L,A><L,U(U(U),U,U,A,U)><L,1*U>,
       Unfolding: InlineRule (3, True, False)
                  (\ ds :: GHC.Types.Int
                     x :: Flickr.Monad.FlickErr
                     s :: GHC.Base.String ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b
                        c
                        n
                        (Flickr.Monad.$fShowFlickErr_$cshow x))
                     s) -}
599e883a42e77415365217c4b7d85a50
  $fShowFlickErrorType :: GHC.Show.Show Flickr.Monad.FlickErrorType
    DFunId[0]
    {- Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.FlickErrorType
                    Flickr.Monad.$fShowFlickErrorType_$cshowsPrec
                    Flickr.Monad.$fShowFlickErrorType_$cshow
                    Flickr.Monad.$fShowFlickErrorType_$cshowList -}
599e883a42e77415365217c4b7d85a50
  $fShowFlickErrorType_$cshow :: Flickr.Monad.FlickErrorType
                                 -> GHC.Base.String
    {- Arity: 1, Strictness: <S,1*U>,
       Unfolding: (\ x :: Flickr.Monad.FlickErrorType ->
                   case x of wild {
                     Flickr.Monad.UnexpectedResponse -> Flickr.Monad.$fShowFlickErr7
                     Flickr.Monad.MissingStatus -> Flickr.Monad.$fShowFlickErr6
                     Flickr.Monad.EmptyResponse -> Flickr.Monad.$fShowFlickErr5
                     Flickr.Monad.IllformedError -> Flickr.Monad.$fShowFlickErr4
                     Flickr.Monad.FlickParseError -> Flickr.Monad.$fShowFlickErr3
                     Flickr.Monad.FlickrAPIError -> Flickr.Monad.$fShowFlickErr2 }) -}
599e883a42e77415365217c4b7d85a50
  $fShowFlickErrorType_$cshowList :: [Flickr.Monad.FlickErrorType]
                                     -> GHC.Show.ShowS
    {- Arity: 2, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ls :: [Flickr.Monad.FlickErrorType]
                     s :: GHC.Base.String ->
                   GHC.Show.showList__
                     @ Flickr.Monad.FlickErrorType
                     Flickr.Monad.$w$cshowsPrec
                     ls
                     s) -}
599e883a42e77415365217c4b7d85a50
  $fShowFlickErrorType_$cshowsPrec :: GHC.Types.Int
                                      -> Flickr.Monad.FlickErrorType
                                      -> GHC.Show.ShowS
    {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, True)
                  (\ w :: GHC.Types.Int
                     w1 :: Flickr.Monad.FlickErrorType
                     w2 :: GHC.Base.String ->
                   Flickr.Monad.$w$cshowsPrec w1 w2) -}
875f5941a2d953944d01ea4ce437833e
  $fShowSomeFlickException :: GHC.Show.Show
                                  Flickr.Monad.SomeFlickException
    DFunId[0]
    {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
       Unfolding: DFun:.
                    @ Flickr.Monad.SomeFlickException
                    Flickr.Monad.$fShowSomeFlickException_$cshowsPrec
                    Flickr.Monad.$fShowSomeFlickException_$cshow
                    Flickr.Monad.$fShowSomeFlickException_$cshowList -}
875f5941a2d953944d01ea4ce437833e
  $fShowSomeFlickException1 :: Flickr.Monad.SomeFlickException
                               -> GHC.Show.ShowS
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ x :: Flickr.Monad.SomeFlickException
                     s :: GHC.Base.String ->
                   case x of wild { Flickr.Monad.SomeFlickException e $dException e1 ->
                   GHC.Base.++
                     @ GHC.Types.Char
                     (GHC.Show.show @ e (GHC.Exception.$p2Exception @ e $dException) e1)
                     s }) -}
875f5941a2d953944d01ea4ce437833e
  $fShowSomeFlickException_$cshow :: Flickr.Monad.SomeFlickException
                                     -> GHC.Base.String
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
       Unfolding: (\ ds :: Flickr.Monad.SomeFlickException ->
                   case ds of wild { Flickr.Monad.SomeFlickException e $dException e1 ->
                   GHC.Show.show
                     @ e
                     (GHC.Exception.$p2Exception @ e $dException)
                     e1 }) -}
875f5941a2d953944d01ea4ce437833e
  $fShowSomeFlickException_$cshowList :: [Flickr.Monad.SomeFlickException]
                                         -> GHC.Show.ShowS
    {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
       Unfolding: (\ ls :: [Flickr.Monad.SomeFlickException]
                     s :: GHC.Base.String ->
                   GHC.Show.showList__
                     @ Flickr.Monad.SomeFlickException
                     Flickr.Monad.$fShowSomeFlickException1
                     ls
                     s) -}
875f5941a2d953944d01ea4ce437833e
  $fShowSomeFlickException_$cshowsPrec :: GHC.Types.Int
                                          -> Flickr.Monad.SomeFlickException
                                          -> GHC.Show.ShowS
    {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
       Unfolding: InlineRule (3, True, False)
                  (\ ds :: GHC.Types.Int
                     x :: Flickr.Monad.SomeFlickException
                     s :: GHC.Base.String ->
                   case x of wild { Flickr.Monad.SomeFlickException e $dException e1 ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b
                        c
                        n
                        (GHC.Show.show
                           @ e
                           (GHC.Exception.$p2Exception @ e $dException)
                           e1))
                     s }) -}
7d6dc1604d1bc6ae0bd1a14aecf51341
  $fTypeableFlickErr :: Data.Typeable.Internal.Typeable
                            * Flickr.Monad.FlickErr
    DFunId[0]
    {- Arity: 1, Strictness: <L,A>m, Inline: INLINE (sat-args=0),
       Unfolding: InlineRule (0, False, True)
                  Flickr.Monad.$fExceptionFlickErr_$ctypeRep#
                    `cast`
                  (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                            <*>_N <Flickr.Monad.FlickErr>_N)) -}
875f5941a2d953944d01ea4ce437833e
  $fTypeableSomeFlickException :: Data.Typeable.Internal.Typeable
                                      * Flickr.Monad.SomeFlickException
    DFunId[0]
    {- Arity: 1, Strictness: <L,A>m, Inline: INLINE (sat-args=0),
       Unfolding: InlineRule (0, False, True)
                  Flickr.Monad.$fExceptionSomeFlickException_$ctypeRep#
                    `cast`
                  (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                            <*>_N <Flickr.Monad.SomeFlickException>_N)) -}
599e883a42e77415365217c4b7d85a50
  $w$cshowsPrec :: Flickr.Monad.FlickErrorType
                   -> GHC.Base.String
                   -> [GHC.Types.Char]
    {- Arity: 2, Strictness: <S,1*U><L,1*U>,
       Unfolding: (\ w :: Flickr.Monad.FlickErrorType
                     w1 :: GHC.Base.String ->
                   case w of wild {
                     Flickr.Monad.UnexpectedResponse
                     -> GHC.Base.++ @ GHC.Types.Char Flickr.Monad.$fShowFlickErr7 w1
                     Flickr.Monad.MissingStatus
                     -> GHC.Base.++ @ GHC.Types.Char Flickr.Monad.$fShowFlickErr6 w1
                     Flickr.Monad.EmptyResponse
                     -> GHC.Base.++ @ GHC.Types.Char Flickr.Monad.$fShowFlickErr5 w1
                     Flickr.Monad.IllformedError
                     -> GHC.Base.++ @ GHC.Types.Char Flickr.Monad.$fShowFlickErr4 w1
                     Flickr.Monad.FlickParseError
                     -> GHC.Base.++ @ GHC.Types.Char Flickr.Monad.$fShowFlickErr3 w1
                     Flickr.Monad.FlickrAPIError
                     -> GHC.Base.++
                          @ GHC.Types.Char
                          Flickr.Monad.$fShowFlickErr2
                          w1 }) -}
51274d6bb308c820709816bcd8909f25
  $wcatchFlickr :: (Flickr.Monad.FMEnv -> GHC.Types.IO a)
                   -> (Flickr.Monad.FlickErr -> Flickr.Monad.FM a)
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO a #)
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,C(C1(U))><L,C(U(1*C1(C1(U))))>,
       Unfolding: (\ @ a1
                     ww :: Flickr.Monad.FMEnv -> GHC.Types.IO a1
                     w :: Flickr.Monad.FlickErr -> Flickr.Monad.FM a1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       GHC.Prim.catch#
                         @ a1
                         @ GHC.Exception.SomeException
                         (ww env) `cast` (GHC.Types.NTCo:IO[0] <a1>_R)
                         (\ e1 :: GHC.Exception.SomeException ->
                          case Flickr.Monad.$fExceptionFlickErr_$sflickFromException
                                 e1 of wild {
                            Data.Maybe.Nothing
                            -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a1 e1
                            Data.Maybe.Just e'
                            -> case w e' of wild1 { Flickr.Monad.FM act ->
                               (act env) `cast` (GHC.Types.NTCo:IO[0] <a1>_R) } })
                         eta)
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R)) #)) -}
754961530c475c2051a7f4d584b0d5aa
  $wflickCall :: GHC.Base.String
                 -> [(GHC.Base.String, GHC.Base.String)]
                 -> (# Flickr.Monad.FMEnv -> GHC.Types.IO GHC.Base.String #)
    {- Arity: 2, Strictness: <L,U><L,U> -}
e0a0469b7f7a2553e5dc5dd13b2d60f5
  $wflickCall_ :: GHC.Base.String
                  -> [(GHC.Base.String, GHC.Base.String)]
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: GHC.Base.String
                     w1 :: [(GHC.Base.String, GHC.Base.String)] ->
                   case Flickr.Monad.$wflickCall w w1 of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left e
                         -> case GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Text.XML.Light.Types.Element
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException e)
                                   ipv
                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                            of {}
                         Data.Either.Right r -> (# ipv, GHC.Tuple.() #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) #) }) -}
fbd054e20863a8c2359e31df87f4e08e
  type ErrM a = Data.Either.Either Flickr.Monad.FlickErr a
9e0a04bb4803c174c013b2fb8be73ec0
  data FM a
    No C type associated
    Roles: [representational]
    RecFlag NonRecursive, Not promotable
    = FM :: (Flickr.Monad.FMEnv -> GHC.Types.IO a) -> FM a Stricts: _
    FamilyInstance: none
d9e78c6f04e63bd2cf9f505d4221dfd9
  data FMEnv
    No C type associated
    RecFlag NonRecursive, Not promotable
    = FMEnv :: Util.Keys.APIKey -> GHC.Types.Bool -> GHC.Types.Bool
               -> (Data.Maybe.Maybe GHC.Types.Int)
               -> (Data.Maybe.Maybe GHC.Types.Int) -> GHC.Types.Bool
               -> (Data.Maybe.Maybe [GHC.Base.String])
               -> (Data.Maybe.Maybe GHC.Base.String)
               -> (Data.Maybe.Maybe GHC.Base.String)
               -> (Data.Maybe.Maybe GHC.Base.String)
               -> (Data.Maybe.Maybe GHC.Base.String) -> FMEnv
        Stricts: _ _ _ _ _ _ _ _ _ _ _
        Fields: fm_api_key fm_is_signed fm_post_method fm_per_page fm_page fm_is_paged fm_include_props fm_perm_level fm_auth_token fm_auth_mini_token fm_api_base
    FamilyInstance: none
7d6dc1604d1bc6ae0bd1a14aecf51341
  data FlickErr
    No C type associated
    RecFlag NonRecursive, Not promotable
    = FlickErr :: GHC.Types.Int -> Flickr.Monad.FlickErrorType
                  -> GHC.Base.String -> (Data.Maybe.Maybe GHC.Base.String)
                  -> GHC.Base.String -> FlickErr
        Stricts: _ _ _ _ _
        Fields: flickErrorCode flickErrorType flickErrorMsg flickErrorLoc flickErrorSource
    FamilyInstance: none
599e883a42e77415365217c4b7d85a50
  data FlickErrorType
    No C type associated
    RecFlag NonRecursive, Promotable
    = UnexpectedResponse :: FlickErrorType |
      MissingStatus :: FlickErrorType |
      EmptyResponse :: FlickErrorType |
      IllformedError :: FlickErrorType |
      FlickParseError :: FlickErrorType |
      FlickrAPIError :: FlickErrorType
    FamilyInstance: none
875f5941a2d953944d01ea4ce437833e
  data SomeFlickException
    No C type associated
    RecFlag NonRecursive, Not promotable
    = SomeFlickException :: GHC.Exception.Exception e =>
                            e -> SomeFlickException
        Stricts: _
    FamilyInstance: none
d599f0f819c38884c361ff887912dc0b
  api_base :: Util.Fetch.URLString
    {- Unfolding: (GHC.CString.unpackCString#
                     "http://api.flickr.com/services/rest/"#) -}
d635ce9502d470d8eea1fc2908743bbf
  auth_base :: Util.Fetch.URLString
    {- Unfolding: (GHC.CString.unpackCString#
                     "http://api.flickr.com/services/auth/?"#) -}
16850bf39fe313a99d4c2e8943eddd04
  catchFlickr :: Flickr.Monad.FM a
                 -> (Flickr.Monad.FlickErr -> Flickr.Monad.FM a)
                 -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs,
       Strictness: <S,1*U(C(C1(U)))><L,C(U(1*C1(C1(U))))>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1
                     w :: Flickr.Monad.FM a1
                     w1 :: Flickr.Monad.FlickErr -> Flickr.Monad.FM a1 ->
                   case w of ww { Flickr.Monad.FM ww1 ->
                   case Flickr.Monad.$wcatchFlickr @ a1 ww1 w1 of ww2 { (##) ww3 ->
                   Flickr.Monad.FM @ a1 ww3 } }) -}
260e72ebca185e13b36f9373fb446949
  checkResponse :: GHC.Base.String
                   -> Flickr.Monad.ErrM Text.XML.Light.Types.Element
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ s :: GHC.Base.String ->
                   case Text.XML.Light.Input.parseXMLDoc_strip
                          (Text.XML.Light.Input.parse
                             (Text.XML.Light.Lexer.tokens'
                                (Text.XML.Light.Lexer.linenumber
                                   @ GHC.Base.String
                                   Text.XML.Light.Lexer.$fXmlSource[]_$cuncons
                                     `cast`
                                   (Sym (Text.XML.Light.Lexer.NTCo:XmlSource[0]
                                             <GHC.Base.String>_N))
                                   Text.XML.Light.Lexer.tokens1
                                   s))) of wild {
                     Data.Maybe.Nothing
                     -> Data.Either.Left
                          @ Flickr.Monad.FlickErr
                          @ Text.XML.Light.Types.Element
                          (Flickr.Monad.FlickErr
                             Flickr.Monad.checkResponse14
                             Flickr.Monad.UnexpectedResponse
                             (GHC.Types.[] @ GHC.Types.Char)
                             (Data.Maybe.Nothing @ GHC.Base.String)
                             s)
                     Data.Maybe.Just e
                     -> case e of wild1 { Text.XML.Light.Types.Element ds1 ds2 ds3 ds4 ->
                        case ds1 of ww { Text.XML.Light.Types.QName ww1 ww2 ww3 ->
                        case GHC.Classes.$fOrd[]_$s$ccompare
                               ww1
                               Flickr.Monad.checkResponse13 of wild2 {
                          DEFAULT
                          -> Data.Either.Left
                               @ Flickr.Monad.FlickErr
                               @ Text.XML.Light.Types.Element
                               (Flickr.Monad.FlickErr
                                  Flickr.Monad.checkResponse14
                                  Flickr.Monad.UnexpectedResponse
                                  (GHC.Types.[] @ GHC.Types.Char)
                                  (Data.Maybe.Nothing @ GHC.Base.String)
                                  s)
                          GHC.Types.EQ
                          -> case ww2 of wild3 {
                               Data.Maybe.Nothing
                               -> case ww3 of wild4 {
                                    Data.Maybe.Nothing
                                    -> case GHC.List.lookup
                                              @ Text.XML.Light.Types.QName
                                              @ GHC.Base.String
                                              Text.XML.Light.Types.$fEqQName
                                              Flickr.Monad.checkResponse11
                                              (Flickr.Utils.pAttr_go ds2) of wild5 {
                                         Data.Maybe.Nothing
                                         -> Data.Either.Left
                                              @ Flickr.Monad.FlickErr
                                              @ Text.XML.Light.Types.Element
                                              (Flickr.Monad.FlickErr
                                                 Flickr.Monad.checkResponse14
                                                 Flickr.Monad.MissingStatus
                                                 (GHC.Types.[] @ GHC.Types.Char)
                                                 (Data.Maybe.Nothing @ GHC.Base.String)
                                                 s)
                                         Data.Maybe.Just ds
                                         -> case GHC.Base.eqString
                                                   ds
                                                   Flickr.Monad.checkResponse10 of wild6 {
                                              GHC.Types.False
                                              -> case GHC.Base.eqString
                                                        ds
                                                        Flickr.Monad.checkResponse9 of wild7 {
                                                   GHC.Types.False
                                                   -> Data.Either.Left
                                                        @ Flickr.Monad.FlickErr
                                                        @ Text.XML.Light.Types.Element
                                                        (Flickr.Monad.FlickErr
                                                           Flickr.Monad.checkResponse14
                                                           Flickr.Monad.IllformedError
                                                           (GHC.Types.[] @ GHC.Types.Char)
                                                           (Data.Maybe.Nothing @ GHC.Base.String)
                                                           s)
                                                   GHC.Types.True
                                                   -> case Text.XML.Light.Proc.elChildren_go
                                                             ds3 of wild8 {
                                                        [] -> Flickr.Monad.checkResponse8
                                                        : x ds5
                                                        -> Data.Either.Right
                                                             @ Flickr.Monad.FlickErr
                                                             @ Text.XML.Light.Types.Element
                                                             x } }
                                              GHC.Types.True
                                              -> case Text.XML.Light.Proc.$wfindChildren
                                                        Flickr.Monad.checkResponse6
                                                        ds3 of wild7 {
                                                   []
                                                   -> Data.Either.Left
                                                        @ Flickr.Monad.FlickErr
                                                        @ Text.XML.Light.Types.Element
                                                        (Flickr.Monad.FlickErr
                                                           Flickr.Monad.checkResponse14
                                                           Flickr.Monad.IllformedError
                                                           (GHC.Types.[] @ GHC.Types.Char)
                                                           (Data.Maybe.Nothing @ GHC.Base.String)
                                                           s)
                                                   : a1 ds5
                                                   -> case a1 of ww4 { Text.XML.Light.Types.Element ww5 ww6 ww7 ww8 ->
                                                      case GHC.List.lookup
                                                             @ Text.XML.Light.Types.QName
                                                             @ GHC.Base.String
                                                             Text.XML.Light.Types.$fEqQName
                                                             Flickr.Monad.checkResponse4
                                                             (Flickr.Utils.pAttr_go ww6) of wild8 {
                                                        Data.Maybe.Nothing
                                                        -> Data.Either.Left
                                                             @ Flickr.Monad.FlickErr
                                                             @ Text.XML.Light.Types.Element
                                                             (Flickr.Monad.FlickErr
                                                                Flickr.Monad.checkResponse14
                                                                Flickr.Monad.IllformedError
                                                                (GHC.Types.[] @ GHC.Types.Char)
                                                                (Data.Maybe.Nothing
                                                                   @ GHC.Base.String)
                                                                s)
                                                        Data.Maybe.Just v_str
                                                        -> case Text.ParserCombinators.ReadP.run
                                                                  @ GHC.Types.Int
                                                                  Flickr.Monad.checkResponse3
                                                                  v_str of wild9 {
                                                             []
                                                             -> Data.Either.Left
                                                                  @ Flickr.Monad.FlickErr
                                                                  @ Text.XML.Light.Types.Element
                                                                  (Flickr.Monad.FlickErr
                                                                     Flickr.Monad.checkResponse14
                                                                     Flickr.Monad.IllformedError
                                                                     (GHC.Types.[] @ GHC.Types.Char)
                                                                     (Data.Maybe.Nothing
                                                                        @ GHC.Base.String)
                                                                     s)
                                                             : ds6 ds7
                                                             -> case ds6 of wild10 { (,) v ds8 ->
                                                                Data.Either.Left
                                                                  @ Flickr.Monad.FlickErr
                                                                  @ Text.XML.Light.Types.Element
                                                                  (Flickr.Monad.FlickErr
                                                                     v
                                                                     Flickr.Monad.FlickrAPIError
                                                                     (case GHC.List.lookup
                                                                             @ Text.XML.Light.Types.QName
                                                                             @ GHC.Base.String
                                                                             Text.XML.Light.Types.$fEqQName
                                                                             Flickr.Monad.checkResponse1
                                                                             (Flickr.Utils.pAttr_go
                                                                                ww6) of wild11 {
                                                                        Data.Maybe.Nothing
                                                                        -> GHC.Types.[]
                                                                             @ GHC.Types.Char
                                                                        Data.Maybe.Just v1 -> v1 })
                                                                     (Data.Maybe.Nothing
                                                                        @ GHC.Base.String)
                                                                     s) } } } } } } }
                                    Data.Maybe.Just a2
                                    -> Data.Either.Left
                                         @ Flickr.Monad.FlickErr
                                         @ Text.XML.Light.Types.Element
                                         (Flickr.Monad.FlickErr
                                            Flickr.Monad.checkResponse14
                                            Flickr.Monad.UnexpectedResponse
                                            (GHC.Types.[] @ GHC.Types.Char)
                                            (Data.Maybe.Nothing @ GHC.Base.String)
                                            s) }
                               Data.Maybe.Just ipv
                               -> Data.Either.Left
                                    @ Flickr.Monad.FlickErr
                                    @ Text.XML.Light.Types.Element
                                    (Flickr.Monad.FlickErr
                                       Flickr.Monad.checkResponse14
                                       Flickr.Monad.UnexpectedResponse
                                       (GHC.Types.[] @ GHC.Types.Char)
                                       (Data.Maybe.Nothing @ GHC.Base.String)
                                       s) } } } } }) -}
7bbc684445c6ecde00880e17d065248b
  checkResponse1 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Monad.checkResponse2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
f538e392e405fd6c496294df721e5da8
  checkResponse10 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "fail"#) -}
a4b99e01e0daf69d2ecdf34909b76b16
  checkResponse11 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Monad.checkResponse12
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
44e1a168b76be0437a3df206ffb6ec1b
  checkResponse12 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "stat"#) -}
3e930684bcc948f1104b9f2ac64aa83b
  checkResponse13 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "rsp"#) -}
a9658406cc24a12d8216da7feb771124
  checkResponse14 :: GHC.Types.Int
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-1)) -}
479527223ab127bae512da7283662b33
  checkResponse2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "msg"#) -}
fdde40a5223d686e7e6c1240536e98f9
  checkResponse3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
    {- Unfolding: (GHC.Read.$fReadInt4
                     GHC.Read.$fReadInt_$sconvertInt
                     Text.ParserCombinators.ReadPrec.minPrec
                     @ GHC.Types.Int
                     (Text.ParserCombinators.ReadP.$fMonadP_$creturn
                        @ GHC.Types.Int)) -}
986b9e1f51e23fc9edb567957b6a7c45
  checkResponse4 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Monad.checkResponse5
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
9e5ca149bf2d47cdfc0daa057bc88965
  checkResponse5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "code"#) -}
9809b87da47506f733f9ab25a68512ca
  checkResponse6 :: Text.XML.Light.Types.QName
    {- Strictness: m,
       Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Monad.checkResponse7
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
4fe7ff08cf4333147fa05b4ec7445303
  checkResponse7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "err"#) -}
37254f40930e4f6fbc71a26d7fbfa974
  checkResponse8 :: Data.Either.Either
                        Flickr.Monad.FlickErr Text.XML.Light.Types.Element
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (Data.Either.Right
                     @ Flickr.Monad.FlickErr
                     @ Text.XML.Light.Types.Element
                     Text.XML.Light.Types.blank_element) -}
f104178f4044cdfe5283b49ea5fef9c0
  checkResponse9 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "ok"#) -}
051cc948abbcd461f14365b73ed185aa
  eiArg :: GHC.Base.String
           -> GHC.Base.String
           -> Data.Either.Either GHC.Base.String GHC.Base.String
           -> [(GHC.Base.String, GHC.Base.String)]
           -> [(GHC.Base.String, GHC.Base.String)]
    {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U><L,U>m2,
       Unfolding: InlineRule (4, True, False)
                  (\ t :: GHC.Base.String
                     ds :: GHC.Base.String
                     ds1 :: Data.Either.Either GHC.Base.String GHC.Base.String
                     xs :: [(GHC.Base.String, GHC.Base.String)] ->
                   case ds1 of wild {
                     Data.Either.Left x
                     -> GHC.Types.: @ (GHC.Base.String, GHC.Base.String) (t, x) xs
                     Data.Either.Right x
                     -> GHC.Types.:
                          @ (GHC.Base.String, GHC.Base.String)
                          (ds, x)
                          xs }) -}
2579a2184d6bee9861eb81b7266a8437
  flick :: Flickr.Monad.FM a -> GHC.Types.IO a
    {- Arity: 2, Strictness: <S,1*U(1*C1(C1(U)))><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Flickr.Monad.flick1
                    `cast`
                  (forall a1.
                   <Flickr.Monad.FM a1>_R ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R)) -}
8f4558c67e1ae7e3f5098fdfda20dd43
  flick1 :: Flickr.Monad.FM a
            -> GHC.Prim.State# GHC.Prim.RealWorld
            -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
    {- Arity: 2, Strictness: <S,1*U(1*C1(C1(U)))><L,U>,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1
                     a2 :: Flickr.Monad.FM a1
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   Flickr.Monad.flick2 @ a1 Util.Keys.hsflickr_mobile_key a2 eta) -}
61fddc6a3209e328ff50235fc23cbc05
  flick2 :: Util.Keys.APIKey
            -> Flickr.Monad.FM a
            -> GHC.Prim.State# GHC.Prim.RealWorld
            -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
    {- Arity: 3, Strictness: <L,U><S,1*U(1*C1(C1(U)))><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ @ a1
                     w :: Util.Keys.APIKey
                     w1 :: Flickr.Monad.FM a1
                     w2 :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case w1 of ww { Flickr.Monad.FM ww1 ->
                   GHC.Prim.catch#
                     @ a1
                     @ GHC.Exception.SomeException
                     (ww1
                        (Flickr.Monad.FMEnv
                           w
                           GHC.Types.False
                           GHC.Types.False
                           (Data.Maybe.Nothing @ GHC.Types.Int)
                           (Data.Maybe.Nothing @ GHC.Types.Int)
                           GHC.Types.False
                           (Data.Maybe.Nothing @ [GHC.Base.String])
                           (Data.Maybe.Nothing @ GHC.Base.String)
                           (Data.Maybe.Nothing @ GHC.Base.String)
                           (Data.Maybe.Nothing @ GHC.Base.String)
                           (Data.Maybe.Nothing @ GHC.Base.String)))
                       `cast`
                     (GHC.Types.NTCo:IO[0] <a1>_R)
                     (Flickr.Monad.flick3 @ a1)
                     w2 }) -}
3a095c2ac3b66a88d7f9eb67cc3ad897
  flick3 :: GHC.Exception.SomeException
            -> GHC.Prim.State# GHC.Prim.RealWorld
            -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
    {- Arity: 2, Strictness: <L,U><L,U>b -}
aea39b0f6723bacc4d08a522f01e3c0f
  flickAPI :: Util.Keys.APIKey -> Flickr.Monad.FM a -> GHC.Types.IO a
    {- Arity: 3, Strictness: <L,U><S,1*U(1*C1(C1(U)))><L,U>,
       Unfolding: InlineRule (0, True, True)
                  Flickr.Monad.flick2
                    `cast`
                  (forall a1.
                   <Util.Keys.APIKey>_R
                   ->_R <Flickr.Monad.FM a1>_R
                   ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R)) -}
251ebfad767c69b4942bfcec2091f0ff
  flickCall :: GHC.Base.String
               -> [(GHC.Base.String, GHC.Base.String)]
               -> Flickr.Monad.FM GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: GHC.Base.String
                     w1 :: [(GHC.Base.String, GHC.Base.String)] ->
                   case Flickr.Monad.$wflickCall w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ GHC.Base.String ww1 }) -}
a4b037ad88ec2630c5c3c4b581c42182
  flickCall_ :: GHC.Base.String
                -> [(GHC.Base.String, GHC.Base.String)]
                -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: GHC.Base.String
                     w1 :: [(GHC.Base.String, GHC.Base.String)] ->
                   case Flickr.Monad.$wflickCall_ w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
bb5788ad4bfea24a52298ca86edc32f3
  flickError :: Flickr.Monad.FlickErr
    {- HasNoCafRefs, Strictness: m,
       Unfolding: (Flickr.Monad.FlickErr
                     Flickr.Monad.checkResponse14
                     Flickr.Monad.UnexpectedResponse
                     (GHC.Types.[] @ GHC.Types.Char)
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (GHC.Types.[] @ GHC.Types.Char)) -}
1f398f9ef67facf9b4b765f8138a6bd2
  flickErrorCode :: Flickr.Monad.FlickErr -> GHC.Types.Int
    RecSel Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(SLLLL),1*U(1*U(U),A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FlickErr ->
                   case ds of wild { Flickr.Monad.FlickErr ds1 ds2 ds3 ds4 ds5 ->
                   ds1 }) -}
b11b120ac890d2f3452e35d3c14d35b9
  flickErrorLoc :: Flickr.Monad.FlickErr
                   -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FlickErr ->
                   case ds of wild { Flickr.Monad.FlickErr ds1 ds2 ds3 ds4 ds5 ->
                   ds4 }) -}
3120bdce1ec25e8e3c63c4e44e88d3af
  flickErrorMsg :: Flickr.Monad.FlickErr -> GHC.Base.String
    RecSel Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FlickErr ->
                   case ds of wild { Flickr.Monad.FlickErr ds1 ds2 ds3 ds4 ds5 ->
                   ds3 }) -}
773c9158e7aff8c500ec10fd8b3ce7a7
  flickErrorSource :: Flickr.Monad.FlickErr -> GHC.Base.String
    RecSel Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FlickErr ->
                   case ds of wild { Flickr.Monad.FlickErr ds1 ds2 ds3 ds4 ds5 ->
                   ds5 }) -}
58a235868e700f46d7077c426b04353e
  flickErrorType :: Flickr.Monad.FlickErr
                    -> Flickr.Monad.FlickErrorType
    RecSel Flickr.Monad.FlickErr
    {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FlickErr ->
                   case ds of wild { Flickr.Monad.FlickErr ds1 ds2 ds3 ds4 ds5 ->
                   ds2 }) -}
87dcca962c09a06948e8105a869bb688
  flickFromException :: GHC.Exception.Exception e
                        -> GHC.Exception.SomeException
                        -> Data.Maybe.Maybe e
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(1*C1(U),A,A,A)><S,1*U>,
       Unfolding: (\ @ e
                     $dException :: GHC.Exception.Exception e
                     eta :: GHC.Exception.SomeException ->
                   case eta of wild { GHC.Exception.SomeException e10 $dException1 e2 ->
                   case (GHC.Exception.$p1Exception @ e10 $dException1)
                          `cast`
                        (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e10>_N)
                          (GHC.Prim.proxy#
                             @ *
                             @ e10) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ->
                   case dt of wild2 {
                     DEFAULT -> Data.Maybe.Nothing @ e
                     __word 14457301338598565400
                     -> case dt1 of wild3 {
                          DEFAULT -> Data.Maybe.Nothing @ e
                          __word 7360164807085354615
                          -> case e2
                                    `cast`
                                  (UnivCo representational e10 Flickr.Monad.SomeFlickException) of wild4 { Flickr.Monad.SomeFlickException e1 $dException2 a1 ->
                             case (GHC.Exception.$p1Exception @ e1 $dException2)
                                    `cast`
                                  (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e1>_N)
                                    (GHC.Prim.proxy#
                                       @ *
                                       @ e1) of wild5 { Data.Typeable.Internal.TypeRep dt2 dt3 ds1 ds4 ->
                             case (GHC.Exception.$p1Exception @ e $dException)
                                    `cast`
                                  (Data.Typeable.Internal.NTCo:Typeable[0] <*>_N <e>_N)
                                    (GHC.Prim.proxy#
                                       @ *
                                       @ e) of wild6 { Data.Typeable.Internal.TypeRep dt4 dt5 ds5 ds6 ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqWord# dt2 dt4) of wild7 {
                               GHC.Types.False -> Data.Maybe.Nothing @ e
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.eqWord# dt3 dt5) of wild8 {
                                    GHC.Types.False -> Data.Maybe.Nothing @ e
                                    GHC.Types.True
                                    -> Data.Maybe.Just
                                         @ e
                                         a1
                                           `cast`
                                         (UnivCo representational e1 e) } } } } } } } } }) -}
94fda8bbd5bcafc66158b8ac4bd0c90b
  flickToException :: GHC.Exception.Exception e
                      -> e
                      -> GHC.Exception.SomeException
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ @ e
                     $dException :: GHC.Exception.Exception e
                     eta :: e ->
                   Flickr.Monad.$fExceptionSomeFlickException_$ctoException
                     (Flickr.Monad.SomeFlickException @ e $dException eta)) -}
e491e152a5d427431ba516a4c3704787
  flickTranslate :: (GHC.Base.String -> Flickr.Monad.ErrM a)
                    -> Flickr.Monad.FM GHC.Base.String
                    -> Flickr.Monad.FM a
    {- Arity: 2, Strictness: <L,C(U)><S,1*U(C(C1(U(U,U))))>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1
                     w :: GHC.Base.String -> Flickr.Monad.ErrM a1
                     w1 :: Flickr.Monad.FM GHC.Base.String ->
                   case w1 of ww { Flickr.Monad.FM ww1 ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv
                        s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      case w ipv1 of wild {
                        Data.Either.Left e
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ a1
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException e)
                             ipv
                        Data.Either.Right r -> (# ipv, r #) } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R)) }) -}
34898e4ffd59bc42983538432cb8d2c6
  flickrCall :: GHC.Base.String
                -> [(GHC.Base.String, GHC.Base.String)]
                -> Flickr.Monad.FM GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>m,
       Unfolding: InlineRule (0, True, True) Flickr.Monad.flickCall -}
bc41cb7281ea728fb0c34ad3e2b74161
  fm_api_base :: Flickr.Monad.FMEnv
                 -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,1*U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds11 }) -}
cbbe1a44208c509bbd6e59be78da393e
  fm_api_key :: Flickr.Monad.FMEnv -> Util.Keys.APIKey
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(SLLLLLLLLLL),1*U(1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds1 }) -}
4c09435187bbfc78694768d513d1172f
  fm_auth_mini_token :: Flickr.Monad.FMEnv
                        -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,1*U,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds10 }) -}
9a890d618b671ee99ad1d6f306a0e9dc
  fm_auth_token :: Flickr.Monad.FMEnv
                   -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds9 }) -}
961181bdd4e8f6c515b0bdd590dc3aa1
  fm_include_props :: Flickr.Monad.FMEnv
                      -> Data.Maybe.Maybe [GHC.Base.String]
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLSLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds7 }) -}
9a1882c5f6d930576be7014fe623430c
  fm_is_paged :: Flickr.Monad.FMEnv -> GHC.Types.Bool
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLSLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds6 }) -}
219a1c34b835ceca0003e50ab3334a7d
  fm_is_signed :: Flickr.Monad.FMEnv -> GHC.Types.Bool
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LSLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds2 }) -}
d1e09b6df3d4a2436be45ba33a48c92d
  fm_page :: Flickr.Monad.FMEnv -> Data.Maybe.Maybe GHC.Types.Int
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLSLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds5 }) -}
458a363ef42edcdbef06e7bf1bcf46b1
  fm_per_page :: Flickr.Monad.FMEnv -> Data.Maybe.Maybe GHC.Types.Int
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLSLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds4 }) -}
679f0687ac9a34d71755b944c4897665
  fm_perm_level :: Flickr.Monad.FMEnv
                   -> Data.Maybe.Maybe GHC.Base.String
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLLLLLLSLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds8 }) -}
6339bded817408ba14c0bb35ce88a38d
  fm_post_method :: Flickr.Monad.FMEnv -> GHC.Types.Bool
    RecSel Flickr.Monad.FMEnv
    {- Arity: 1, HasNoCafRefs,
       Strictness: <S(LLSLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: Flickr.Monad.FMEnv ->
                   case ds of wild { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                   ds3 }) -}
982bb82053e457298f87c9dfe9fc30ee
  genLoginURL :: GHC.Base.String
                 -> GHC.Base.String
                 -> GHC.Base.String
                 -> GHC.Base.String
                 -> GHC.Base.String
    {- Arity: 4, Strictness: <L,U><L,1*U><L,U><L,U> -}
90ed3fae60dcdb674a640979c9ca81cd
  getAPIKey :: Flickr.Monad.FM Util.Keys.APIKey
    {- HasNoCafRefs, Strictness: m,
       Unfolding: (Flickr.Monad.FM
                     @ Util.Keys.APIKey
                     Flickr.Monad.getAPIKey1
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Util.Keys.APIKey>_R))) -}
a344936c95365f0d7db00997864c02fe
  getAPIKey1 :: Flickr.Monad.FMEnv
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Util.Keys.APIKey #)
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A)><L,U>,
       Unfolding: (\ env :: Flickr.Monad.FMEnv
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta,
                      case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      ds } #)) -}
78b8503e7c704db88b5c762f76e3f9da
  getAuthMiniToken :: Flickr.Monad.FM GHC.Base.String
    {- HasNoCafRefs, Strictness: m,
       Unfolding: (Flickr.Monad.FM
                     @ GHC.Base.String
                     Flickr.Monad.getAuthMiniToken1
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
32199de4b1b63c68aea1ea574192760d
  getAuthMiniToken1 :: Flickr.Monad.FMEnv
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,1*U,A)><L,U>,
       Unfolding: (\ env :: Flickr.Monad.FMEnv
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta,
                      case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds9 of wild1 {
                        Data.Maybe.Nothing -> GHC.Types.[] @ GHC.Types.Char
                        Data.Maybe.Just v -> v } } #)) -}
bb2782b22b3b4c92f3e6f353c393180a
  getAuthToken :: Flickr.Monad.FM GHC.Base.String
    {- HasNoCafRefs, Strictness: m,
       Unfolding: (Flickr.Monad.FM
                     @ GHC.Base.String
                     Flickr.Monad.getAuthToken1
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
915b213aa9cbd8c19b45ff5c03967634
  getAuthToken1 :: Flickr.Monad.FMEnv
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,A,A,A,A,A,A,A,1*U,A,A)><L,U>,
       Unfolding: (\ env :: Flickr.Monad.FMEnv
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta,
                      case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds8 of wild1 {
                        Data.Maybe.Nothing -> GHC.Types.[] @ GHC.Types.Char
                        Data.Maybe.Just v -> v } } #)) -}
829d375f052c6d660d09683ebf72f3b3
  getBaseURL :: Flickr.Monad.FM Util.Fetch.URLString
    {- Strictness: m,
       Unfolding: (Flickr.Monad.FM
                     @ Util.Fetch.URLString
                     Flickr.Monad.getBaseURL1
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Util.Fetch.URLString>_R))) -}
4c4022e141450d4ff0528a4bd2062e43
  getBaseURL1 :: Flickr.Monad.FMEnv
                 -> GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, Util.Fetch.URLString #)
    {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*U)><L,U>,
       Unfolding: (\ env :: Flickr.Monad.FMEnv
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta,
                      case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds10 of wild1 {
                        Data.Maybe.Nothing -> Flickr.Monad.api_base
                        Data.Maybe.Just v -> v } } #)) -}
c8d40cfb24047e5772a512268d691c00
  getMobileAuthURL :: Flickr.Monad.FM Util.Fetch.URLString
    {- HasNoCafRefs, Strictness: m,
       Unfolding: (Flickr.Monad.FM
                     @ Util.Fetch.URLString
                     Flickr.Monad.getMobileAuthURL1
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Util.Fetch.URLString>_R))) -}
2bf34684ff1aee25b80c7760b77a8cc3
  getMobileAuthURL1 :: Flickr.Monad.FMEnv
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, Util.Fetch.URLString #)
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*U)><L,U>,
       Unfolding: (\ env :: Flickr.Monad.FMEnv
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   (# eta,
                      case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds10 of wild1 {
                        Data.Maybe.Nothing -> GHC.Types.[] @ GHC.Types.Char
                        Data.Maybe.Just v -> v } } #)) -}
40c31e83ed1d1ea69e7dd32d112beb57
  handleFlickr :: (Flickr.Monad.FlickErr -> Flickr.Monad.FM a)
                  -> Flickr.Monad.FM a
                  -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,C(U(1*C1(C1(U))))><S,1*U(C(C1(U)))>m,
       Unfolding: InlineRule (2, True, True)
                  (\ @ a1
                     h :: Flickr.Monad.FlickErr -> Flickr.Monad.FM a1
                     e :: Flickr.Monad.FM a1 ->
                   Flickr.Monad.catchFlickr @ a1 e h) -}
85019a12faaee5c2bad1a18226d8a82f
  liftIO :: GHC.Types.IO a -> Flickr.Monad.FM a
    {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 x :: GHC.Types.IO a1 ->
                   Flickr.Monad.FM @ a1 (\ ds :: Flickr.Monad.FMEnv -> x)) -}
c3c9ceb6cf2fc5ee33bd67fb297f08ca
  lsArg :: GHC.Base.String
           -> [GHC.Base.String]
           -> [(GHC.Base.String, GHC.Base.String)]
           -> [(GHC.Base.String, GHC.Base.String)]
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U>,
       Unfolding: (\ ds :: GHC.Base.String
                     ds1 :: [GHC.Base.String]
                     xs :: [(GHC.Base.String, GHC.Base.String)] ->
                   case ds1 of wild {
                     [] -> xs
                     : ipv ipv1
                     -> GHC.Types.:
                          @ (GHC.Base.String, GHC.Base.String)
                          (ds,
                           Data.List.intercalate_$spoly_go
                             @ GHC.Types.Char
                             ipv
                             (Data.List.prependToAll
                                @ [GHC.Types.Char]
                                Flickr.Monad.lsArg1
                                ipv1))
                          xs }) -}
9cb56d2474e07059cc2e1d6e02902ca5
  lsArg1 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     Flickr.Monad.lsArg2
                     (GHC.Types.[] @ GHC.Types.Char)) -}
4ff438ce1b87e7150cdcd3276c29db19
  lsArg2 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ',') -}
fa8e1aa0b07207d002e5dac562d3d3bf
  mbArg :: GHC.Base.String
           -> Data.Maybe.Maybe GHC.Base.String
           -> [(GHC.Base.String, GHC.Base.String)]
           -> [(GHC.Base.String, GHC.Base.String)]
    {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U>,
       Unfolding: (\ ds :: GHC.Base.String
                     ds1 :: Data.Maybe.Maybe GHC.Base.String
                     xs :: [(GHC.Base.String, GHC.Base.String)] ->
                   case ds1 of wild {
                     Data.Maybe.Nothing -> xs
                     Data.Maybe.Just a1
                     -> GHC.Types.:
                          @ (GHC.Base.String, GHC.Base.String)
                          (ds, a1)
                          xs }) -}
91efd66d9b220f46acb61ca232122fdf
  mkLoginURL :: GHC.Base.String
                -> GHC.Base.String
                -> Flickr.Monad.FM GHC.Base.String
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: GHC.Base.String w1 :: GHC.Base.String ->
                   Flickr.Monad.FM
                     @ GHC.Base.String
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      (# eta,
                         Flickr.Monad.genLoginURL
                           (case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                            case ds of wild1 { Util.Keys.APIKey ds11 ds12 ds13 ds14 ->
                            ds12 } })
                           (case env of wild { Flickr.Monad.FMEnv ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                            case ds of wild1 { Util.Keys.APIKey ds11 ds12 ds13 ds14 ->
                            ds13 } })
                           w
                           w1 #))
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
7200a659586a304e5dc21b7f96938417
  onlyTheseProperties :: [GHC.Base.String]
                         -> Flickr.Monad.FM a
                         -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 ps :: [GHC.Base.String] ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   let {
                     lvl23 :: Data.Maybe.Maybe [GHC.Base.String]
                     = Data.Maybe.Just @ [GHC.Base.String] ps
                   } in
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           ds3
                           ds4
                           ds5
                           ds6
                           lvl23
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
83a5b823f456abdff62fe4d3a2b479e8
  pagedCall :: Data.Maybe.Maybe GHC.Types.Int
               -> Flickr.Monad.FM a
               -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1
                     mbPg :: Data.Maybe.Maybe GHC.Types.Int
                     ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           ds3
                           ds4
                           mbPg
                           GHC.Types.True
                           ds7
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
ebc82270611937ab5ebfce244f09c14d
  parseDoc :: (Text.XML.Light.Types.Element -> Data.Maybe.Maybe a)
              -> GHC.Base.String
              -> Flickr.Monad.ErrM a
    {- Arity: 2, Strictness: <L,1*C1(U)><L,U>,
       Unfolding: (\ @ a1
                     f :: Text.XML.Light.Types.Element -> Data.Maybe.Maybe a1
                     s :: GHC.Base.String ->
                   case Flickr.Monad.checkResponse s of wild {
                     Data.Either.Left err
                     -> Data.Either.Left @ Flickr.Monad.FlickErr @ a1 err
                     Data.Either.Right x
                     -> case f x of wild1 {
                          Data.Maybe.Nothing
                          -> Data.Either.Left
                               @ Flickr.Monad.FlickErr
                               @ a1
                               (Flickr.Monad.FlickErr
                                  Flickr.Monad.checkResponse14
                                  Flickr.Monad.FlickParseError
                                  (GHC.Types.[] @ GHC.Types.Char)
                                  (Data.Maybe.Nothing @ GHC.Base.String)
                                  (case GHC.List.$wlenAcc @ GHC.Types.Char s 0 of ww { DEFAULT ->
                                   case GHC.Show.$wshowSignedInt
                                          0
                                          ww
                                          (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                     (GHC.Types.: @ GHC.Types.Char Flickr.Monad.parseDoc1 s) } }))
                          Data.Maybe.Just res
                          -> Data.Either.Right @ Flickr.Monad.FlickErr @ a1 res } }) -}
c995c2ce4d65b7cb9084c9e1dfc27db1
  parseDoc1 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n') -}
b894fdcbd5b83d21dfa037dd8bba6dcf
  postMethod :: Flickr.Monad.FM a -> Flickr.Monad.FM a
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(C(U))>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
5014bd23041c573a7429282b0f2343ec
  replace_base :: Util.Fetch.URLString
    {- Unfolding: (GHC.CString.unpackCString#
                     "http://api.flickr.com/services/replace/"#) -}
703857a8d32044b789706c9235a9102e
  restGet :: GHC.Base.String
             -> [(GHC.Base.String, GHC.Base.String)]
             -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (Flickr.Monad.restGet1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <[(GHC.Base.String, GHC.Base.String)]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
f2f4281488883a4b00ded71320328090
  restGet1 :: GHC.Base.String
              -> [(GHC.Base.String, GHC.Base.String)]
              -> GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,U><L,U><L,U>,
       Unfolding: (\ a1 :: GHC.Base.String
                     kv :: [(GHC.Base.String, GHC.Base.String)]
                     s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case GHC.IO.Handle.Text.hPutStr2
                          GHC.IO.Handle.FD.stdout
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShowChar1
                             (GHC.Show.showLitString
                                (GHC.CString.unpackAppendCString#
                                   "DEBUG (Flickr/Monad.hs):"#
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      a1
                                      (case kv of wild {
                                         [] -> GHC.Types.[] @ GHC.Types.Char
                                         : ipv ipv1
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.restGet7
                                              (case GHC.Base.map
                                                      @ ([GHC.Types.Char], [GHC.Types.Char])
                                                      @ [GHC.Types.Char]
                                                      Flickr.Monad.restGet5
                                                      wild of wild1 {
                                                 [] -> GHC.Types.[] @ GHC.Types.Char
                                                 : x xs1
                                                 -> Data.List.intercalate_$spoly_go
                                                      @ GHC.Types.Char
                                                      x
                                                      (Data.List.prependToAll
                                                         @ [GHC.Types.Char]
                                                         Flickr.Monad.restGet3
                                                         xs1) }) })))
                                Flickr.Monad.restGet2))
                          GHC.Types.True
                          s of ds1 { (#,#) ipv ipv1 ->
                   Util.Fetch.readContentsURL1
                     (GHC.Base.++
                        @ GHC.Types.Char
                        a1
                        (case kv of wild {
                           [] -> GHC.Types.[] @ GHC.Types.Char
                           : ipv2 ipv3
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                Flickr.Monad.restGet7
                                (case GHC.Base.map
                                        @ ([GHC.Types.Char], [GHC.Types.Char])
                                        @ [GHC.Types.Char]
                                        Flickr.Monad.restGet5
                                        wild of wild1 {
                                   [] -> GHC.Types.[] @ GHC.Types.Char
                                   : x xs1
                                   -> Data.List.intercalate_$spoly_go
                                        @ GHC.Types.Char
                                        x
                                        (Data.List.prependToAll
                                           @ [GHC.Types.Char]
                                           Flickr.Monad.restGet3
                                           xs1) }) }))
                     ipv }) -}
76dc418285a66f2afb30c62e22cb427d
  restGet2 :: [GHC.Types.Char]
    {- HasNoCafRefs,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     GHC.Show.$fShowChar1
                     (GHC.Types.[] @ GHC.Types.Char)) -}
a73abfd7c75c111abae8bb000b2caf58
  restGet3 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     Flickr.Monad.restGet4
                     (GHC.Types.[] @ GHC.Types.Char)) -}
10cba33a8aaccd9391210692f09c02e9
  restGet4 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '&') -}
8b89dc1dae48fd8c13b0658b0ef08374
  restGet5 :: ([GHC.Types.Char], [GHC.Types.Char])
              -> [GHC.Types.Char]
    {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>,
       Unfolding: InlineRule (1, True, False)
                  (\ ds :: ([GHC.Types.Char], [GHC.Types.Char]) ->
                   case ds of wild { (,) k1 v ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b c :: GHC.Types.Char -> b -> b n :: b ->
                      GHC.Base.foldr @ GHC.Types.Char @ b c n k1)
                     (GHC.Types.: @ GHC.Types.Char Flickr.Monad.restGet6 v) }) -}
c1cec66913ddd878a9ae21a5e517fe96
  restGet6 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '=') -}
5a3637c8ec84612714ea44c061ed6af8
  restGet7 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '?') -}
bb631a52f41a8a49cac4eedfb7646174
  restPost :: GHC.Base.String
              -> [(GHC.Base.String, GHC.Base.String)]
              -> GHC.Types.IO GHC.Base.String
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (Flickr.Monad.restPost1
                     `cast`
                   (<GHC.Base.String>_R
                    ->_R <[(GHC.Base.String, GHC.Base.String)]>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))) -}
f41aea93e65f0fbf3cbe81431e47670a
  restPost1 :: GHC.Base.String
               -> [(GHC.Base.String, GHC.Base.String)]
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
    {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
       Unfolding: (\ a1 :: GHC.Base.String
                     kv :: [(GHC.Base.String, GHC.Base.String)]
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   let {
                     ds :: (Util.Post.PostReq, [t])
                     = \ @ t ->
                       case Flickr.Monad.restPost5 @ t kv of ww { (#,#) ww1 ww2 ->
                       (ww1, ww2) }
                   } in
                   case Util.Post.testRequest5
                          (case ds @ (GHC.Prim.Any *) of wild { (,) r vs1 -> r })
                          Flickr.Monad.restPost4
                          eta of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,) vs2 hs0 body0 ->
                   let {
                     body :: [GHC.Types.Char]
                     = case body0 of wild1 {
                         [] -> GHC.Types.[] @ GHC.Types.Char
                         : ipv2 ipv3
                         -> GHC.Types.:
                              @ GHC.Types.Char
                              Flickr.Monad.restPost3
                              (GHC.Types.: @ GHC.Types.Char Flickr.Monad.parseDoc1 wild1) }
                   } in
                   Util.Fetch.postContentsURL1
                     (GHC.Base.++
                        @ GHC.Types.Char
                        a1
                        (case ds
                                @ ([GHC.Types.Char], [GHC.Types.Char]) of wild1 { (,) r vs1 ->
                         let {
                           n :: [GHC.Types.Char]
                           = case vs2 of wild2 {
                               [] -> GHC.Types.[] @ GHC.Types.Char
                               : ds2 ds3
                               -> case ds @ (GHC.Prim.Any *) of wild3 { (,) r1 vs3 ->
                                  case vs3 of wild4 {
                                    [] -> GHC.Types.: @ GHC.Types.Char Flickr.Monad.restGet7 wild2
                                    : ds4 ds5
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         Flickr.Monad.restGet4
                                         wild2 } } }
                         } in
                         case vs1 of wild2 {
                           [] -> n
                           : ipv2 ipv3
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   Flickr.Monad.restGet7
                                   (case GHC.Base.map
                                           @ ([GHC.Types.Char], [GHC.Types.Char])
                                           @ [GHC.Types.Char]
                                           Flickr.Monad.restGet5
                                           wild2 of wild3 {
                                      [] -> GHC.Types.[] @ GHC.Types.Char
                                      : x xs1
                                      -> Data.List.intercalate_$spoly_go
                                           @ GHC.Types.Char
                                           x
                                           (Data.List.prependToAll
                                              @ [GHC.Types.Char]
                                              Flickr.Monad.restGet3
                                              xs1) }))
                                n } }))
                     (GHC.Types.:
                        @ ([GHC.Types.Char], GHC.Base.String)
                        (Flickr.Monad.restPost2,
                         case GHC.List.$wlenAcc @ GHC.Types.Char body 0 of ww { DEFAULT ->
                         case GHC.Show.$wshowSignedInt
                                0
                                ww
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        hs0)
                     body
                     ipv } }) -}
b0a999a41aa80c97febf0bd4ac949719
  restPost2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "Content-Length"#) -}
40b223d18fe9096ead5f8672d5c5cdd2
  restPost3 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\r') -}
cd233ebf4ce316e6603217b7ccac15fe
  restPost4 :: Data.Maybe.Maybe Util.Post.PostKind
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (Data.Maybe.Just
                     @ Util.Post.PostKind
                     Util.Post.PostQuery) -}
72ac75fc674e29481657b8c9c3da406b
  restPost5 :: [(GHC.Base.String, [GHC.Types.Char])]
               -> (# Util.Post.PostReq, [t] #)
    {- Arity: 1, Strictness: <S,1*U> -}
f125e7e6e5208bcd7826f3bc4f81f647
  signedMethod :: Flickr.Monad.FM a -> Flickr.Monad.FM a
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(C(U))>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
f96a0fcb50ff6e6800b51da45da4b68a
  throwFlickErr :: Flickr.Monad.FlickErr -> Flickr.Monad.FM a
    {- Arity: 1, Strictness: <L,U>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 e :: Flickr.Monad.FlickErr ->
                   Flickr.Monad.FM
                     @ a1
                     (\ ds :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ a1
                        (Flickr.Monad.$fExceptionFlickErr_$ctoException e)
                        eta)
                       `cast`
                     (<Flickr.Monad.FMEnv>_R ->_R Sym (GHC.Types.NTCo:IO[0] <a1>_R))) -}
db743e147a71926bca94135608af6fa8
  tryFlick :: Flickr.Monad.FM a
              -> Flickr.Monad.FM (Data.Either.Either Flickr.Monad.FlickErr a)
    {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(C(C1(U(U,U))))>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 w :: Flickr.Monad.FM a1 ->
                   case w of ww { Flickr.Monad.FM ww1 ->
                   Flickr.Monad.FM
                     @ (Data.Either.Either Flickr.Monad.FlickErr a1)
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      GHC.Prim.catch#
                        @ (Data.Either.Either Flickr.Monad.FlickErr a1)
                        @ GHC.Exception.SomeException
                        (\ s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                         case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <a1>_R)
                                s of ds1 { (#,#) ipv ipv1 ->
                         (# ipv, Data.Either.Right @ Flickr.Monad.FlickErr @ a1 ipv1 #) })
                        (Flickr.Monad.tryFlick1 @ a1)
                        eta)
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <Data.Either.Either Flickr.Monad.FlickErr a1>_R)) }) -}
430f61b517f53b81c31015e3eeaabc5e
  tryFlick1 :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                     Data.Either.Either Flickr.Monad.FlickErr a #)
    {- Arity: 2, HasNoCafRefs,
       Unfolding: (\ @ a1
                     e1 :: GHC.Exception.SomeException
                     eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                   case Flickr.Monad.$fExceptionFlickErr_$sflickFromException
                          e1 of wild {
                     Data.Maybe.Nothing
                     -> GHC.Prim.raiseIO#
                          @ GHC.Exception.SomeException
                          @ (Data.Either.Either Flickr.Monad.FlickErr a1)
                          e1
                          eta
                     Data.Maybe.Just e'
                     -> (# eta,
                           Data.Either.Left @ Flickr.Monad.FlickErr @ a1 e' #) }) -}
5cc832c0f22d7e0cf4bf5cacea477d6b
  upload_base :: Util.Fetch.URLString
    {- Unfolding: (GHC.CString.unpackCString#
                     "http://api.flickr.com/services/upload/"#) -}
06c14b5b59f3d356c7267ee478cf6985
  withAPIKey :: Util.Keys.APIKey
                -> Flickr.Monad.FM a
                -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 ak :: Util.Keys.APIKey ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ak
                           ds2
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
717bf397bacda6f23fdaa03f7cb8fce8
  withAuthMiniToken :: GHC.Base.String
                       -> Flickr.Monad.FM a
                       -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 s :: GHC.Base.String ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   let {
                     lvl23 :: Data.Maybe.Maybe GHC.Base.String
                     = Data.Maybe.Just @ GHC.Base.String s
                   } in
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           ds9
                           lvl23
                           ds11 })) }) -}
445adf74acdb9db842443d1db438f476
  withAuthToken :: GHC.Base.String
                   -> Flickr.Monad.FM a
                   -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 s :: GHC.Base.String ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   let {
                     lvl23 :: Data.Maybe.Maybe GHC.Base.String
                     = Data.Maybe.Just @ GHC.Base.String s
                   } in
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           lvl23
                           ds10
                           ds11 })) }) -}
fedd2dda892d3995bb1cb6e76c88b2e4
  withBase :: Util.Fetch.URLString
              -> Flickr.Monad.FM a
              -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 b :: Util.Fetch.URLString ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   let {
                     lvl23 :: Data.Maybe.Maybe GHC.Base.String
                     = Data.Maybe.Just @ GHC.Base.String b
                   } in
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           ds9
                           ds10
                           lvl23 })) }) -}
c84b476e88a18f6822791431226ee9a5
  withDeletePerm :: Flickr.Monad.FM a -> Flickr.Monad.FM a
    {- Arity: 1, Strictness: <S,1*U(C(U))>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withDeletePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
ed550ac07adb7000e6c771c418f6b072
  withDeletePerm1 :: Data.Maybe.Maybe GHC.Base.String
    {- Strictness: m2,
       Unfolding: (Data.Maybe.Just
                     @ GHC.Base.String
                     Flickr.Monad.withDeletePerm2) -}
afe9262bdff1d4920c18bd45578a56d2
  withDeletePerm2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "delete"#) -}
f522bb19233c2ffed4660462adcca066
  withPageSize :: GHC.Types.Int
                  -> Flickr.Monad.FM a
                  -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 sz :: GHC.Types.Int ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   let {
                     lvl23 :: Data.Maybe.Maybe GHC.Types.Int
                     = Data.Maybe.Just @ GHC.Types.Int sz
                   } in
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           ds2
                           ds3
                           lvl23
                           ds5
                           GHC.Types.True
                           ds7
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
6aa3446da9d22d6d7f84a29bfdacb8f8
  withReadPerm :: Flickr.Monad.FM a -> Flickr.Monad.FM a
    {- Arity: 1, Strictness: <S,1*U(C(U))>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withReadPerm1
                           ds9
                           ds10
                           ds11 })) }) -}
a8b518d83d461c1cb586631b9163f555
  withReadPerm1 :: Data.Maybe.Maybe GHC.Base.String
    {- Strictness: m2,
       Unfolding: (Data.Maybe.Just
                     @ GHC.Base.String
                     Flickr.Monad.withReadPerm2) -}
02c824b2f33dbae5f011ade8240b9d28
  withReadPerm2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "read"#) -}
97078ce8caf2d2893ea5231f644f07ea
  withSharedSecret :: GHC.Base.String
                      -> Flickr.Monad.FM a
                      -> Flickr.Monad.FM a
    {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U))>m,
       Unfolding: InlineRule (2, True, False)
                  (\ @ a1 s :: GHC.Base.String ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           (case ds1 of wild2 { Util.Keys.APIKey ds12 ds13 ds14 ds15 ->
                            Util.Keys.APIKey ds12 ds13 s ds15 })
                           ds2
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           ds8
                           ds9
                           ds10
                           ds11 })) }) -}
73ff2a63e3ab148ae336fe33c2f18317
  withWritePerm :: Flickr.Monad.FM a -> Flickr.Monad.FM a
    {- Arity: 1, Strictness: <S,1*U(C(U))>m,
       Unfolding: InlineRule (1, True, False)
                  (\ @ a1 ds :: Flickr.Monad.FM a1 ->
                   case ds of wild { Flickr.Monad.FM x ->
                   Flickr.Monad.FM
                     @ a1
                     (\ env :: Flickr.Monad.FMEnv ->
                      x (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           ds3
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
ce34fa3736bbde11fce6a3dce3cc7ed3
  withWritePerm1 :: Data.Maybe.Maybe GHC.Base.String
    {- Strictness: m2,
       Unfolding: (Data.Maybe.Just
                     @ GHC.Base.String
                     Flickr.Monad.withWritePerm2) -}
639f6d7b6f040ebc15c6ab3449136358
  withWritePerm2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "write"#) -}
instance GHC.Classes.Eq [Flickr.Monad.FlickErrorType]
  = Flickr.Monad.$fEqFlickErrorType
instance GHC.Exception.Exception [Flickr.Monad.FlickErr]
  = Flickr.Monad.$fExceptionFlickErr
instance GHC.Exception.Exception [Flickr.Monad.SomeFlickException]
  = Flickr.Monad.$fExceptionSomeFlickException
instance GHC.Base.Monad [Flickr.Monad.FM] = Flickr.Monad.$fMonadFM
instance GHC.Show.Show [Flickr.Monad.FlickErr]
  = Flickr.Monad.$fShowFlickErr
instance GHC.Show.Show [Flickr.Monad.FlickErrorType]
  = Flickr.Monad.$fShowFlickErrorType
instance GHC.Show.Show [Flickr.Monad.SomeFlickException]
  = Flickr.Monad.$fShowSomeFlickException
instance Data.Typeable.Internal.Typeable [*, Flickr.Monad.FlickErr]
  = Flickr.Monad.$fTypeableFlickErr
instance Data.Typeable.Internal.Typeable [*,
                                          Flickr.Monad.SomeFlickException]
  = Flickr.Monad.$fTypeableSomeFlickException
"SPEC Flickr.Monad.flickFromException [Flickr.Monad.FlickErr]" [ALWAYS] forall $dException :: GHC.Exception.Exception
                                                                                                  Flickr.Monad.FlickErr
  Flickr.Monad.flickFromException @ Flickr.Monad.FlickErr $dException
  = Flickr.Monad.$fExceptionFlickErr_$sflickFromException
"SPEC Flickr.Monad.flickToException [Flickr.Monad.FlickErr]" [ALWAYS] forall $dException :: GHC.Exception.Exception
                                                                                                Flickr.Monad.FlickErr
  Flickr.Monad.flickToException @ Flickr.Monad.FlickErr $dException
  = Flickr.Monad.$fExceptionFlickErr_$ctoException
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

