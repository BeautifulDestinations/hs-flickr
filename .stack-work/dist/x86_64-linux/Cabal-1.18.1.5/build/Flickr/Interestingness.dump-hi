
==================== FINAL INTERFACE ====================
2016-03-01 11:43:07.868259 UTC

interface flickr-0.3.3:Flickr.Interestingness 7084
  interface hash: 5c105d015033ccf79bacc54dc61f9ce9
  ABI hash: 046f02a16cdb17102acbb158b7ab1765
  export-list hash: 58200138e6c125ea5fe7afa6a0edc6c2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Interestingness.getList
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  lsArg c3c9ceb6cf2fc5ee33bd67fb297f08ca
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  DateString a427169cec8ea5149274e8471b82a83a
  Photo 2deca11afc0a961b40b35bcb8cfdb204
  PhotoInfo 80f14b9fec26e6389cc8843e842ac6d9
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toPhotoList 35e814ac6bfec3a1de4ef5e719304676
079046541db6aff7a3c27de293c7ca9c
  $wgetList :: Data.Maybe.Maybe Flickr.Types.DateString
               -> [Flickr.Types.PhotoInfo]
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 2, Strictness: <L,1*U><L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.DateString
                     w1 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Interestingness.getList3
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case GHC.Base.map
                                      @ Flickr.Types.PhotoInfo
                                      @ [GHC.Types.Char]
                                      Flickr.Types.$fShowPhotoInfo_$cshow
                                      w1 of wild {
                                 [] -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                 : ipv ipv1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Interestingness.getList2,
                                       Data.List.intercalate_$spoly_go
                                         @ GHC.Types.Char
                                         ipv
                                         (Data.List.prependToAll
                                            @ [GHC.Types.Char]
                                            Flickr.Monad.lsArg1
                                            ipv1))
                                      (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }
                           } in
                           case w of wild {
                             Data.Maybe.Nothing -> xs
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Interestingness.getList1, a1)
                                  xs }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> case GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                                   ipv
                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      [Flickr.Types.Photo] #)
                            of {}
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPhotoList
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> case GHC.Prim.raiseIO#
                                        @ GHC.Exception.SomeException
                                        @ (Flickr.Types.PhotoContext, [Flickr.Types.Photo])
                                        (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                           (Flickr.Monad.FlickErr
                                              Flickr.Monad.checkResponse14
                                              Flickr.Monad.FlickParseError
                                              (GHC.Types.[] @ GHC.Types.Char)
                                              (Data.Maybe.Nothing @ GHC.Base.String)
                                              (case GHC.List.$wlenAcc
                                                      @ GHC.Types.Char
                                                      ipv1
                                                      0 of ww11 { DEFAULT ->
                                               case GHC.Show.$wshowSignedInt
                                                      0
                                                      ww11
                                                      (GHC.Types.[]
                                                         @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                               GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    Flickr.Monad.parseDoc1
                                                    ipv1) } })))
                                        ipv
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           [Flickr.Types.Photo] #)
                                 of {}
                              Data.Maybe.Just res
                              -> (# ipv, case res of wild2 { (,) ds2 y -> y } #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Photo]>_R)) #) }) -}
af878945cf95bd5f11a5d8ab6926be64
  getList :: Data.Maybe.Maybe Flickr.Types.DateString
             -> [Flickr.Types.PhotoInfo]
             -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 2, Strictness: <L,1*U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.DateString
                     w1 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Interestingness.$wgetList w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
02570bc3d6bb1cc978b16ae4a0735592
  getList1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "date"#) -}
2555cc8e15f3d37b77cce92582bbbdd5
  getList2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "extras"#) -}
36ad1e51567748d3807ae7b233afd79d
  getList3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.interestingness.getList"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

