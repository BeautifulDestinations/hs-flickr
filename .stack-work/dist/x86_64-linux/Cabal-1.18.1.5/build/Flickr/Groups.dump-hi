
==================== FINAL INTERFACE ====================
2016-03-01 11:43:07.710176 UTC

interface flickr-0.3.3:Flickr.Groups 7084
  interface hash: 09c7aab2673709d9ef3806476ce3c40f
  ABI hash: 4529469bb2204ce7301082dcbf353273
  export-list hash: 69ad6af08e9541c438a2b54ae6f1e508
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Groups.browse
  Flickr.Groups.getInfo
  Flickr.Groups.search
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
  withReadPerm 6aa3446da9d22d6d7f84a29bfdacb8f8
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Category 16bc1d94d00982af0df627f78e760db2
  CategoryID 1ba65d85c0beea82b0137a714c293e4f
  Group af878999f035a0a349d907549a644796
  GroupID 814d222d53ec49fe860073bc3ecfc0b2
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toCategory d84d548ef77f38b140ff3d116e4d601f
  toGroup 2c7f04cdebb4c4f748631142094b156b
  toGroupList ed8352fb9fd593cf3e219cbea7034c3b
965f6372c62468a47480976abdccf840
  $wbrowse :: Data.Maybe.Maybe Flickr.Types.CategoryID
              -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.Category #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.CategoryID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Groups.browse2
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Groups.browse1, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.Category
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltCategory ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.Category
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.Category>_R)) #) }) -}
d5b733a44ba4938e38875ae97bb5f760
  $wgetInfo :: Flickr.Types.GroupID
               -> Data.Maybe.Maybe GHC.Base.String
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.Group #)
    {- Arity: 2, Strictness: <L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.GroupID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Groups.getInfo3
                          (case w1 of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Groups.getInfo2, w)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Groups.getInfo1, a1)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Groups.getInfo2, w)
                                     (GHC.Types.[]
                                        @ (GHC.Base.String,
                                           GHC.Base.String))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.Group
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltGroup ww8 ww9 ww10 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.Group
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.Group>_R)) #) }) -}
127480b11a1bd1ba5dc0102a39d50305
  $wsearch :: GHC.Base.String
              -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Group] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Groups.search2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Groups.search1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.Group]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltGroupList ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.Group]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Group]>_R)) #) }) -}
9ff790a3c44436bc60b3a68ccdbcf23e
  browse :: Data.Maybe.Maybe Flickr.Types.CategoryID
            -> Flickr.Monad.FM Flickr.Types.Category
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.CategoryID ->
                   case Flickr.Groups.$wbrowse w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.Category ww1 }) -}
bc01580b487bc0e073176e889b3cf8ea
  browse1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "cat_id"#) -}
c76ab38e6e2658ae5002a9ba97f4575c
  browse2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.browse"#) -}
f0868f35edf4db2c4f20e9b413868172
  getInfo :: Flickr.Types.GroupID
             -> Data.Maybe.Maybe GHC.Base.String
             -> Flickr.Monad.FM Flickr.Types.Group
    {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.GroupID
                     w1 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Groups.$wgetInfo w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.Group ww1 }) -}
11cc4aa94696d696ba8200c2db820749
  getInfo1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "lang"#) -}
bd72ea2dd64f1ba466a5e0413fa63055
  getInfo2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "group_id"#) -}
4fbbde03bb776ee4101cf62da4366821
  getInfo3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.getInfo"#) -}
a872fc684454202ba5eb30630bedd29e
  search :: GHC.Base.String -> Flickr.Monad.FM [Flickr.Types.Group]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: GHC.Base.String ->
                   case Flickr.Groups.$wsearch w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Group] ww1 }) -}
bf8e88e221ac0f67d999133e8d6fef04
  search1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "text"#) -}
e1be5535ac959437ca74d344401ee5c1
  search2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.search"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

