
==================== FINAL INTERFACE ====================
2016-03-01 11:43:10.44147 UTC

interface flickr-0.3.3:Flickr.Test 7084
  interface hash: f2fd37fc05959d634b8db0ca304f6cb3
  ABI hash: 16ba8060d473121f8dfff7393dd0d40e
  export-list hash: b81b209a445c8a4a8bc30f19b051912b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Test.echo
  Flickr.Test.login
  Flickr.Test.nullTest
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall_ a4b037ad88ec2630c5c3c4b581c42182
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  parseDoc ebc82270611937ab5ebfce244f09c14d
  postMethod b894fdcbd5b83d21dfa037dd8bba6dcf
  withReadPerm 6aa3446da9d22d6d7f84a29bfdacb8f8
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  User 5f85fd7c8b4696b56ab0c1231a6049c3
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toUser 26b4735e6cd2b98e26b1ca726c5e9c53
import  -/  Flickr.Utils 68facf93de1ef1e4c93b470398fe5414
  exports: 7ebed314ffe0fcb0fea5a3de318e595b
  children 32b0abd5039eb2c78e3f88f6d5997003
import  -/  xml-1.3.14:Text.XML.Light 9d59617891bd0fbdb6d3ffcf65939020
import  -/  xml-1.3.14:Text.XML.Light.Proc 277b74c044fa89f0db17455b56117130
import  -/  xml-1.3.14:Text.XML.Light.Types 4483de4cddeaa14654667ed2520d029e
0ee2ed01fc188c6320f06387bf79460b
  $wecho :: [(GHC.Base.String, GHC.Base.String)]
            -> (# Flickr.Monad.FMEnv
                  -> GHC.Types.IO [(GHC.Base.String, GHC.Base.String)] #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: [(GHC.Base.String, GHC.Base.String)] ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Test.echo2
                          w of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [(GHC.Base.String, GHC.Base.String)]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               GHC.Base.map
                                 @ Text.XML.Light.Types.Element
                                 @ (GHC.Base.String, GHC.Base.String)
                                 Flickr.Test.echo1
                                 (Text.XML.Light.Proc.onlyElems_go ds4) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[(GHC.Base.String, GHC.Base.String)]>_R)) #) }) -}
0ed5fde7ba37bb41c46406f13a0eb8d6
  echo :: [(GHC.Base.String, GHC.Base.String)]
          -> Flickr.Monad.FM [(GHC.Base.String, GHC.Base.String)]
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: [(GHC.Base.String, GHC.Base.String)] ->
                   case Flickr.Test.$wecho w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [(GHC.Base.String, GHC.Base.String)] ww1 }) -}
4f3087b9a03654b90931aa7837c2dd8c
  echo1 :: Text.XML.Light.Types.Element
           -> (GHC.Base.String, GHC.Base.String)
    {- Arity: 1, HasNoCafRefs,
       Unfolding: (\ x :: Text.XML.Light.Types.Element ->
                   (case x of wild { Text.XML.Light.Types.Element ds1 ds2 ds3 ds4 ->
                    case ds1 of wild1 { Text.XML.Light.Types.QName ds5 ds6 ds7 ->
                    ds5 } },
                    Text.XML.Light.Proc.strContent x)) -}
30df35be6904f04d060de5f35ca6d8ba
  echo2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "flickr.test.echo"#) -}
5d94bb82900e29b1feaa4516b6febe41
  login :: Flickr.Monad.FM Flickr.Types.User
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Test.login1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ Flickr.Types.User
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Flickr.Types.User
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case Flickr.Types.Import.$weltUser ww4 ww5 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ Flickr.Types.User
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww7 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) }) -}
8b2676456a16f699775d8901e1c62117
  login1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "flickr.test.login"#) -}
7781009261bc58f7328e23651f4d2a3d
  nullTest :: Flickr.Monad.FM ()
    {- Unfolding: (case Flickr.Monad.$wflickCall_
                          Flickr.Test.nullTest1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ()
                     (\ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withReadPerm1
                           ds9
                           ds10
                           ds11 })) }) -}
3951dfefec8430d52757a5a22b7d323e
  nullTest1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "flickr.test.null"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

