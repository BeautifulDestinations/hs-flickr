
==================== FINAL INTERFACE ====================
2016-03-01 11:43:07.788778 UTC

interface flickr-0.3.3:Flickr.Groups.Pools 7084
  interface hash: 7cff9b17ad75453eda7d9fcb7c54ec6d
  ABI hash: c1b5c2a48d3ab12bab330107322aa978
  export-list hash: ae44799de7d2b9797e391a3667a3838a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2ef0588afd6cdd9796768bd22dc9c42c
  used TH splices: False
  where
exports:
  Flickr.Groups.Pools.add
  Flickr.Groups.Pools.getContext
  Flickr.Groups.Pools.getGroups
  Flickr.Groups.Pools.getPhotos
  Flickr.Groups.Pools.remove
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Control.Monad 483e787e07c2e49f1fb1c1b88665cb92
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:Data.Tuple cac4e06c48274e85317bd3e59867ef5b
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall_ a4b037ad88ec2630c5c3c4b581c42182
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  lsArg c3c9ceb6cf2fc5ee33bd67fb297f08ca
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
  postMethod b894fdcbd5b83d21dfa037dd8bba6dcf
  withWritePerm 73ff2a63e3ab148ae336fe33c2f18317
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Group af878999f035a0a349d907549a644796
  GroupID 814d222d53ec49fe860073bc3ecfc0b2
  Photo 2deca11afc0a961b40b35bcb8cfdb204
  PhotoID afad6d42cded8baa9088f416d88f77bf
  PhotoInfo 80f14b9fec26e6389cc8843e842ac6d9
  Tag 594aea30f29023f654431318539b9dd4
  UserID c293dabe8f0c6a26ce6f08bd072224fe
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toGroupList ed8352fb9fd593cf3e219cbea7034c3b
  toPhotoList 35e814ac6bfec3a1de4ef5e719304676
  toPhotoPair 16f81fc5c352e2bded0124d7ddf5163a
b31edde44fad1c099819947a1acd12cc
  $wadd :: Flickr.Types.PhotoID
           -> Flickr.Types.GroupID
           -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.GroupID ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Groups.Pools.add3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Groups.Pools.add2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Groups.Pools.add1, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
4697d0a8708d4914e52090ec6ae10df3
  $wgetContext :: Flickr.Types.PhotoID
                  -> Flickr.Types.GroupID
                  -> (# Flickr.Monad.FMEnv
                        -> GHC.Types.IO (Flickr.Types.Photo, Flickr.Types.Photo) #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.GroupID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Groups.Pools.getContext1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Groups.Pools.add2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Groups.Pools.add1, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.Photo, Flickr.Types.Photo)
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltPhotoPair ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.Photo, Flickr.Types.Photo)
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.Photo, Flickr.Types.Photo)>_R)) #) }) -}
bdb4c4453cb264e5e01698809f368d71
  $wgetPhotos :: Flickr.Types.GroupID
                 -> [Flickr.Types.Tag]
                 -> Data.Maybe.Maybe Flickr.Types.UserID
                 -> [Flickr.Types.PhotoInfo]
                 -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Photo] #)
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U> -}
e3a82c2016a2189f92a66caad80baa08
  $wremove :: Flickr.Types.PhotoID
              -> Flickr.Types.GroupID
              -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.GroupID ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Groups.Pools.remove1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Groups.Pools.add2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Groups.Pools.add1, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
8417150e0e74636e636fc472c5756995
  add :: Flickr.Types.PhotoID
         -> Flickr.Types.GroupID
         -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.GroupID ->
                   case Flickr.Groups.Pools.$wadd w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
cb3cc3eb55f1eebd0d595e7ccfee471e
  add1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "group_id"#) -}
855c69218e3198a9e7dab6bee765ccbb
  add2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "photo_id"#) -}
e915542dbc941730046b7d5ec9f80e4b
  add3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.pools.add"#) -}
86c4f14225fcbec6ea594286f8f15e70
  getContext :: Flickr.Types.PhotoID
                -> Flickr.Types.GroupID
                -> Flickr.Monad.FM (Flickr.Types.Photo, Flickr.Types.Photo)
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.GroupID ->
                   case Flickr.Groups.Pools.$wgetContext w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.Photo, Flickr.Types.Photo)
                     ww1 }) -}
ad248ef67d4b4a2224cfa4fdab5fc458
  getContext1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.pools.getContext"#) -}
e4244500ad93b98e49e47fc666defeda
  getGroups :: Flickr.Monad.FM [Flickr.Types.Group]
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Groups.Pools.getGroups1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ [Flickr.Types.Group]
                     (\ env :: Flickr.Monad.FMEnv
                        s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ [Flickr.Types.Group]
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                           case Flickr.Types.Import.$weltGroupList ww8 ww9 ww10 ww5 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ [Flickr.Types.Group]
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww11 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww11
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Group]>_R)) }) -}
ce4339fe48c241f71819c1b6d37f141e
  getGroups1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.pools.getGroups"#) -}
067af3c225150f3135a7e8763f8965a5
  getPhotos :: Flickr.Types.GroupID
               -> [Flickr.Types.Tag]
               -> Data.Maybe.Maybe Flickr.Types.UserID
               -> [Flickr.Types.PhotoInfo]
               -> Flickr.Monad.FM [Flickr.Types.Photo]
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: Flickr.Types.GroupID
                     w1 :: [Flickr.Types.Tag]
                     w2 :: Data.Maybe.Maybe Flickr.Types.UserID
                     w3 :: [Flickr.Types.PhotoInfo] ->
                   case Flickr.Groups.Pools.$wgetPhotos w w1 w2 w3 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Photo] ww1 }) -}
5c36410b2cbbbc54cdf3069e0835f2ca
  remove :: Flickr.Types.PhotoID
            -> Flickr.Types.GroupID
            -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.GroupID ->
                   case Flickr.Groups.Pools.$wremove w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
ff14d1d4177bc68c1fa111974661cd79
  remove1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.groups.pools.remove"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

