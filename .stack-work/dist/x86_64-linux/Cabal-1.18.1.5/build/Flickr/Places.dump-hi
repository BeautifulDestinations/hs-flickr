
==================== FINAL INTERFACE ====================
2016-03-01 11:43:10.045579 UTC

interface flickr-0.3.3:Flickr.Places 7084
  interface hash: 0910a24adf3b56738719675d1a4bc5a0
  ABI hash: 72ee5e2132623a31725afd255b36f484
  export-list hash: 09ac2d1fe8b23d607a8050319064b5ec
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Places.find
  Flickr.Places.findByLatLon
  Flickr.Places.getChildrenWithPhotosPublic
  Flickr.Places.getInfo
  Flickr.Places.getInfoByUrl
  Flickr.Places.getPlaceTypes
  Flickr.Places.placesForBoundingBox
  Flickr.Places.placesForContacts
  Flickr.Places.placesForTags
  Flickr.Places.placesForUser
  Flickr.Places.resolvePlaceId
  Flickr.Places.resolvePlaceURL
  Flickr.Places.tagsForPlace
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Data.Either d1c890129a7c6a9ec02a642c6c2f4ed3
import  -/  base:Data.List 8b77870d02d66076337587b759b7ee19
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  eiArg 051cc948abbcd461f14365b73ed185aa
  flickCall 251ebfad767c69b4942bfcec2091f0ff
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
  withReadPerm 6aa3446da9d22d6d7f84a29bfdacb8f8
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Accuracy 8bd4ee12142f445991e03afe08347ceb
  BoundingBox 22f10c6bb413e86c509c9932cddfde49
  DateDetails 4a6950cd2e58b5ae88071bdb80be45d2
  Latitude e784c5d5b1eb02f473f1ca9412deacad
  LocationPlace 8560d01a391eb1b4d2101fe4f700fd77
  Longitude 8118a960e311f1e794410d695eb238f6
  MachineTag cda52e3744bc7815cec29ad295f847f3
  Place 487fd5d3fe26f7defabfd4eaed9f914d
  PlaceID 33fbdda9f0861e717e1d3521228b5a6d
  PlaceQuery 8d2db3468022fccd907797cf82b30411
  PlaceType cb991de727e2e32de7f263bd335e4e9a
  PlaceTypeId 0abd5858cc23c73611201d0a320a3430
  PlaceTypeName 41fc7156f542f55fc852d8729aa7552d
  Tag 594aea30f29023f654431318539b9dd4
  TagInfo ef574df3355038850de619c1b9a8f352
  TagMode 2ff1baa6718bc19ab7aa73e8f0ea0c72
  Threshold cad7a7183862dc733dbf5691402375f3
  URLString 32f844fecb624b165352138e161a92d9
  WhereOnEarthID bc4b53942522074527ee64fdb076b609
  bboxMaxLatitude 0668b2b8aee2b26e1bfe89a397d5beb6
  bboxMaxLongitude cca2e9414cb529c9ff63e7bab2659458
  bboxMinLatitude a2a755f55e5c71853cf7261926fa6c79
  bboxMinLongitude 606cb7d3a94e223c3fbefbd8172486b6
  dateMaxTaken 0e6952cc34261b3103e83e58f6659964
  dateMaxUpload 15b6ac8e4fd6347b806ec4ef87bce885
  dateMinTaken f334b0da8ff3cc101bc80fb6e977116c
  dateMinUpload 298ca900da493d89be70316696367a8a
  mTagNamespace 2c29bf8f0bdd8f4d8e5eb62aa513271e
  mTagPredicate efd61913debe85ed31ca88f005f13f62
  mTagValue 504231ccd1fee0ffdaacdc57f00d6707
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toLocationPlace 700d6aaa48a298aa5b7f4b87a75290fa
  toPlaceTypes ab1d32350c9e00186aa5292988860172
  toPlaces 797fc6f754b1a206246c598f0a7acde6
  toPlacesList 22be809cd817a7cb05cedb735a1a09d9
  toTagInfoList d7489fb7b175a72eed8dc0e46fa2ecb8
0d52bc68f46037dc090345c24dc3a4ec
  $wfind :: GHC.Base.String
            -> (# Flickr.Monad.FMEnv
                  -> GHC.Types.IO (Flickr.Types.PlaceQuery, [Flickr.Types.Place]) #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.find2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Places.find1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPlaces
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.PlaceQuery, [Flickr.Types.Place])>_R)) #) }) -}
a74e61e17c708776196d88af9b2ae8a2
  $wfindByLatLon :: Flickr.Types.Latitude
                    -> Flickr.Types.Longitude
                    -> Data.Maybe.Maybe Flickr.Types.Accuracy
                    -> (# Flickr.Monad.FMEnv
                          -> GHC.Types.IO (Flickr.Types.PlaceQuery, [Flickr.Types.Place]) #)
    {- Arity: 3, Strictness: <L,U><L,U><L,1*U>,
       Unfolding: (\ w :: Flickr.Types.Latitude
                     w1 :: Flickr.Types.Longitude
                     w2 :: Data.Maybe.Maybe Flickr.Types.Accuracy ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.findByLatLon4
                          (case w2 of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.findByLatLon3, w)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Places.findByLatLon2, w1)
                                     (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)))
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.findByLatLon1, GHC.Show.$fShowInt_$cshow a1)
                                  (GHC.Types.:
                                     @ (GHC.Base.String, GHC.Base.String)
                                     (Flickr.Places.findByLatLon3, w)
                                     (GHC.Types.:
                                        @ (GHC.Base.String, GHC.Base.String)
                                        (Flickr.Places.findByLatLon2, w1)
                                        (GHC.Types.[]
                                           @ (GHC.Base.String,
                                              GHC.Base.String)))) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPlaces
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.PlaceQuery, [Flickr.Types.Place])>_R)) #) }) -}
91b8a90ee847027a62bbfb5a15e8dc6c
  $wgetChildrenWithPhotosPublic :: Data.Either.Either
                                       Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                                   -> (# Flickr.Monad.FMEnv
                                         -> GHC.Types.IO
                                                (Flickr.Types.PlaceQuery, [Flickr.Types.Place]) #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.getChildrenWithPhotosPublic3
                          (case w of wild {
                             Data.Either.Left x
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic2, x)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Either.Right x
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic1, x)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPlaces
                                   ww8
                                   ww9
                                   ww10
                                   ww4
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Flickr.Types.PlaceQuery, [Flickr.Types.Place])>_R)) #) }) -}
a6b08896652db686976f8916b3ed82fb
  $wgetInfo :: Data.Either.Either
                   Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
               -> (# Flickr.Monad.FMEnv
                     -> GHC.Types.IO Flickr.Types.LocationPlace #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.getInfo1
                          (case w of wild {
                             Data.Either.Left x
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic2, x)
                                  (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                             Data.Either.Right x
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic1, x)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.LocationPlace
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltLocationPlace ww3 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.LocationPlace
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.LocationPlace>_R)) #) }) -}
8121cd6c44cdfe9e4f97f7bb6012a327
  $wgetInfoByUrl :: Flickr.Types.URLString
                    -> (# Flickr.Monad.FMEnv
                          -> GHC.Types.IO Flickr.Types.LocationPlace #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.URLString ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.getInfoByUrl2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Places.getInfoByUrl1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.LocationPlace
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltLocationPlace ww3 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.LocationPlace
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.LocationPlace>_R)) #) }) -}
4d50eedcdd9b928eb22bee9d69564c1a
  $wplacesForBoundingBox :: Flickr.Types.BoundingBox
                            -> Data.Maybe.Maybe Flickr.Types.PlaceTypeName
                            -> Data.Maybe.Maybe Flickr.Types.PlaceTypeId
                            -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Place] #)
    {- Arity: 3,
       Strictness: <L,U(1*U(U),1*U(U),1*U(U),1*U(U))><L,1*U><L,1*U> -}
0721df54133f1789c0ba1ef9d7896ad1
  $wplacesForContacts :: Data.Either.Either
                             Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                         -> Data.Maybe.Maybe Flickr.Types.PlaceTypeId
                         -> Data.Maybe.Maybe Flickr.Types.Threshold
                         -> Data.Maybe.Maybe GHC.Base.String
                         -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Place] #)
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>,
       Unfolding: (\ w :: Data.Either.Either
                              Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                     w1 :: Data.Maybe.Maybe Flickr.Types.PlaceTypeId
                     w2 :: Data.Maybe.Maybe Flickr.Types.Threshold
                     w3 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.placesForContacts5
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case w2 of wild {
                                 Data.Maybe.Nothing
                                 -> case w3 of wild1 {
                                      Data.Maybe.Nothing
                                      -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                      Data.Maybe.Just a1
                                      -> GHC.Types.:
                                           @ (GHC.Base.String, GHC.Base.String)
                                           (Flickr.Places.placesForContacts4, a1)
                                           (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Places.placesForContacts3,
                                       GHC.Show.$fShowInt_$cshow a1)
                                      (case w3 of wild1 {
                                         Data.Maybe.Nothing
                                         -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                         Data.Maybe.Just a2
                                         -> GHC.Types.:
                                              @ (GHC.Base.String, GHC.Base.String)
                                              (Flickr.Places.placesForContacts4, a2)
                                              (GHC.Types.[]
                                                 @ (GHC.Base.String, GHC.Base.String)) }) }
                           } in
                           let {
                             xs1 :: [(GHC.Base.String, GHC.Base.String)]
                             = case w of wild {
                                 Data.Either.Left x
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Places.placesForContacts2, x)
                                      (case w1 of wild1 {
                                         Data.Maybe.Nothing -> xs
                                         Data.Maybe.Just a1
                                         -> GHC.Types.:
                                              @ (GHC.Base.String, GHC.Base.String)
                                              (Flickr.Places.placesForContacts1, a1)
                                              xs })
                                 Data.Either.Right y
                                 -> case w1 of wild1 {
                                      Data.Maybe.Nothing -> xs
                                      Data.Maybe.Just a1
                                      -> GHC.Types.:
                                           @ (GHC.Base.String, GHC.Base.String)
                                           (Flickr.Places.placesForContacts1, a1)
                                           xs } }
                           } in
                           case w of wild {
                             Data.Either.Left x -> xs1
                             Data.Either.Right y
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic1, y)
                                  xs1 }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.Place]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltPlacesList
                                   ww8
                                   ww9
                                   ww10
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.Place]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Place]>_R)) #) }) -}
a6239f4e29a456aa89ba9d0048a25e28
  $wplacesForTags :: Data.Either.Either
                         Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                     -> Data.Maybe.Maybe Flickr.Types.PlaceID
                     -> Data.Maybe.Maybe Flickr.Types.Threshold
                     -> Data.Maybe.Maybe [Flickr.Types.Tag]
                     -> Data.Maybe.Maybe Flickr.Types.TagMode
                     -> Data.Maybe.Maybe [Flickr.Types.MachineTag]
                     -> Data.Maybe.Maybe Flickr.Types.TagMode
                     -> Flickr.Types.DateDetails
                     -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Place] #)
    {- Arity: 8,
       Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U(1*U,1*U,1*U,1*U)> -}
bd2ba02aededfa0b4e19841445f624b4
  $wplacesForUser :: Data.Either.Either
                         Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                     -> Data.Either.Either
                            Flickr.Types.PlaceTypeName Flickr.Types.PlaceTypeId
                     -> Data.Maybe.Maybe Flickr.Types.Threshold
                     -> Flickr.Types.DateDetails
                     -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Place] #)
    {- Arity: 4,
       Strictness: <L,U><L,1*U><L,1*U><L,U(1*U,1*U,1*U,1*U)> -}
3d0e67c1bbff0cfa110f1e952afbf1b3
  $wresolvePlaceId :: Flickr.Types.PlaceID
                      -> (# Flickr.Monad.FMEnv
                            -> GHC.Types.IO Flickr.Types.LocationPlace #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.PlaceID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.resolvePlaceId1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Places.getChildrenWithPhotosPublic2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.LocationPlace
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltLocationPlace ww3 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.LocationPlace
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.LocationPlace>_R)) #) }) -}
7281014c5f4fb18dd9e2dfdb60eefb84
  $wresolvePlaceURL :: Flickr.Types.URLString
                       -> (# Flickr.Monad.FMEnv
                             -> GHC.Types.IO Flickr.Types.LocationPlace #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.URLString ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.resolvePlaceURL1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Places.getInfoByUrl1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.LocationPlace
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltLocationPlace ww3 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.LocationPlace
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.LocationPlace>_R)) #) }) -}
7733d6a59c52fb8fca26bb7c528daf25
  $wtagsForPlace :: Data.Either.Either
                        Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                    -> Flickr.Types.DateDetails
                    -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.TagInfo] #)
    {- Arity: 2, Strictness: <L,1*U><L,U(1*U,1*U,1*U,1*U)>,
       Unfolding: (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                     w1 :: Flickr.Types.DateDetails ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Places.tagsForPlace5
                          (let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case w1 of wild { Flickr.Types.DateDetails ds1 ds2 ds3 ds4 ->
                               case ds3 of wild1 {
                                 Data.Maybe.Nothing
                                 -> case ds4 of wild2 {
                                      Data.Maybe.Nothing
                                      -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                      Data.Maybe.Just a1
                                      -> GHC.Types.:
                                           @ (GHC.Base.String, GHC.Base.String)
                                           (Flickr.Places.tagsForPlace4, a1)
                                           (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Places.tagsForPlace3, a1)
                                      (case ds4 of wild2 {
                                         Data.Maybe.Nothing
                                         -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                                         Data.Maybe.Just a2
                                         -> GHC.Types.:
                                              @ (GHC.Base.String, GHC.Base.String)
                                              (Flickr.Places.tagsForPlace4, a2)
                                              (GHC.Types.[]
                                                 @ (GHC.Base.String, GHC.Base.String)) }) } }
                           } in
                           let {
                             xs1 :: [(GHC.Base.String, GHC.Base.String)]
                             = case w1 of wild { Flickr.Types.DateDetails ds1 ds2 ds3 ds4 ->
                               case ds1 of wild1 {
                                 Data.Maybe.Nothing
                                 -> case ds2 of wild2 {
                                      Data.Maybe.Nothing -> xs
                                      Data.Maybe.Just a1
                                      -> GHC.Types.:
                                           @ (GHC.Base.String, GHC.Base.String)
                                           (Flickr.Places.tagsForPlace2, a1)
                                           xs }
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Places.tagsForPlace1, a1)
                                      (case ds2 of wild2 {
                                         Data.Maybe.Nothing -> xs
                                         Data.Maybe.Just a2
                                         -> GHC.Types.:
                                              @ (GHC.Base.String, GHC.Base.String)
                                              (Flickr.Places.tagsForPlace2, a2)
                                              xs }) } }
                           } in
                           case w of wild {
                             Data.Either.Left x
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic1, x)
                                  xs1
                             Data.Either.Right y
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Places.getChildrenWithPhotosPublic2, y)
                                  xs1 }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.TagInfo]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltTagInfoList
                                   ww8
                                   ww9
                                   ww10
                                   ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.TagInfo]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.TagInfo]>_R)) #) }) -}
58378fd647408dec7e8ac3215bdac84e
  find :: GHC.Base.String
          -> Flickr.Monad.FM (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: GHC.Base.String ->
                   case Flickr.Places.$wfind w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                     ww1 }) -}
f0df1d0324e4b997ae87f4186e37a45d
  find1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "query"#) -}
871bb85cea4839d60cb5ca3649d153af
  find2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "flickr.places.find"#) -}
3eaddf31f7b0e43c7535ed8b2a56f3d3
  findByLatLon :: Flickr.Types.Latitude
                  -> Flickr.Types.Longitude
                  -> Data.Maybe.Maybe Flickr.Types.Accuracy
                  -> Flickr.Monad.FM (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
    {- Arity: 3, Strictness: <L,U><L,U><L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.Latitude
                     w1 :: Flickr.Types.Longitude
                     w2 :: Data.Maybe.Maybe Flickr.Types.Accuracy ->
                   case Flickr.Places.$wfindByLatLon w w1 w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                     ww1 }) -}
99352f4dc50935d53a2eb9de4aa186ad
  findByLatLon1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "accuracy"#) -}
13a69fb1fd36f44b2071af680685998e
  findByLatLon2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "lon"#) -}
209c4cfea2aa450029c61d0281bb8afe
  findByLatLon3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "lat"#) -}
4c4eb09cd1cb30820d5005009aa4378e
  findByLatLon4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.findByLatLon"#) -}
f7c876e210fcf39fc76542dc3af9bf6c
  getChildrenWithPhotosPublic :: Data.Either.Either
                                     Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                                 -> Flickr.Monad.FM (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID ->
                   case Flickr.Places.$wgetChildrenWithPhotosPublic
                          w of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ (Flickr.Types.PlaceQuery, [Flickr.Types.Place])
                     ww1 }) -}
897b9770c4ca0183330404709daaf6e9
  getChildrenWithPhotosPublic1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "woe_id"#) -}
f4a2e5729c7afd0334bee858abdcf757
  getChildrenWithPhotosPublic2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "place_id"#) -}
1185915b0d74ac07bb598dfd5da75c09
  getChildrenWithPhotosPublic3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.getChildrenWithPhotosPublic"#) -}
8cdeddf9c8cf852bd74452a3e3e92af4
  getInfo :: Data.Either.Either
                 Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
             -> Flickr.Monad.FM Flickr.Types.LocationPlace
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID ->
                   case Flickr.Places.$wgetInfo w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.LocationPlace ww1 }) -}
37b1d669ca6f795a8c3337d8b265697d
  getInfo1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.getInfo"#) -}
90e8414570af69fc47dda383eb125319
  getInfoByUrl :: Flickr.Types.URLString
                  -> Flickr.Monad.FM Flickr.Types.LocationPlace
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.URLString ->
                   case Flickr.Places.$wgetInfoByUrl w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.LocationPlace ww1 }) -}
3a28d525e15c25fe3ed4b7c99625b6ea
  getInfoByUrl1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "url"#) -}
16b8e1036823e2095f93fa42be8b795d
  getInfoByUrl2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.getInfoByUrl"#) -}
892394df88f89afe76330af5bb3f41e6
  getPlaceTypes :: Flickr.Monad.FM [Flickr.Types.PlaceType]
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Places.getPlaceTypes1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ [Flickr.Types.PlaceType]
                     (\ env :: Flickr.Monad.FMEnv
                        s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ [Flickr.Types.PlaceType]
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                           case Flickr.Types.Import.$weltPlaceTypeList
                                  ww8
                                  ww9
                                  ww10
                                  ww5 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ [Flickr.Types.PlaceType]
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww11 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww11
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.PlaceType]>_R)) }) -}
a0fdd034f671b64f2c2c11cdb0ef8a45
  getPlaceTypes1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.getPlaceTypes"#) -}
33e1b7bf05c84cc228513ef1ca90f857
  placesForBoundingBox :: Flickr.Types.BoundingBox
                          -> Data.Maybe.Maybe Flickr.Types.PlaceTypeName
                          -> Data.Maybe.Maybe Flickr.Types.PlaceTypeId
                          -> Flickr.Monad.FM [Flickr.Types.Place]
    {- Arity: 3,
       Strictness: <L,U(1*U(U),1*U(U),1*U(U),1*U(U))><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (3, True, False)
                  (\ w :: Flickr.Types.BoundingBox
                     w1 :: Data.Maybe.Maybe Flickr.Types.PlaceTypeName
                     w2 :: Data.Maybe.Maybe Flickr.Types.PlaceTypeId ->
                   case Flickr.Places.$wplacesForBoundingBox
                          w
                          w1
                          w2 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Place] ww1 }) -}
40851d938660996fe131af345c402bbc
  placesForContacts :: Data.Either.Either
                           Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                       -> Data.Maybe.Maybe Flickr.Types.PlaceTypeId
                       -> Data.Maybe.Maybe Flickr.Types.Threshold
                       -> Data.Maybe.Maybe GHC.Base.String
                       -> Flickr.Monad.FM [Flickr.Types.Place]
    {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,1*U>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: Data.Either.Either
                              Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                     w1 :: Data.Maybe.Maybe Flickr.Types.PlaceTypeId
                     w2 :: Data.Maybe.Maybe Flickr.Types.Threshold
                     w3 :: Data.Maybe.Maybe GHC.Base.String ->
                   case Flickr.Places.$wplacesForContacts
                          w
                          w1
                          w2
                          w3 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Place] ww1 }) -}
4139ef2a5f1e619dcaa9e671aac05123
  placesForContacts1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "place_type_id"#) -}
eb27342d2d50d152ec135eb8c6ef3a6e
  placesForContacts2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "place_type"#) -}
73b5fffa39d010602ce06ea9faf8e939
  placesForContacts3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "threshold"#) -}
603bd137e9d46c3732db99cec844cafe
  placesForContacts4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "contacts"#) -}
ce9d510f0cc050a700c1036a4e778010
  placesForContacts5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.placesForContacts"#) -}
4b1885feaea35e48ad91b5afdc03d3f3
  placesForTags :: Data.Either.Either
                       Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                   -> Data.Maybe.Maybe Flickr.Types.PlaceID
                   -> Data.Maybe.Maybe Flickr.Types.Threshold
                   -> Data.Maybe.Maybe [Flickr.Types.Tag]
                   -> Data.Maybe.Maybe Flickr.Types.TagMode
                   -> Data.Maybe.Maybe [Flickr.Types.MachineTag]
                   -> Data.Maybe.Maybe Flickr.Types.TagMode
                   -> Flickr.Types.DateDetails
                   -> Flickr.Monad.FM [Flickr.Types.Place]
    {- Arity: 8,
       Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U(1*U,1*U,1*U,1*U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (8, True, False)
                  (\ w :: Data.Either.Either
                              Flickr.Types.PlaceTypeName Flickr.Types.WhereOnEarthID
                     w1 :: Data.Maybe.Maybe Flickr.Types.PlaceID
                     w2 :: Data.Maybe.Maybe Flickr.Types.Threshold
                     w3 :: Data.Maybe.Maybe [Flickr.Types.Tag]
                     w4 :: Data.Maybe.Maybe Flickr.Types.TagMode
                     w5 :: Data.Maybe.Maybe [Flickr.Types.MachineTag]
                     w6 :: Data.Maybe.Maybe Flickr.Types.TagMode
                     w7 :: Flickr.Types.DateDetails ->
                   case Flickr.Places.$wplacesForTags
                          w
                          w1
                          w2
                          w3
                          w4
                          w5
                          w6
                          w7 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Place] ww1 }) -}
8e831ff4b6e086da8f5fbe211c7f6445
  placesForUser :: Data.Either.Either
                       Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                   -> Data.Either.Either
                          Flickr.Types.PlaceTypeName Flickr.Types.PlaceTypeId
                   -> Data.Maybe.Maybe Flickr.Types.Threshold
                   -> Flickr.Types.DateDetails
                   -> Flickr.Monad.FM [Flickr.Types.Place]
    {- Arity: 4,
       Strictness: <L,U><L,1*U><L,1*U><L,U(1*U,1*U,1*U,1*U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (4, True, False)
                  (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                     w1 :: Data.Either.Either
                               Flickr.Types.PlaceTypeName Flickr.Types.PlaceTypeId
                     w2 :: Data.Maybe.Maybe Flickr.Types.Threshold
                     w3 :: Flickr.Types.DateDetails ->
                   case Flickr.Places.$wplacesForUser w w1 w2 w3 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Place] ww1 }) -}
cd916ea9ebbfda902e83225cedceb2d4
  resolvePlaceId :: Flickr.Types.PlaceID
                    -> Flickr.Monad.FM Flickr.Types.LocationPlace
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.PlaceID ->
                   case Flickr.Places.$wresolvePlaceId w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.LocationPlace ww1 }) -}
3cc09940afa21922df0971618ad46b61
  resolvePlaceId1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.resolvePlaceId"#) -}
d210847a0289b9cb65f25998a17a3007
  resolvePlaceURL :: Flickr.Types.URLString
                     -> Flickr.Monad.FM Flickr.Types.LocationPlace
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.URLString ->
                   case Flickr.Places.$wresolvePlaceURL w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.LocationPlace ww1 }) -}
4a63d87da54442d1f971b7886394455b
  resolvePlaceURL1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.resolvePlaceURL"#) -}
b57f475e4fb2706e1290b7f0a8c769a1
  tagsForPlace :: Data.Either.Either
                      Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                  -> Flickr.Types.DateDetails
                  -> Flickr.Monad.FM [Flickr.Types.TagInfo]
    {- Arity: 2, Strictness: <L,1*U><L,U(1*U,1*U,1*U,1*U)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Data.Either.Either
                              Flickr.Types.PlaceID Flickr.Types.WhereOnEarthID
                     w1 :: Flickr.Types.DateDetails ->
                   case Flickr.Places.$wtagsForPlace w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.TagInfo] ww1 }) -}
e9dd1133bb3d5c05c7e75af5d1a8788d
  tagsForPlace1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "min_taken_date"#) -}
f42e0c475a276c71dbbd4600755bd552
  tagsForPlace2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "max_taken_date"#) -}
34ba2bd89a4dae945f70b6be993844dc
  tagsForPlace3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "min_upload_date"#) -}
c3f1a566a7ae47695dfa233abf9b93c4
  tagsForPlace4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "max_upload_date"#) -}
7bd535cb6ba33418d725198dc7180570
  tagsForPlace5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.places.tagsForPlace"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

