
==================== FINAL INTERFACE ====================
2016-03-01 11:43:09.685645 UTC

interface flickr-0.3.3:Flickr.Photos.Licenses 7084
  interface hash: 3b9811eb1f369e0792f0135ebdd133a4
  ABI hash: 034adc0a26e11ad66c3aef78526233d6
  export-list hash: 5dc56efff6d64b910ee2bdbfb915f871
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 31ab5db797e3798aa9ee609104977efd
  used TH splices: False
  where
exports:
  Flickr.Photos.Licenses.getInfo
  Flickr.Photos.Licenses.setLicense
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall_ a4b037ad88ec2630c5c3c4b581c42182
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  postMethod b894fdcbd5b83d21dfa037dd8bba6dcf
  withWritePerm 73ff2a63e3ab148ae336fe33c2f18317
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  License 8fe61a0bf33cb78246e7c9bcb70e444d
  LicenseID 0c87926020657d21f262a1fe20a9050d
  PhotoID afad6d42cded8baa9088f416d88f77bf
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toLicenseList 5c99467d82d5b99bca9c8c9f1e250c52
a904cbfd91f3ee188fe7c41db4d7478f
  $wsetLicense :: Flickr.Types.PhotoID
                  -> Flickr.Types.LicenseID
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.LicenseID ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.Licenses.setLicense3
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.Licenses.setLicense2, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.Licenses.setLicense1, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
cd70fb4395780f14108e24311dde3176
  getInfo :: Flickr.Monad.FM [Flickr.Types.License]
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Photos.Licenses.getInfo1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ [Flickr.Types.License]
                     (\ env :: Flickr.Monad.FMEnv
                        s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ [Flickr.Types.License]
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> (# ipv,
                              case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                              Data.Maybe.mapMaybe
                                @ Text.XML.Light.Types.Element
                                @ Flickr.Types.License
                                Flickr.Types.Import.eltLicense
                                (Flickr.Utils.pNodes
                                   Flickr.Types.Import.eltLicense1
                                   (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.License]>_R)) }) -}
8fe52edccd4f7612ff39558e912b6d71
  getInfo1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.licenses.getInfo"#) -}
0b173442f04b2e642431bf8dde63e9d9
  setLicense :: Flickr.Types.PhotoID
                -> Flickr.Types.LicenseID
                -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.LicenseID ->
                   case Flickr.Photos.Licenses.$wsetLicense w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
212a0f769c4bb3953c11e43405a17885
  setLicense1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "license_id"#) -}
44fef3318eb5240f99d90377227b820e
  setLicense2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "photo_id"#) -}
bec799f39b9098e0f73989521e8e7a3d
  setLicense3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.licenses.setLicense"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

