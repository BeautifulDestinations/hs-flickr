
==================== FINAL INTERFACE ====================
2016-03-01 11:43:09.215724 UTC

interface flickr-0.3.3:Flickr.Photos.Comments 7084
  interface hash: b16635941def628fdde7bbc39932cbbe
  ABI hash: d81e0da326cc4027147faf943654cc42
  export-list hash: 976ad3b1f53d85efd387d672f1a1baaf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 31ab5db797e3798aa9ee609104977efd
  used TH splices: False
  where
exports:
  Flickr.Photos.Comments.addComment
  Flickr.Photos.Comments.deleteComment
  Flickr.Photos.Comments.editComment
  Flickr.Photos.Comments.getList
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall_ a4b037ad88ec2630c5c3c4b581c42182
  flickTranslate e491e152a5d427431ba516a4c3704787
  flickrCall 34898e4ffd59bc42983538432cb8d2c6
  mbArg fa8e1aa0b07207d002e5dac562d3d3bf
  postMethod b894fdcbd5b83d21dfa037dd8bba6dcf
  withWritePerm 73ff2a63e3ab148ae336fe33c2f18317
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Comment 494983341f44d73e6ff4b0810cd80eb0
  CommentID e664f0f9f82650f48337e7eae3f3838b
  DateDetails 4a6950cd2e58b5ae88071bdb80be45d2
  PhotoID afad6d42cded8baa9088f416d88f77bf
  dateMaxTaken 0e6952cc34261b3103e83e58f6659964
  dateMinTaken f334b0da8ff3cc101bc80fb6e977116c
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toCommentID 6f4619e0c25859a68bd5b6f2c76ee480
  toCommentList cb0a08aba25b4481e036a293f066801b
7afff5e616d9d1061eb28dd1eec59e04
  $waddComment :: Flickr.Types.PhotoID
                  -> GHC.Base.String
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.CommentID #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.PhotoID w1 :: GHC.Base.String ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.Comments.addComment4
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.Comments.addComment3, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.Comments.addComment2, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  GHC.Types.True
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withWritePerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.CommentID
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.Photos.Comments.addComment1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.CommentID
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.CommentID>_R)) #) }) -}
9640538979edea90c47d720bcfab8d16
  $weditComment :: Flickr.Types.CommentID
                   -> GHC.Base.String
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO () #)
    {- Arity: 2, Strictness: <L,U><L,U>,
       Unfolding: (\ w :: Flickr.Types.CommentID w1 :: GHC.Base.String ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.Comments.editComment1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.Comments.deleteComment1, w)
                             (GHC.Types.:
                                @ (GHC.Base.String, GHC.Base.String)
                                (Flickr.Photos.Comments.addComment2, w1)
                                (GHC.Types.[]
                                   @ (GHC.Base.String, GHC.Base.String)))) of ww { (##) ww1 ->
                   (# \ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 }) #) }) -}
592d2fd8f0a37d567e2a1cd15b8cbe46
  $wgetList :: Flickr.Types.PhotoID
               -> Flickr.Types.DateDetails
               -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Comment] #)
    {- Arity: 2, Strictness: <L,U><L,U(1*U,1*U,A,A)>,
       Unfolding: (\ w :: Flickr.Types.PhotoID
                     w1 :: Flickr.Types.DateDetails ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Photos.Comments.getList3
                          (case w1 of wild { Flickr.Types.DateDetails ds1 ds2 ds3 ds4 ->
                           let {
                             xs :: [(GHC.Base.String, GHC.Base.String)]
                             = case ds2 of wild1 {
                                 Data.Maybe.Nothing
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.Comments.addComment3, w)
                                      (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                                 Data.Maybe.Just a1
                                 -> GHC.Types.:
                                      @ (GHC.Base.String, GHC.Base.String)
                                      (Flickr.Photos.Comments.getList2, a1)
                                      (GHC.Types.:
                                         @ (GHC.Base.String, GHC.Base.String)
                                         (Flickr.Photos.Comments.addComment3, w)
                                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) }
                           } in
                           case ds1 of wild1 {
                             Data.Maybe.Nothing -> xs
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Photos.Comments.getList1, a1)
                                  xs } }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.Comment]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> (# ipv,
                               case x of wild1 { Text.XML.Light.Types.Element ds2 ds3 ds4 ds5 ->
                               Data.Maybe.mapMaybe
                                 @ Text.XML.Light.Types.Element
                                 @ Flickr.Types.Comment
                                 Flickr.Types.Import.eltComment
                                 (Flickr.Utils.pNodes
                                    Flickr.Types.Import.eltComment5
                                    (Text.XML.Light.Proc.onlyElems_go ds4)) } #) } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Flickr.Types.Comment]>_R)) #) }) -}
596cbfa3cff5a0918af2591725bc0d57
  addComment :: Flickr.Types.PhotoID
                -> GHC.Base.String
                -> Flickr.Monad.FM Flickr.Types.CommentID
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: GHC.Base.String ->
                   case Flickr.Photos.Comments.$waddComment w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.CommentID ww1 }) -}
d1d6e3a800e800aa4a4835f903c96e19
  addComment1 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.Types.Import.eltAuthToken2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
f667a5bd5ea5a83d28e2ba1a42062616
  addComment2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "comment_text"#) -}
93cebdb1e7220e236a4bd8344ab40a4d
  addComment3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "photo_id"#) -}
33b9d72c2b03425bf79fa3f38668da91
  addComment4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.comments.addComment"#) -}
dff2dfcf38e690f1c700709790becfb8
  deleteComment :: Flickr.Types.CommentID -> Flickr.Monad.FM ()
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.CommentID ->
                   case Flickr.Monad.$wflickCall_
                          Flickr.Photos.Comments.deleteComment2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Photos.Comments.deleteComment1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ ()
                     (\ env :: Flickr.Monad.FMEnv ->
                      ww1
                        (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                         Flickr.Monad.FMEnv
                           ds1
                           GHC.Types.True
                           GHC.Types.True
                           ds4
                           ds5
                           ds6
                           ds7
                           Flickr.Monad.withWritePerm1
                           ds9
                           ds10
                           ds11 })) }) -}
ae61d4d52c63f78063269c68efcf390e
  deleteComment1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "comment_id"#) -}
40c4c3561c974da04ead9fbe074f1a8a
  deleteComment2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.comments.deleteComment"#) -}
d44caf557cc822c59ae49485a0ef90e2
  editComment :: Flickr.Types.CommentID
                 -> GHC.Base.String
                 -> Flickr.Monad.FM ()
    {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.CommentID w1 :: GHC.Base.String ->
                   case Flickr.Photos.Comments.$weditComment w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ () ww1 }) -}
dd8d6e6c0fdb8e7a8510d9bb1f0c466d
  editComment1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.comments.editComment"#) -}
9f446482e8b4da5c54f16cdd9ca3db42
  getList :: Flickr.Types.PhotoID
             -> Flickr.Types.DateDetails
             -> Flickr.Monad.FM [Flickr.Types.Comment]
    {- Arity: 2, Strictness: <L,U><L,U(1*U,1*U,A,A)>m,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoID w1 :: Flickr.Types.DateDetails ->
                   case Flickr.Photos.Comments.$wgetList w w1 of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Comment] ww1 }) -}
6bfbf691a7784af14110288693939b2e
  getList1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "min_comment_date"#) -}
43d274199aba26877e3d0db752b71a85
  getList2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "max_comment_date"#) -}
9c3fa45372c2b869192a2a4ff8524a35
  getList3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.photos.comments.getList"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

