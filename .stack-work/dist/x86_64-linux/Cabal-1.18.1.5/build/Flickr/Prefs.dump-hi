
==================== FINAL INTERFACE ====================
2016-03-01 11:43:08.010472 UTC

interface flickr-0.3.3:Flickr.Prefs 7084
  interface hash: 5e8eb5bf0016fa5010873b5a98deca84
  ABI hash: 002e7c1d9a93a82a709d684486b8bbb4
  export-list hash: 6db9714bd9764eb4b0b4578e75c35049
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Prefs.getContentType
  Flickr.Prefs.getGeoPerms
  Flickr.Prefs.getHidden
  Flickr.Prefs.getPrivacy
  Flickr.Prefs.getSafetyLevel
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall 251ebfad767c69b4942bfcec2091f0ff
  flickTranslate e491e152a5d427431ba516a4c3704787
  withReadPerm 6aa3446da9d22d6d7f84a29bfdacb8f8
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  ContentType c95f74205cfdcf8a8a1f92c75fbaaa57
  Privacy fd81207a7f196a1180a47b91a275a3b7
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toBool 5ee6f19a6d9bc626f5c08c56654d8069
  toContentType 6cb26dbd399b4b5396e6e4cb372438ce
  toPrivacy 295aa98c50e5ae693b4720edab8c9147
  toSafetyLevel 013111ecd6f0b7018c1f5804917e8a9e
fe966e1600805e0c4009d973963ec5a5
  getContentType :: Flickr.Monad.FM Flickr.Types.ContentType
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Prefs.getContentType1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ Flickr.Types.ContentType
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Flickr.Types.ContentType
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case Flickr.Types.Import.$weltContentType ww4 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ Flickr.Types.ContentType
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww7 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.ContentType>_R)) }) -}
f035be0b037caafba96e600eb9b6c734
  getContentType1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.prefs.getContentType"#) -}
9521d5a69c233bec6ffe3892da098c42
  getGeoPerms :: Flickr.Monad.FM Flickr.Types.Privacy
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Prefs.getGeoPerms1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ Flickr.Types.Privacy
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Flickr.Types.Privacy
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case Flickr.Types.Import.$weltPrivacy
                                  Flickr.Prefs.getGeoPerms_x
                                  ww4 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ Flickr.Types.Privacy
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww7 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.Privacy>_R)) }) -}
b3a56dc72fcd37429b4ee133ee34217f
  getGeoPerms1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.prefs.getGeoPerms"#) -}
038449459ba223ceaf8eae8e3d33203d
  getGeoPerms_x :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "geoperms"#) -}
646fcc178ccac655e7da7e07ebdf24c3
  getHidden :: Flickr.Monad.FM GHC.Types.Bool
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Prefs.getHidden1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ GHC.Types.Bool
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ GHC.Types.Bool
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case Flickr.Types.Import.$weltBool
                                  Flickr.Prefs.getHidden_x
                                  ww4 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ GHC.Types.Bool
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww7 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) }) -}
124e2fa4c5ed377d1b826bec1f00fbc2
  getHidden1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.prefs.getHidden"#) -}
3c86528437e8a97f87cf6239e7ec3027
  getHidden_x :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "hidden"#) -}
03835595b3fedff690f724dccc9a8eaa
  getPrivacy :: Flickr.Monad.FM Flickr.Types.Privacy
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Prefs.getPrivacy1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ Flickr.Types.Privacy
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Flickr.Types.Privacy
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case Flickr.Types.Import.$weltPrivacy
                                  Flickr.Prefs.getPrivacy_x
                                  ww4 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ Flickr.Types.Privacy
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww7 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.Privacy>_R)) }) -}
31ca672d7877449b33f49e9c88b04d5c
  getPrivacy1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.prefs.getPrivacy"#) -}
e16128425f086fac6695509b61969f32
  getPrivacy_x :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "privacy"#) -}
9d6d7404e8ddb1c2945f3d6b7b3b9add
  getSafetyLevel :: Flickr.Monad.FM GHC.Types.Int
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Prefs.getSafetyLevel1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ GHC.Types.Int
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ GHC.Types.Int
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case Flickr.Types.Import.$weltIntAttr
                                  Flickr.Prefs.getSafetyLevel_x
                                  ww4 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ GHC.Types.Int
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww7 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww7
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Int>_R)) }) -}
73623fc67247d967679b7ba0c08ec755
  getSafetyLevel1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.prefs.getSafetyLevel"#) -}
5d746ad73d71d063bd46828f967c4c0d
  getSafetyLevel_x :: GHC.Base.String
    {- Unfolding: (GHC.CString.unpackCString# "safety_level"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

