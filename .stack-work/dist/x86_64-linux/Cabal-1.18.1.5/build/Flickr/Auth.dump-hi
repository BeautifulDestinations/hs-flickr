
==================== FINAL INTERFACE ====================
2016-03-01 11:43:07.383827 UTC

interface flickr-0.3.3:Flickr.Auth 7084
  interface hash: e4f5143b1c504d91f368c74dd2876043
  ABI hash: 8f179abded5c7da3ddf9aa55af8ef908
  export-list hash: 849e9e628262908c761e3f78263dda2e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Auth.checkToken
  Flickr.Auth.getFrob
  Flickr.Auth.getFullToken
  Flickr.Auth.getToken
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall 251ebfad767c69b4942bfcec2091f0ff
  flickTranslate e491e152a5d427431ba516a4c3704787
  signedMethod f125e7e6e5208bcd7826f3bc4f81f647
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  AuthFrob 78f1849e1e4cd62d7d433afb898d55d5
  AuthMiniToken 070b6136f6560fedd6bab7f04c43d718
  AuthToken a2e2a7b700cf766eb756920590f94ec0
  AuthTokenValue 874b134dd2621fa2af13215b45ed1328
  aFrob a21827715d62bb9e13fbb90ac15e0363
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toAuthFrob 3af3f7ae229a6ef778b80492e0f67fa0
  toAuthToken 0a35072e178e2dcdbfe6bed6b12fb514
dcc6c41850092a4a4c88ff4754000cb8
  $wcheckToken :: Flickr.Types.AuthTokenValue
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.AuthToken #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.AuthTokenValue ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Auth.checkToken2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Auth.checkToken1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  ds8
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.AuthToken
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltAuthToken ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.AuthToken
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.AuthToken>_R)) #) }) -}
1ed1ec0fd4799b315b018cdccb348f7b
  $wgetFullToken :: Flickr.Types.AuthMiniToken
                    -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.AuthToken #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.AuthMiniToken ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Auth.getFullToken2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Auth.getFullToken1, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  ds8
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.AuthToken
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltAuthToken ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.AuthToken
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.AuthToken>_R)) #) }) -}
1949b234527cf64ada0cd2b807267dc0
  $wgetToken :: Flickr.Types.AuthFrob
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.AuthToken #)
    {- Arity: 1, Strictness: <L,1*U(1*U)>,
       Unfolding: (\ w :: Flickr.Types.AuthFrob ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Auth.getToken2
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.Auth.getToken1, Flickr.Types.aFrob w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  ds8
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.AuthToken
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltAuthToken ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.AuthToken
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Flickr.Types.AuthToken>_R)) #) }) -}
5680fa526f0cddc2c3ea72fb0a874dec
  checkToken :: Flickr.Types.AuthTokenValue
                -> Flickr.Monad.FM Flickr.Types.AuthToken
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.AuthTokenValue ->
                   case Flickr.Auth.$wcheckToken w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.AuthToken ww1 }) -}
c37faf93fc5f248367a33b5bba960633
  checkToken1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "auth_token"#) -}
15a476562a74ca547d9b4758aadd4feb
  checkToken2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.checkToken"#) -}
7d50db5cba01de6f6de747db689bbdb3
  getFrob :: Flickr.Monad.FM Flickr.Types.AuthFrob
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Auth.getFrob1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ Flickr.Types.AuthFrob
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 ds8
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Flickr.Types.AuthFrob
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                           let {
                             $j :: GHC.Prim.Void#
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Flickr.Types.AuthFrob #)
                               {- Arity: 1, Strictness: <B,A>b -}
                             = \ w :: GHC.Prim.Void# ->
                               GHC.Prim.raiseIO#
                                 @ GHC.Exception.SomeException
                                 @ Flickr.Types.AuthFrob
                                 (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                    (Flickr.Monad.FlickErr
                                       Flickr.Monad.checkResponse14
                                       Flickr.Monad.FlickParseError
                                       (GHC.Types.[] @ GHC.Types.Char)
                                       (Data.Maybe.Nothing @ GHC.Base.String)
                                       (case GHC.List.$wlenAcc
                                               @ GHC.Types.Char
                                               ipv1
                                               0 of ww11 { DEFAULT ->
                                        case GHC.Show.$wshowSignedInt
                                               0
                                               ww11
                                               (GHC.Types.[]
                                                  @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                        GHC.Base.++
                                          @ GHC.Types.Char
                                          (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             Flickr.Monad.parseDoc1
                                             ipv1) } })))
                                 ipv
                           } in
                           case GHC.Classes.$fOrd[]_$s$ccompare
                                  ww8
                                  Flickr.Types.Import.eltAuthFrob1 of wild1 {
                             DEFAULT -> $j GHC.Prim.void#
                             GHC.Types.EQ
                             -> case ww9 of wild2 {
                                  Data.Maybe.Nothing
                                  -> case ww10 of wild3 {
                                       Data.Maybe.Nothing
                                       -> (# ipv,
                                             Flickr.Types.AuthFrob
                                               (Text.XML.Light.Proc.$wstrContent ww5) #)
                                       Data.Maybe.Just a2 -> $j GHC.Prim.void# }
                                  Data.Maybe.Just ipv2 -> $j GHC.Prim.void# } } } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.AuthFrob>_R)) }) -}
9edf1166ecc54b7f07d07e840e05c4e8
  getFrob1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.getFrob"#) -}
c13018bd68ce284b0ba8e754fea318ec
  getFullToken :: Flickr.Types.AuthMiniToken
                  -> Flickr.Monad.FM Flickr.Types.AuthToken
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.AuthMiniToken ->
                   case Flickr.Auth.$wgetFullToken w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.AuthToken ww1 }) -}
fd694d99b9dbe04af0627df80cf8d0bf
  getFullToken1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "mini_token"#) -}
9159f1028d5357b5d94834e9dd69e611
  getFullToken2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.getFullToken"#) -}
62a383798da5f1cfc1c52f4aefbc9c10
  getToken :: Flickr.Types.AuthFrob
              -> Flickr.Monad.FM Flickr.Types.AuthToken
    {- Arity: 1, Strictness: <L,1*U(1*U)>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.AuthFrob ->
                   case Flickr.Auth.$wgetToken w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.AuthToken ww1 }) -}
0f9ba5c8ecf2a75d4157d4c307039860
  getToken1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "frob"#) -}
3a3c073a3c1bda6d589331d5a0cec65a
  getToken2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.auth.getToken"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

