
==================== FINAL INTERFACE ====================
2016-03-01 11:43:10.513288 UTC

interface flickr-0.3.3:Flickr.URLs 7084
  interface hash: daeee6febd11a71925fc1dc7580ce9c7
  ABI hash: ba138a0d6006f2ddbf50e0683c97341c
  export-list hash: cd771ab4be6ad818d0843ec023cc9029
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.URLs.getGroup
  Flickr.URLs.getUserPhotos
  Flickr.URLs.getUserProfile
  Flickr.URLs.lookupGroup
  Flickr.URLs.lookupUser
  Flickr.URLs.photoSourceURL
  Flickr.URLs.userPhotoStreamURL
  Flickr.URLs.userPhotoURL
  Flickr.URLs.userPhotosetURL
  Flickr.URLs.userPhotosetsURL
  Flickr.URLs.userProfilePageURL
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall 251ebfad767c69b4942bfcec2091f0ff
  flickTranslate e491e152a5d427431ba516a4c3704787
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Group af878999f035a0a349d907549a644796
  GroupID 814d222d53ec49fe860073bc3ecfc0b2
  PhotoDetails 341128c749a7d878c444c56c8e108dc3
  PhotoID afad6d42cded8baa9088f416d88f77bf
  PhotoSize 58bf45fb826d8e8b27a3f7e2591f1f6a
  PhotoSizeLarge 4f8bbe007b680796288c8e39826c6b4c
  PhotoSizeMedium 26a0e98829a8ffdf6d70ca44aed4d5ab
  PhotoSizeOriginal f75da79e1d9dc8e1c1c8b36d8437dc36
  PhotoSizeSmall d9479c4e1c1562a1e8f40b44da654718
  PhotoSizeSmallSquare 07411b2d09b9c22dfaa5a5a3b2e30eab
  PhotoSizeThumb 4f03f647ae6ddba222d98266e2b831ce
  PhotosetID 7a4044ff0e254d15a2d6c1d0386e50e6
  URLString 32f844fecb624b165352138e161a92d9
  User 5f85fd7c8b4696b56ab0c1231a6049c3
  UserID c293dabe8f0c6a26ce6f08bd072224fe
  photoDetailsOrigFormat 0d46173fdf6bcf774251b6546f8a79cc
  photoDetailsOrigSecret 51b397c2e03c78c64b5d5a3d465d80e2
  photoDetailsPhoto fe4e1ada259a8aa3a070261791dd0339
  photoFarm d2a8cdc9ddbb3b3c50c9286266083f5f
  photoId db6a3c62f2e356e67d78283f88f1d940
  photoSecret 9d80ff4b9acc198adfb178c1c3012391
  photoServer eb574fcee4716504a0c76ad597e7b9d6
  photoURL ed75bc9caf9f7fcf5fee0ca2b842fe74
  userId f17112ed6033ad18aef978985a6bea57
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toGroup 2c7f04cdebb4c4f748631142094b156b
  toString aab2c09e753c1088bcf09f7457bd1eac
  toUser 26b4735e6cd2b98e26b1ca726c5e9c53
a1b7ac0cf42d4ed8460fc1647adf8481
  $wgetGroup :: Flickr.Types.GroupID
                -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.URLString #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.GroupID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.getGroup4
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.URLs.getGroup3, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ GHC.Base.String
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.URLs.getGroup1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Base.String
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) #) }) -}
39cae7b06dc2ebc3f6d3f45b30746f00
  $wgetUserPhotos :: Data.Maybe.Maybe Flickr.Types.UserID
                     -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.URLString #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.getUserPhotos2
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.URLs.getUserPhotos1, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ GHC.Base.String
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.URLs.getGroup1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Base.String
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) #) }) -}
17007d10848794086804c4767482bfb6
  $wgetUserProfile :: Data.Maybe.Maybe Flickr.Types.UserID
                      -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.URLString #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.getUserProfile1
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.URLs.getUserPhotos1, a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ GHC.Base.String
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case GHC.List.lookup
                                   @ Text.XML.Light.Types.QName
                                   @ GHC.Base.String
                                   Text.XML.Light.Types.$fEqQName
                                   Flickr.URLs.getGroup1
                                   (Flickr.Utils.pAttr_go ww4) of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Base.String
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) #) }) -}
1fb99686e3db54fc620b5befdb5ed00f
  $wlookupGroup :: Flickr.Types.URLString
                   -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.Group #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.URLString ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.lookupGroup1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.URLs.getGroup2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.Group
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltGroup ww8 ww9 ww10 ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.Group
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.Group>_R)) #) }) -}
27c46b239e14ce5658e687dbdfd2dc2f
  $wlookupUser :: Flickr.Types.URLString
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO Flickr.Types.User #)
    {- Arity: 1, Strictness: <L,U>,
       Unfolding: (\ w :: Flickr.Types.URLString ->
                   case Flickr.Monad.$wflickCall
                          Flickr.URLs.lookupUser1
                          (GHC.Types.:
                             @ (GHC.Base.String, GHC.Base.String)
                             (Flickr.URLs.getGroup2, w)
                             (GHC.Types.[]
                                @ (GHC.Base.String, GHC.Base.String))) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         s :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1 env) `cast` (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              s of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ Flickr.Types.User
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case Flickr.Types.Import.$weltUser ww4 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ Flickr.Types.User
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww7 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww9 ww10)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Flickr.Types.User>_R)) #) }) -}
8b4f69ffbfac8ff3a4a807c455ac2d3f
  $wphotoSourceURL :: Flickr.Types.PhotoID
                      -> GHC.Base.String
                      -> Data.Maybe.Maybe GHC.Integer.Type.Integer
                      -> Data.Maybe.Maybe GHC.Base.String
                      -> Data.Maybe.Maybe Flickr.Types.URLString
                      -> Data.Maybe.Maybe GHC.Base.String
                      -> Data.Maybe.Maybe GHC.Base.String
                      -> Flickr.Types.PhotoSize
                      -> Flickr.Types.URLString
    {- Arity: 8,
       Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,U>,
       Unfolding: (\ ww :: Flickr.Types.PhotoID
                     ww1 :: GHC.Base.String
                     ww2 :: Data.Maybe.Maybe GHC.Integer.Type.Integer
                     ww3 :: Data.Maybe.Maybe GHC.Base.String
                     ww4 :: Data.Maybe.Maybe Flickr.Types.URLString
                     ww5 :: Data.Maybe.Maybe GHC.Base.String
                     ww6 :: Data.Maybe.Maybe GHC.Base.String
                     w :: Flickr.Types.PhotoSize ->
                   case ww4 of wild {
                     Data.Maybe.Nothing
                     -> GHC.CString.unpackAppendCString#
                          "http://farm"#
                          (let {
                             n :: [GHC.Types.Char]
                             = GHC.CString.unpackAppendCString#
                                 ".static.flickr.com/"#
                                 (let {
                                    a :: [GHC.Types.Char]
                                    = GHC.Base.++
                                        @ GHC.Types.Char
                                        ww
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           Flickr.URLs.photoSourceURL9
                                           (let {
                                              n1 :: [GHC.Types.Char]
                                              = case w of wild1 {
                                                  Flickr.Types.PhotoSizeSmallSquare
                                                  -> Flickr.URLs.photoSourceURL8
                                                  Flickr.Types.PhotoSizeThumb
                                                  -> Flickr.URLs.photoSourceURL7
                                                  Flickr.Types.PhotoSizeSmall
                                                  -> Flickr.URLs.photoSourceURL6
                                                  Flickr.Types.PhotoSizeMedium
                                                  -> Flickr.URLs.photoSourceURL5
                                                  Flickr.Types.PhotoSizeLarge
                                                  -> Flickr.URLs.photoSourceURL4
                                                  Flickr.Types.PhotoSizeOriginal
                                                  -> GHC.CString.unpackAppendCString#
                                                       "_o."#
                                                       (case ww5 of wild2 {
                                                          Data.Maybe.Nothing
                                                          -> Flickr.URLs.photoSourceURL3
                                                          Data.Maybe.Just v -> v }) }
                                            } in
                                            case w of wild1 {
                                              DEFAULT -> GHC.Base.++ @ GHC.Types.Char ww1 n1
                                              Flickr.Types.PhotoSizeOriginal
                                              -> case ww6 of wild2 {
                                                   Data.Maybe.Nothing
                                                   -> GHC.Types.:
                                                        @ GHC.Types.Char
                                                        Flickr.URLs.photoSourceURL2
                                                        n1
                                                   Data.Maybe.Just v
                                                   -> GHC.Base.++ @ GHC.Types.Char v n1 } }))
                                  } in
                                  case ww2 of wild1 {
                                    Data.Maybe.Nothing
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         Flickr.URLs.photoSourceURL2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            Flickr.URLs.photoSourceURL1
                                            a)
                                    Data.Maybe.Just a1
                                    -> case GHC.Show.$w$cshowsPrec
                                              0
                                              a1
                                              (GHC.Types.[]
                                                 @ GHC.Types.Char) of ww7 { (#,#) ww8 ww9 ->
                                       GHC.Base.++
                                         @ GHC.Types.Char
                                         (GHC.Types.: @ GHC.Types.Char ww8 ww9)
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            Flickr.URLs.photoSourceURL1
                                            a) } })
                           } in
                           case ww3 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Types.: @ GHC.Types.Char Flickr.URLs.photoSourceURL2 n
                             Data.Maybe.Just v -> GHC.Base.++ @ GHC.Types.Char v n })
                     Data.Maybe.Just u -> u }) -}
7b15db0a24c4682d74951b6ff46067c3
  getGroup :: Flickr.Types.GroupID
              -> Flickr.Monad.FM Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.GroupID ->
                   case Flickr.URLs.$wgetGroup w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.URLString ww1 }) -}
28a61315d7a2c29df00f82d59cfc5649
  getGroup1 :: Text.XML.Light.Types.QName
    {- Unfolding: (Text.XML.Light.Types.QName
                     Flickr.URLs.getGroup2
                     (Data.Maybe.Nothing @ GHC.Base.String)
                     (Data.Maybe.Nothing @ GHC.Base.String)) -}
ff960a84fbcd57eaf696e0d87949a52c
  getGroup2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "url"#) -}
9b4ee7dc50a9d7c6fb8ae545c7d1d820
  getGroup3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "group_id"#) -}
e419140df2ae464db3d19491f83f1c81
  getGroup4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.getGroup"#) -}
198798cf0e6e7017e37fbbb85cbc36d5
  getUserPhotos :: Data.Maybe.Maybe Flickr.Types.UserID
                   -> Flickr.Monad.FM Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.URLs.$wgetUserPhotos w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.URLString ww1 }) -}
09e4dbbbf11f71c501de56e2419dda34
  getUserPhotos1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "user_id"#) -}
141d501c4e1452ce3d5cd30e849f1655
  getUserPhotos2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.getUserPhotos"#) -}
dac772fbe6ba29530b589376b045d071
  getUserProfile :: Data.Maybe.Maybe Flickr.Types.UserID
                    -> Flickr.Monad.FM Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe Flickr.Types.UserID ->
                   case Flickr.URLs.$wgetUserProfile w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.URLString ww1 }) -}
585d2b5491142d198508bde76983f5c4
  getUserProfile1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.getUserProfile"#) -}
7b083d4a1105ddefa353f216a347e91d
  lookupGroup :: Flickr.Types.URLString
                 -> Flickr.Monad.FM Flickr.Types.Group
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.URLString ->
                   case Flickr.URLs.$wlookupGroup w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.Group ww1 }) -}
0a1196247fc61ff8fa57793b6f5308bf
  lookupGroup1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.lookupGroup"#) -}
c8e130b90e7d9703527e1106ba2b5b47
  lookupUser :: Flickr.Types.URLString
                -> Flickr.Monad.FM Flickr.Types.User
    {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Flickr.Types.URLString ->
                   case Flickr.URLs.$wlookupUser w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ Flickr.Types.User ww1 }) -}
b35252e49379ae421f5e5bd028686e15
  lookupUser1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.urls.lookupUser"#) -}
226e4bd71867c22814194ff9cbabcffd
  photoSourceURL :: Flickr.Types.PhotoDetails
                    -> Flickr.Types.PhotoSize
                    -> Flickr.Types.URLString
    {- Arity: 2,
       Strictness: <S(S(LLLLLLSLLLL)LLLLLLLLLLLLLLLLL),1*U(1*U(1*U,A,A,1*U,1*U,1*U,1*U,A,A,A,A),A,A,A,A,A,A,1*U,1*U,A,A,A,A,A,A,A,A,A)><L,U>,
       Inline: INLINE[0],
       Unfolding: InlineRule (2, True, False)
                  (\ w :: Flickr.Types.PhotoDetails w1 :: Flickr.Types.PhotoSize ->
                   case w of ww { Flickr.Types.PhotoDetails ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                   case ww1 of ww19 { Flickr.Types.Photo ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ->
                   Flickr.URLs.$wphotoSourceURL
                     ww20
                     ww23
                     ww24
                     ww25
                     ww26
                     ww8
                     ww9
                     w1 } }) -}
3c3cdb5122fd179f6ba71e99d7769e10
  photoSourceURL1 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '/') -}
2d0ddea6d866c1c514e9fd95a748b31c
  photoSourceURL2 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '1') -}
0819f131fae3efd901377326d6936be1
  photoSourceURL3 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "jpg"#) -}
498f287363ba0945bb11d632f4f8edee
  photoSourceURL4 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_b.jpg"#) -}
68beade65c4986a12538ce294f6f33f2
  photoSourceURL5 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# ".jpg"#) -}
fd3ef538fa5f0169bd2c9e612d49adb0
  photoSourceURL6 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_m.jpg"#) -}
ecb9a1ab30477b248ba4e0ed7c0284bc
  photoSourceURL7 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_t.jpg"#) -}
af54c6e89b4f56eb6c84a3268e60ef27
  photoSourceURL8 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "_s.jpg"#) -}
bf732d8f3835e499ec062f2eb41b795f
  photoSourceURL9 :: GHC.Types.Char
    {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_') -}
7e5911a76c8814274355c3366fe76a89
  userPhotoStreamURL :: Flickr.Types.User -> Flickr.Types.URLString
    {- Arity: 1, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: (\ u :: Flickr.Types.User ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        Flickr.URLs.userPhotoStreamURL1 })) -}
e427f3cc1ee1616bab0b9ef33c2ba58d
  userPhotoStreamURL1 :: [GHC.Types.Char]
    {- HasNoCafRefs, Strictness: m2,
       Unfolding: (GHC.Types.:
                     @ GHC.Types.Char
                     Flickr.URLs.photoSourceURL1
                     (GHC.Types.[] @ GHC.Types.Char)) -}
304fdf4278d6cef53de5717d85b07ec8
  userPhotoURL :: Flickr.Types.User
                  -> Flickr.Types.PhotoID
                  -> Flickr.Types.URLString
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)><L,U>,
       Unfolding: (\ u :: Flickr.Types.User pid :: Flickr.Types.PhotoID ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           Flickr.URLs.photoSourceURL1
                           pid) })) -}
efc11d84b3fc3fe2ea9d378ab3fe1e51
  userPhotosetURL :: Flickr.Types.User
                     -> Flickr.Types.PhotosetID
                     -> Flickr.Types.URLString
    {- Arity: 2, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)><L,U>,
       Unfolding: (\ u :: Flickr.Types.User
                     p :: Flickr.Types.PhotosetID ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        (GHC.CString.unpackAppendCString# "/sets/"# p) })) -}
b0373817cff9008c90e4d8cc4f696adc
  userPhotosetsURL :: Flickr.Types.User -> Flickr.Types.URLString
    {- Arity: 1, Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: (\ u :: Flickr.Types.User ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/photos/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        Flickr.URLs.userPhotosetsURL1 })) -}
2c2e75e1cb70af88b3e90ca8af84ba17
  userPhotosetsURL1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "/sets/"#) -}
9ae926006af58b7331205914641c73d4
  userProfilePageURL :: Flickr.Types.User -> Flickr.Types.URLString
    {- Arity: 1, HasNoCafRefs,
       Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A)>,
       Unfolding: (\ u :: Flickr.Types.User ->
                   GHC.CString.unpackAppendCString#
                     "http://www.flickr.com/people/"#
                     (case u of wild { Flickr.Types.User ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ds2
                        Flickr.URLs.userPhotoStreamURL1 })) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

