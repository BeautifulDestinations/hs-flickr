
==================== FINAL INTERFACE ====================
2016-03-01 11:43:07.462538 UTC

interface flickr-0.3.3:Flickr.Activity 7084
  interface hash: fe09a5aeac971d955f2fdb309d6c666c
  ABI hash: 35a2fe03cb600ec0a315eea00031f75f
  export-list hash: 3d8be7931eae883ce2df035824c4175f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 33e5b289809cf83d673df26976face9f
  used TH splices: False
  where
exports:
  Flickr.Activity.userComments
  Flickr.Activity.userPhotos
module dependencies: Codec.Percent Codec.URLEncoder Flickr.Monad
                     Flickr.Types Flickr.Types.Import Flickr.Utils Util.Fetch Util.Keys
                     Util.MD5 Util.MIME Util.Post
package dependencies: HTTP-4000.2.20 array-0.5.0.0 base
                      bytestring-0.10.4.0 deepseq-1.3.0.2 filepath-1.3.0.2 ghc-prim
                      integer-gmp mime-0.3.4 mtl-2.1.3.1 network-2.6.2.1
                      network-uri-2.6.0.3 old-locale-1.0.0.6 old-time-1.1.0.2
                      parsec-3.1.9 random-1.1 text-1.2.0.6 time-1.4.2
                      transformers-0.3.0.0 utf8-string-1 xml-1.3.14
orphans: base:GHC.Base base:GHC.Float base:GHC.Real
         network-2.6.2.1:Network.Socket network-2.6.2.1:Network.Socket.Types
         random-1.1:System.Random text-1.2.0.6:Data.Text
         text-1.2.0.6:Data.Text.Lazy time-1.4.2:Data.Time.Calendar.Gregorian
         time-1.4.2:Data.Time.Format.Parse
         time-1.4.2:Data.Time.LocalTime.LocalTime
         transformers-0.3.0.0:Control.Monad.Trans.Error
family instance modules: base:Control.Applicative base:Data.Either
                         base:Data.Monoid base:Data.Type.Equality base:GHC.Exts
                         base:GHC.Generics network-uri-2.6.0.3:Network.URI
                         text-1.2.0.6:Data.Text text-1.2.0.6:Data.Text.Lazy
import  -/  base:Data.Maybe 5034d40e23c3a7110309f188001df4ca
import  -/  base:GHC.Base 5d7c5f596f9a4c8a8abd8517c8bcd5dd
import  -/  base:GHC.Show cf1a7ff9edb0f41528085aad04d33753
import  -/  base:Prelude 74043f272d60acec1777d3461cfe5ef4
import  -/  Flickr.Monad 674fd2fea86aa2605cc91229a555ec49
  exports: d889671f2b278e4b47117b8a29fd3d51
  FM 9e0a04bb4803c174c013b2fb8be73ec0
  flickCall 251ebfad767c69b4942bfcec2091f0ff
  flickTranslate e491e152a5d427431ba516a4c3704787
  withReadPerm 6aa3446da9d22d6d7f84a29bfdacb8f8
import  -/  Flickr.Types 7f9bcf8be6aa7e347e0e2da5c74c6e45
  exports: 7c44d1c58d100ffa2b43ca34db9b517a
  Item 7a51b1069005a863a9af09d417e3d2bd
import  -/  Flickr.Types.Import da2c9786faefb0407bdc4730d0d4b181
  exports: 85b5f3b03fa235dd576ef02c774e9eab
  toItems 84c55cf2b7796285432e72616066e971
import  -/  integer-gmp:GHC.Integer.Type da75f4177e120bcf6b860afbcb9b3385
2cb7c02debfe5f1a1415b80faa5d36be
  $wuserPhotos :: Data.Maybe.Maybe GHC.Integer.Type.Integer
                  -> (# Flickr.Monad.FMEnv -> GHC.Types.IO [Flickr.Types.Item] #)
    {- Arity: 1, Strictness: <L,1*U>,
       Unfolding: (\ w :: Data.Maybe.Maybe GHC.Integer.Type.Integer ->
                   case Flickr.Monad.$wflickCall
                          Flickr.Activity.userPhotos2
                          (case w of wild {
                             Data.Maybe.Nothing
                             -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                             Data.Maybe.Just a1
                             -> GHC.Types.:
                                  @ (GHC.Base.String, GHC.Base.String)
                                  (Flickr.Activity.userPhotos1, GHC.Show.$fShowInteger_$cshow a1)
                                  (GHC.Types.[]
                                     @ (GHC.Base.String, GHC.Base.String)) }) of ww { (##) ww1 ->
                   (# (\ env :: Flickr.Monad.FMEnv
                         eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                       case (ww1
                               (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                Flickr.Monad.FMEnv
                                  ds1
                                  GHC.Types.True
                                  ds3
                                  ds4
                                  ds5
                                  ds6
                                  ds7
                                  Flickr.Monad.withReadPerm1
                                  ds9
                                  ds10
                                  ds11 }))
                              `cast`
                            (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                              eta of ds1 { (#,#) ipv ipv1 ->
                       case Flickr.Monad.checkResponse ipv1 of wild {
                         Data.Either.Left err
                         -> GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ [Flickr.Types.Item]
                              (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                              ipv
                         Data.Either.Right x
                         -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                            case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                            case Flickr.Types.Import.$weltItems ww8 ww9 ww10 ww5 of wild1 {
                              Data.Maybe.Nothing
                              -> GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [Flickr.Types.Item]
                                   (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                      (Flickr.Monad.FlickErr
                                         Flickr.Monad.checkResponse14
                                         Flickr.Monad.FlickParseError
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         (Data.Maybe.Nothing @ GHC.Base.String)
                                         (case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 ipv1
                                                 0 of ww11 { DEFAULT ->
                                          case GHC.Show.$wshowSignedInt
                                                 0
                                                 ww11
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                          GHC.Base.++
                                            @ GHC.Types.Char
                                            (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Flickr.Monad.parseDoc1
                                               ipv1) } })))
                                   ipv
                              Data.Maybe.Just res -> (# ipv, res #) } } } } })
                        `cast`
                      (<Flickr.Monad.FMEnv>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Item]>_R)) #) }) -}
fc14d95413eb7d9d6a482f5e71292147
  userComments :: Flickr.Monad.FM [Flickr.Types.Item]
    {- Unfolding: (case Flickr.Monad.$wflickCall
                          Flickr.Activity.userComments1
                          (GHC.Types.[]
                             @ (GHC.Base.String, GHC.Base.String)) of ww { (##) ww1 ->
                   Flickr.Monad.FM
                     @ [Flickr.Types.Item]
                     (\ env :: Flickr.Monad.FMEnv
                        eta :: GHC.Prim.State# GHC.Prim.RealWorld ->
                      case (ww1
                              (case env of wild1 { Flickr.Monad.FMEnv ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                               Flickr.Monad.FMEnv
                                 ds1
                                 GHC.Types.True
                                 ds3
                                 ds4
                                 ds5
                                 ds6
                                 ds7
                                 Flickr.Monad.withReadPerm1
                                 ds9
                                 ds10
                                 ds11 }))
                             `cast`
                           (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Flickr.Monad.checkResponse ipv1 of wild {
                        Data.Either.Left err
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ [Flickr.Types.Item]
                             (Flickr.Monad.$fExceptionFlickErr_$ctoException err)
                             ipv
                        Data.Either.Right x
                        -> case x of ww2 { Text.XML.Light.Types.Element ww3 ww4 ww5 ww6 ->
                           case ww3 of ww7 { Text.XML.Light.Types.QName ww8 ww9 ww10 ->
                           case Flickr.Types.Import.$weltItems ww8 ww9 ww10 ww5 of wild1 {
                             Data.Maybe.Nothing
                             -> GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ [Flickr.Types.Item]
                                  (Flickr.Monad.$fExceptionFlickErr_$ctoException
                                     (Flickr.Monad.FlickErr
                                        Flickr.Monad.checkResponse14
                                        Flickr.Monad.FlickParseError
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        (Data.Maybe.Nothing @ GHC.Base.String)
                                        (case GHC.List.$wlenAcc
                                                @ GHC.Types.Char
                                                ipv1
                                                0 of ww11 { DEFAULT ->
                                         case GHC.Show.$wshowSignedInt
                                                0
                                                ww11
                                                (GHC.Types.[]
                                                   @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              Flickr.Monad.parseDoc1
                                              ipv1) } })))
                                  ipv
                             Data.Maybe.Just res -> (# ipv, res #) } } } } })
                       `cast`
                     (<Flickr.Monad.FMEnv>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <[Flickr.Types.Item]>_R)) }) -}
0d63c9a614befaea584102cd2bf0fa09
  userComments1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.activity.userComments"#) -}
4005ad98e54f9db4a3e520f5eea62985
  userPhotos :: Data.Maybe.Maybe GHC.Integer.Type.Integer
                -> Flickr.Monad.FM [Flickr.Types.Item]
    {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
       Unfolding: InlineRule (1, True, False)
                  (\ w :: Data.Maybe.Maybe GHC.Integer.Type.Integer ->
                   case Flickr.Activity.$wuserPhotos w of ww { (##) ww1 ->
                   Flickr.Monad.FM @ [Flickr.Types.Item] ww1 }) -}
e4e7171e2ecede582e57c12348cd7811
  userPhotos1 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString# "timeframe"#) -}
3d311d275bbcea3117af322c25161830
  userPhotos2 :: [GHC.Types.Char]
    {- Unfolding: (GHC.CString.unpackCString#
                     "flickr.activity.userPhotos"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

